<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>objEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mask_index = mskSmall;

while (!in(x,2*TILE,WIDTH-2*TILE) || distance_to_point(objPlayer.x,objPlayer.y) &lt; 3*TILE)
{
    x = random(WIDTH);
    y = random(HEIGHT);
}

xVel = 0;
yVel = 0;

alive = true;
invincible = 0;

maxHp = 2;
hp = maxHp;

//++++
alpha = 0;

fMax = 4;
fCur = random(fMax);
fSpeed = .2;

dir = choose(LEFT,RIGHT);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invincible = max(invincible-1,0);
if (hp == 0) alive = false;

dir = sign(objPlayer.x-x);

alpha = min(alpha+.01,1);

if (invincible)
{
    xVel *= .95;
    yVel *= .95;
    
} else
{
    xVel = lengthdir_x(.5,point_direction(x,y,objPlayer.x,objPlayer.y));
    yVel = lengthdir_y(.5,point_direction(x,y,objPlayer.x,objPlayer.y));    
}

if (!alive)
{
    var e = instance_create(x,y,objEffect);
    e.type = 2;
    instance_destroy();
}

if (global.gameOver)
    instance_destroy();
    
if (in(x+xVel,TILE,WIDTH-TILE))
    x += xVel;
else
{
    xVel = -xVel;
}

y += yVel;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
//draw_sprite_part(sprGraphics,-1,TILE,5*TILE,TILE,TILE,x,y);

fCur = (fCur+fSpeed)%fMax;
frame = floor(fCur);

draw_sprite_part_ext(sprGraphics,-1,21*TILE+frame*2*TILE,7*TILE,2*TILE,2*TILE,x-TILE,y-TILE,1,1,c_white,min(alpha,.3));
draw_sprite_part_ext(sprGraphics,-1,21*TILE+frame*2*TILE,9*TILE,2*TILE,2*TILE,x-TILE,y-TILE,1,1,c_white,min(alpha,.5));

draw_sprite_part_ext(sprGraphics,-1,19*TILE,7*TILE,2*TILE,2*TILE,x-TILE+2*TILE*(dir==LEFT),y-TILE,sign(dir),1,c_white,alpha);

if (alive &amp;&amp; invincible)
    drawHealthBar(x-.5*TILE,y-TILE);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
