<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskCannon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = WIDTH/2;

state = C_ANGLE;
shot = false;

rot = 2; //how fast does the cannon rotate
minangle = 90-33;
maxangle = 90+33;
angle = minangle + random(maxangle-minangle);

minpow = 10;
maxpow = 25;
curpow = 0;
pow = .05; //how fast does the power go up and down
sgnpow = 1; //power goes either up or down
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (state)
{
    case C_ANGLE:
        angle += rot;
        
        if (angle &gt; maxangle || angle &lt; minangle)
            rot = -rot;
            
        if (mouse_check_button_pressed(mb_any))
            state = C_POWER; //powerlevel state
    break;
    case C_POWER:
        curpow = max( min(curpow + sgnpow*pow, 1), 0);

        if (curpow == 0) sgnpow = 1;        
        if (curpow == 1) sgnpow = -1;

        if (mouse_check_button_pressed(mb_any))
        {
            var p = instance_create(x,y,objPlayer);
            p.angle = angle;
            p.pow = curpow;
            state = C_IDLE;
        }
        
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(mskCannon,-1,x,y,1,1,angle,c_white,1);

if (state == C_POWER)
{
      //draw_sprite_part(powerbar,0,0,0,8,48,(x-24)+48,(y-24));
    //draw_sprite_part(powerbar,0,8,0,10,8,(x-24)+48-1,(y-24)+48-5-abs(curpow*48));

    draw_sprite_part(sprGraphics,-1,0,0,.5*TILE,3*TILE,x+2*TILE,y-1.5*TILE);
    draw_sprite_part(sprGraphics,-1,.5*TILE,3*TILE,.5*TILE,-curpow*3*TILE,x+2*TILE,y-1.5*TILE+3*TILE);
    show_debug_message(curpow);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
