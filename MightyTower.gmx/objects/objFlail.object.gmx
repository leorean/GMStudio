<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskFlail</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;

maxVel = 3; //max velocity

xAcc = .1;
tx = x;
ty = y;

angle = 0;
yGrav = .1;

delay = 0; //reaction delay

state = ATTACK;

player = instance_create(x-choose(-6,6),y-3*TILE,objPlayer);//just some blurr so the player flaps funny at first
player.angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++FLAIL-PLAYER CONNECTION/INTERACTION
if (mouse_check_button(mb_left))
{
    tx = mouse_x;
    ty = mouse_y;
    global.lifeLine += sign(ty-global.lifeLine)*min(abs(ty-global.lifeLine)/12,5);
}

delay = max(delay-1,0);

//player.xVel += (x-player.x)/300;
//player.yVel += (y-player.y /*- 2*TILE + (y &gt;= ty)*3*TILE*/)/300;

player.xVel += (x-player.x)/120;
player.yVel += (y-player.y-3*TILE)/120;

//player.xVel = (x-player.x+sign(y-ty)*TILE)/50;
//player.yVel = (y-player.y-1*TILE)/24;

player.xVel = sign(player.xVel)*min(abs(player.xVel),3);
player.yVel = sign(player.yVel)*min(abs(player.yVel),3);

player.angle = point_direction(x,y,player.x,player.y);

//++++boulder-interaction
var boulder = instance_place(x+xVel,y+yVel,objBoulder);
if (instance_exists(boulder) &amp;&amp; !delay)
{
    /*
    var kb = point_direction(x,y,boulder.x,boulder.y);
    boulder.xVel += lengthdir_x(2,kb);
    boulder.yVel += lengthdir_y(2,kb);
    boulder.touched = true;
    */
    var kb = point_direction(x,y,boulder.x,boulder.y);
    var e = instance_create(boulder.x,boulder.y,objEffect);
    e.type = boulder.type;
    e.xVel = lengthdir_x(2,kb);
    e.yVel = lengthdir_x(2,kb);

    with (boulder) instance_destroy();
    
    delay = 5;
}

//++++enemy-interaction
var enemy = instance_place(x+xVel,y+yVel,objEnemy);
if (instance_exists(enemy) &amp;&amp; !delay)
{
    var kb = point_direction(x,y,enemy.x,enemy.y);
    
    yVel = -5;

    if (!enemy.invincible) enemy.hp = max(enemy.hp-1,0);
    
    //enemy.xVel = lengthdir_x(2,kb);
    //enemy.yVel = lengthdir_y(2,kb);
    enemy.invincible = 45;
    
    delay = 5;
}


//++++
coin = instance_place(x+xVel,y+yVel,objCoin);
    if (instance_exists(coin))
        coin.active = true;

    
//++++player physics
with(player)
{
    if (invincible == 0)
    {
        var boulder = instance_place(x+xVel,y+yVel,objBoulder);
        if (instance_exists(boulder))
        {
            var kb = point_direction(x,y,boulder.x,boulder.y);
            xVel = lengthdir_x(-5,kb);
            yVel = lengthdir_y(-5,kb);
            
            hp = max(hp-1,0);
                        
            invincible = 45;
        }
    }
    
    coin = collision_circle(x+xVel,y+yVel,3*TILE,objCoin,true,true);//instance_place(x+xVel,y+yVel,objCoin);
    if (instance_exists(coin))
        coin.active = true;
    
    if (in(x+xVel,TILE,WIDTH-TILE))// &amp;&amp; !place_meeting(x+xVel,y,objFlail))
        x += xVel;
    else
        xVel = 0;

    y += yVel;
    
    /*
    if (!place_meeting(x,y+yVel,objFlail))
        y += yVel;
    else
        yVel = 0;
    */
}

radius = 5*TILE;
angle = point_direction(x,y,x+xVel,y+yVel);


block = collision_line(bbox_left,bbox_bottom,bbox_right,bbox_bottom,objBlock,true,true);
if (instance_exists(block))
{
    yVel = 0;
    with(block) instance_destroy();
}

//++++physics

xVel = (tx-x)/24;
//yVel = (ty-y)/24;
yVel = (global.lifeLine - y)/42 + sign(ty-y)*min(abs(ty-y)/80,2);

xVel = sign(xVel)*min(abs(xVel),maxVel);
yVel = sign(yVel)*min(abs(yVel),maxVel);

if (!in(x+sign(xVel)*2,TILE,WIDTH-TILE))
{
    var spark = instance_create(x-sign(WIDTH/2-x)*TILE/2,y-TILE/2+random(TILE),objParticleSpark);
}


if (!place_meeting(x+xVel,y-yVel,objBlock) &amp;&amp; in(x+xVel,TILE,WIDTH-TILE))
    x += xVel;
else
{
    xVel = 0;
}

y += yVel;

//xVel = sign(tx-x)*min(abs(tx-x)/24,3);//3);
//yVel = sign(ty-y)*min(abs(ty-y)/24,3);
//yVel = (global.lifeLine - y)/42 + sign(ty-y)*min(abs(ty-y)/80,2);

//yVel = (global.lifeLine-y)/120;

/*if (y &gt; global.lifeLine)
    yVel += (global.lifeLine-y)/50;
else
    yVel = min(yVel+yGrav,global.yVel);*/
//if (y &gt; global.lifeLine)
//    y -= (y-global.lifeLine)/12;

/*
if (!place_meeting(x,y+yVel,objBlock))
    y += yVel;
else
{
    y -= yVel/2;
    //player.xVel *= .9;
    //player.yVel += yVel;
    //y -= yVel;
    //yVel = -yVel/2;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var n = 6, fx = 0, fy = 0;
for (var i = 1; i &lt; n; i++)
{
    fx = (player.x-x)/n * i + x;
    fy = (player.y-y)/n * i + y;
    if (i == n - 1)
        draw_sprite_ext(sprFlail,3,fx,fy,1,1,player.angle,c_white,1);    
    else
        draw_sprite(sprFlail,2,fx,fy);
        //draw_sprite_part(sprGraphics,-1,0,0,TILE,TILE,fx-TILE/2,fy-TILE/2);
}


var ea = max((global.yVel-5)/6,0);
var tmpea = floor((global.timer / 3) % 6);

draw_sprite_part_ext(sprGraphics,-1,32*TILE,0,2*TILE,2*TILE,x-TILE,y-TILE,1,1,c_white,ea/4);

draw_sprite_ext(sprFlail,0,x,y,1,1,angle,c_white,1);
draw_sprite_ext(sprFlail,1,x,y,1,1,angle,c_white,2*ea);

draw_sprite_part_ext(sprGraphics,-1,20*TILE+2*tmpea*TILE,0,2*TILE,2*TILE,x-TILE,y-TILE,1,1,c_white,ea);
    
//if (state == ATTACK)
//    draw_sprite_ext(sprFlail,1,x,y,1,1,angle,c_white,1);
//else
//    draw_sprite_ext(sprFlail,0,x,y,1,1,angle,c_white,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
