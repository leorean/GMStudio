<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskFlail</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;

maxVel = 4; //max velocity

xAcc = .1;
tx = x;
ty = global.lifeLine;

angle = 0;
yGrav = .05;

player = instance_create(x-choose(-6,6),y,objPlayer);//just some blurr so the player flaps funny at first
player.angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++FLAIL-PLAYER CONNECTION/INTERACTION
if (mouse_check_button(mb_left))
{
    tx = mouse_x;
    ty = mouse_y;
}
//else
//    ty = global.lifeLine;//(ty-global.lifeLine)/300;
    
//xVel += sign(tx-x)*min(abs(tx-x)/30,3);

player.xVel += (x-player.x)/120;
player.xVel = sign(player.xVel)*min(abs(player.xVel),3);

player.yVel += (y-player.y - 2*TILE)/280;
player.yVel = sign(player.yVel)*min(abs(player.yVel),3);

player.angle = point_direction(x,y,player.x,player.y);

//flail-boulder-interaction
var boulder = instance_place(x+xVel,y+yVel,objBoulder);
    
    if (instance_exists(boulder))
    {
        var kb = point_direction(x,y,boulder.x,boulder.y);
        boulder.xVel = lengthdir_x(5,kb);
        boulder.yVel = lengthdir_y(5,kb);
    }

//++++player physics
with(player)
{
    var boulder = instance_place(x+xVel,y+yVel,objBoulder);
    
    if (instance_exists(boulder))
    {
        var kb = point_direction(x,y,boulder.x,boulder.y);
        xVel = lengthdir_x(-5,kb);
        yVel = lengthdir_y(-5,kb);
        global.lifeLine += TILE;        
        //global.lifeLine -= TILE;
    }
    if (in(x+xVel,TILE,WIDTH-TILE))
        x += xVel;
    else
        xVel = -xVel;
    y += yVel;
}

xVel = sign(tx-x)*min(abs(tx-x)/30,3);

radius = 5*TILE;
angle = point_direction(x,y,x+xVel,y+global.yVel);//point_direction(x,y,player.x,player.y);
/*rad_angle = ((angle / 180) * pi);
player.y = y - (sin(rad_angle)) * radius;
*/

/*
radius = 5*TILE;

angle = point_direction(x,y,player.x,player.y);
rad_angle = ((angle / 180) * pi);
player.x = min(max(x + (cos(rad_angle)) * radius , TILE), WIDTH-TILE);
player.y = y - (sin(rad_angle)) * radius;
player.xVel = player.x-player.xprevious;
player.yVel = player.y-player.yprevious;
*/

//if (ty &lt; y) yVel += abs(ty-y)/4;

block = collision_line(bbox_left,bbox_bottom,bbox_right,bbox_bottom,objBlock,true,true);

if (instance_exists(block))
{
    yVel = 0;
    with(block) instance_destroy();
}

//++++physics
if (!place_meeting(x+xVel,y-yVel,objBlock) &amp;&amp; in(x+xVel,TILE,WIDTH-TILE))
    x += xVel;
else
{
    xVel = 0;
}

//yVel = (1-max(y/global.lifeLine,1))*5;
//yVel = /*sign(ty-y)*min(abs(ty-y)/24,2) +*/ (global.lifeLine - HEIGHT/2)/80;// + (global.lifeLine-y)/15;

yVel = (global.lifeLine - y)/24 + sign(ty-y)*min(abs(ty-y)/12,1.5);
y += yVel;

//y += max(yVel,.1);

//yVel = min(yVel+yGrav,global.yVel);

//yVel = (global.lifeLine-y)/120;

/*if (y &gt; global.lifeLine)
    yVel += (global.lifeLine-y)/50;
else
    yVel = min(yVel+yGrav,global.yVel);*/
//if (y &gt; global.lifeLine)
//    y -= (y-global.lifeLine)/12;

/*
if (!place_meeting(x,y+yVel,objBlock))
    y += yVel;
else
{
    y -= yVel/2;
    //player.xVel *= .9;
    //player.yVel += yVel;
    //y -= yVel;
    //yVel = -yVel/2;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var n = 6, fx = 0, fy = 0;
for (var i = 1; i &lt; n; i++)
{
    fx = (player.x-x)/n * i + x;
    fy = (player.y-y)/n * i + y;
    if (i == n - 1)
        draw_sprite_ext(sprFlail,2,fx,fy,1,1,player.angle,c_white,1);    
    else
        draw_sprite(sprFlail,1,fx,fy);
        //draw_sprite_part(sprGraphics,-1,0,0,TILE,TILE,fx-TILE/2,fy-TILE/2);
}

draw_sprite_ext(sprFlail,0,x,y,1,1,angle,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
