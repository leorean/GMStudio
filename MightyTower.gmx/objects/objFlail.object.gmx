<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskFlail</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 3;

maxVel = 5; //max velocity

xAcc = .1;
tx = x;
ty = y;

angle = 0;
yGrav = .1;

delay = 0; //reaction delay

state = ATTACK;

player = instance_create(x-6+random(12),y-2*TILE,objPlayer);//just some blurr
player.yVel = -1;

dmg = 1;

powerup = POW_NONE;
pTimer = 0;
pTimerMax = 5*60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++FLAIL-PLAYER CONNECTION/INTERACTION
if (!global.gameOver)
{
    for (i = 0; i &lt; 5; i++)
        if (device_mouse_check_button(i,mb_any))
        {
            tx = device_mouse_x(i);
            ty = device_mouse_y(i);
            global.lifeLine = ty;//+= sign(ty-global.lifeLine)*min(abs(ty-global.lifeLine)/6,14);
        }
    
    global.lifeLine = min(max(global.lifeLine,2*TILE),HEIGHT);
    
    delay = max(delay-1,0);

    with(player)    
    if (distance_to_point(objFlail.x,objFlail.y)&gt;3*TILE)
    {
        xVel += (objFlail.x-x)/120;
        yVel += (objFlail.y-y)/120;
    } else
    {
        xVel *= .95;
        yVel *= .95;        
    }
    //player.xVel += (x-player.x)/180;
    //player.yVel += (y-player.y)/180;
    
    /*other physics:
    //player.xVel += (x-player.x)/120;
    //player.yVel = (y-player.y-4*TILE)/8;
    */
    
    player.xVel = sign(player.xVel)*min(abs(player.xVel),5);
    player.yVel = sign(player.yVel)*min(abs(player.yVel),5);
    
    player.angle = point_direction(x,y,player.x,player.y);
    
}
else
{
    delay = 0;
    
    player.angle = (player.angle+3) % 360;
    //global.lifeLine = min(global.lifeLine+2,HEIGHT);
    //global.lifeLine = max(global.lifeLine-2,0);
}

//++++ENEMY INTERACTION++++
if (!global.gameOver)
{
    pTimer = max(pTimer-1,0);
    if (pTimer == 0) powerup = POW_NONE;
    
    //++++POWER UP INTERACTION++++
    var pu = instance_place(x+xVel,y+yVel,objPowerUp);
    if (instance_exists(pu) &amp;&amp; pu.alive)
    {
        powerup = pu.type;
        pTimer = pTimerMax;
        pu.alive = false;
    }
    
    //++++ENEMY INTERACTION++++
    var enemy = instance_place(x+xVel,y+yVel,objEnemy);
    if (instance_exists(enemy) &amp;&amp; !delay &amp;&amp; enemy.alive &amp;&amp; !enemy.invincible)
    {
        var kb = point_direction(x,y,enemy.x,enemy.y);
        global.shake = true; //shake screen

        if (!enemy.invincible)
        {
            enemy.hp = max(enemy.hp-dmg,0);
        }
        
        enemy.xVel = lengthdir_x(6,kb);
        enemy.yVel = lengthdir_y(6,kb);
        enemy.invincible = 45;
        
        if (enemy.hp &gt; 0)
        {
            xVel = -lengthdir_x(3,kb);
            yVel = -lengthdir_y(3,kb);
        } else
        {
            spawnRewards(enemy);
            
        }
        delay = 5;
    }
    
    //++++COIN/ETC++++
    repeat(instance_number(objCollectable))
    {
        var coll = collision_circle(x+xVel,y+yVel,global.magnetDistance,objCollectable,true,true);
            if (instance_exists(coll))
                coll.active = true;
    }

}
    
//++++PLAYER PHYSICS
with(player)
{
    if (!global.gameOver)
    {
        //++++HURT++++
        if (invincible == 0)
        {
            var enemy = instance_place(x+xVel,y+yVel,objEnemy);
            if (instance_exists(enemy) &amp;&amp; enemy.alive)
            {
                var kb = point_direction(x,y,enemy.x,enemy.y);
                global.shake = true; //shake screen
                xVel = lengthdir_x(-5,kb);
                yVel = lengthdir_y(-5,kb);
                
                hp = max(hp-enemy.dmg,0);
                
                var t = instance_create(x,y,objDamageText);
                t.text = "-"+string(enemy.dmg);
                t.color = make_color_hsv(0,202,255);
                
                invincible = 60;
                
                if (hp == 0)
                {
                    xVel = lengthdir_x(-1,kb);
                    yVel = lengthdir_y(-1,kb);
                    invincible = 0;
                    
                    //break chain effects
                    var e = instance_create(x,y,objEffect);
                    e.type = 4;
                    var e = instance_create(objFlail.x,objFlail.y,objEffect);
                    e.type = 4;
                    var e = instance_create((x+objFlail.x)/2,(y+objFlail.y)/2,objEffect);
                    e.type = 4;
                    
                    global.gameOver = true;                    
                }
            }
        }

        //++++COIN/HP/ETC-INTERACTION++++
        repeat(instance_number(objCollectable))
        {
            var coll = collision_circle(x+xVel,y+yVel,global.magnetDistance,objCollectable,true,true);
            if (instance_exists(coll))
                coll.active = true;
        }
    }
    
    if (in(x+xVel,TILE,WIDTH-TILE))
    {
        if (!place_meeting(x+xVel,y,objFlail))
            x += xVel;
        else
        {
            xVel = 0;
            x -= lengthdir_x(1,point_direction(x,y,objFlail.x,objFlail.y));            
        }
    }
    else
    {
            
        if (!global.gameOver)
            {}//xVel = 0;
        else
            xVel = -xVel;
    }
    if (!place_meeting(x,y+yVel,objFlail))
        y = max(min(y+yVel,HEIGHT+2*TILE),-2*TILE);
    else
        y -= lengthdir_y(1,point_direction(x,y,objFlail.x,objFlail.y));
}

//++++physics

if (!global.gameOver)
{
    if (!delay)
    {
        xVel = (tx-x)/24;
        yVel = (global.lifeLine - y)/42 + sign(ty-y)*min(abs(ty-y)/80,2);
    } else
    {
        xVel *= .9;
        yVel *= .9;    
    }
    angle = point_direction(x,y,x+xVel,y+yVel);

} else //GAME OVER
{
    angle = (angle - 5 + 360) % 360;
    yVel = min(yVel+.01,1);
}

xVel = sign(xVel)*min(abs(xVel),maxVel);
yVel = sign(yVel)*min(abs(yVel),maxVel);

//create sparkles
if (!in(x+sign(x-WIDTH/2)*4,TILE,WIDTH-TILE))
    var spark = instance_create(x-sign(WIDTH/2-x)*TILE/2,y-TILE/2+random(TILE),objParticleSpark);

if (!place_meeting(x+xVel,y-yVel,objBlock) &amp;&amp; in(x+xVel,TILE,WIDTH-TILE))
    x += xVel;
else
{
    if (!global.gameOver)
        xVel = 0;
    else
        xVel = -xVel;
}

y = max(min(y+yVel,HEIGHT+2*TILE),-2*TILE);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);

if (!global.gameOver)
{
    var n = 6, fx = 0, fy = 0;
    for (var i = 1; i &lt; n; i++)
    {
        fx = (player.x-x)/n * i + x;
        fy = (player.y-y)/n * i + y;
        if (i == n - 1)
        {
            if (player.invincible % 3 == 0)
            {
                //player
                with(player)
                    draw_sprite_ext(sprFlail,4,x,y,1,1,angle+90,c_white,1);
                    
                //hands
                draw_sprite_ext(sprFlail,3,fx,fy,1,1,player.angle+90,c_white,1);
            }
        }
        else
            draw_sprite(sprFlail,2,fx,fy);
    }
} else
    with(player)
        draw_sprite_ext(sprFlail,5,x,y,1,1,angle+90,c_white,1);

var ea = min(max((global.yVel-5)/6,0),.5);
var tmpea = floor((global.timer / 3) % 6);

draw_sprite_part_ext(sprGraphics,-1,32*TILE,0,2*TILE,2*TILE,x-TILE,y-TILE,1,1,c_white,ea/4);

draw_sprite_ext(sprFlail,0,x,y,1,1,angle,c_white,1);
draw_sprite_ext(sprFlail,1,x,y,1,1,angle,c_white,2*ea);

draw_sprite_part_ext(sprGraphics,-1,20*TILE+2*tmpea*TILE,0,2*TILE,2*TILE,x-TILE,y-TILE,1,1,c_white,ea);

if (powerup == POW_THUNDER)
{
    /*
    var lghtc = c_white;
    if (global.timer % 2 == 0)
        lghtc = make_color_hsv(140,155,255);
    drawLightning(x,y,x,0,lghtc);
    
    var lghte = collision_line(x,y,x,0,objEnemy,true,true);
    if (instance_exists(lghte) &amp;&amp; lghte.alive &amp;&amp; !lghte.invincible)
    {
        lghte.hp = max(lghte.hp-.1,0);
        lghte.invincible = 3;
        if (lghte.hp==0)
            spawnRewards(lghte);
    }
    */
    
    var enemies = ds_list_create();
    for (i = 0; i &lt; instance_number(objEnemy); i++)
    {
        var ee = instance_find(objEnemy,i);
        if (instance_exists(ee) &amp;&amp; ee.alive &amp;&amp; distance_to_point(ee.x,ee.y)&lt;5*TILE)
        {
            var lghtc = c_white;
            if (global.timer % 2 == 0)
                lghtc = make_color_hsv(140,155,255);
            drawLightning(x,y,ee.x,ee.y,lghtc);
            
            if (!ee.invincible)
            {
                ee.hp = max(ee.hp-.1,0);
                ee.invincible = 3;
            }
            if (ee.hp==0)
                spawnRewards(ee);
            
        }
            //ds_list_add(enemies,ee.id);
    }
    
    
    /*
    var lghte = instance_nearest(x,y,objEnemy);
    
    if (instance_exists(lghte) &amp;&amp; distance_to_point(lghte.x,lghte.y)&lt;8*TILE)
    {
        var lghtc = c_white;
        if (global.timer % 2 == 0)
            lghtc = make_color_hsv(140,155,255);
        drawLightning(x,y,lghte.x,lghte.y,lghtc);
        
        if (lghte.alive &amp;&amp; !lghte.invincible)
        {
            lghte.hp = max(lghte.hp-.1,0);
            lghte.invincible = 3;
            if (lghte.hp==0)
                spawnRewards(lghte);
        }
    }
    */

}

//if (state == ATTACK)
//    draw_sprite_ext(sprFlail,1,x,y,1,1,angle,c_white,1);
//else
//    draw_sprite_ext(sprFlail,0,x,y,1,1,angle,c_white,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
