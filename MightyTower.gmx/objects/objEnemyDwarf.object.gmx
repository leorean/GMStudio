<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>objEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mask_index = mskMedium;

x = TILE+random((WIDTH-2*TILE)/TILE)*TILE;
tx = x-TILE+random(2*TILE); ty = HEIGHT/2+(instance_number(objEnemySoldier)%5)*TILE;

angle = 0;


rot = -2+random(4);

fCur = 0;
fMax = 4;
fSpeed = .1;

rot = -1+random(2);
xVel = 0;
yVel = 2+random(1);

maxHp = 2;
hp = maxHp;

state = IDLE;
alive = true;
invincible = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alive)
{
    invincible = max(invincible-1,0);
    if (invincible)
    {
        xVel *= .95;
        yVel *= .95;
    } else
    {
        xVel += (tx-x)/400;
        xVel = sign(xVel)*min(abs(xVel),1);
        yVel += (ty-y)/400;
        yVel = sign(yVel)*min(abs(yVel),1);
    }

    angle = (angle+rot)%360;
    
    if (hp == 0)
    {
        alive = false;
        
        var e = instance_create(x,y,objEffect);
        e.type = 2;
        
    }   
} else
    instance_destroy();

//++++
if (in(x+xVel,TILE,WIDTH-TILE))
    x += xVel;
else
    xVel = -xVel;

y += yVel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);

angle = point_direction(x,y,x+xVel,y+yVel+4)+90;

fCur = (fCur + fSpeed) % fMax;
frame = floor(fCur);

if (invincible % 3 == 0)
{
    draw_sprite_ext(sprEnemyDwarf,frame,x,y,1,1,angle,c_white,1);
}
//++++draw health bar
drawHealthBar(x-1.5*TILE,y-2*TILE);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
