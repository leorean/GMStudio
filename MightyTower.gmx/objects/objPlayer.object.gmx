<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;

maxVel = 4; //max velocity

xAcc = .1;
tx = x;

angle = 0;

yGrav = global.fric;

flail = instance_create(x,y,objFlail);
flail.angle = 0;

isHooked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++flail/hook
/*
if (!isHooked &amp;&amp; !instance_exists(hook) &amp;&amp; mouse_check_button_pressed(mb_any))
{
    hook = instance_create(x,y,objHook);
    hook.angle = point_direction(hook.x,hook.y,mouse_x,mouse_y);
    hook.xVel = lengthdir_x(8,hook.angle);// + xVel;
    hook.yVel = lengthdir_y(8,hook.angle) + (yVel&lt;0)*yVel;

}

if (isHooked &amp;&amp; instance_exists(hook))
{
    angle = point_direction(x,y,hook.x,hook.y);
    xVel += lengthdir_x(1,angle);
    yVel += lengthdir_y(1,angle);
    
    
    if (yVel &lt; 0 &amp;&amp; y &lt; hook.y)
    {
        with(hook) instance_destroy();
        isHooked = false;
    }
    
    //bulge velocity
    //xVel = sign(xVel)*min(abs(xVel),maxVel);
    //yVel = sign(yVel)*min(abs(yVel),maxVel);
    //angle = point_direction(x,y,hook.x,hook.y);
    //xVel += lengthdir_x(4,angle);
    //yVel = min(yVel,0)-4;
    //yVel = lengthdir_y(4,angle);
    
    //with(hook) instance_destroy();
    //isHooked = false;

}
*/

//++++FLAIL-PLAYER CONNECTION/INTERACTION
    if (mouse_check_button(mb_left))
        tx = mouse_x;
    
    xVel = sign(tx-x)*min(abs(tx-x)/60,3);
    
    flail.xVel += (x-flail.x)/120;
    flail.yVel += (y-flail.y)/120;
    flail.yVel += yGrav;
    
    flail.xVel = sign(flail.xVel)*min(abs(flail.xVel),5);
    flail.yVel = sign(flail.yVel)*min(abs(flail.yVel),5);
/*
if (!isHooked)
{

    if (mouse_check_button(mb_left))
        tx = mouse_x;
    
    xVel = sign(tx-x)*min(abs(tx-x)/24,1);
    
    flail.xVel += (x-flail.x)/120;
    flail.yVel += (y-flail.y)/120;
    flail.yVel += yGrav;
    
    flail.xVel = sign(flail.xVel)*min(abs(flail.xVel),5);
    flail.yVel = sign(flail.yVel)*min(abs(flail.yVel),5);

    with(flail)
    {
        block = instance_place(x+xVel,y+yVel,objBlock);
        if (instance_exists(block))
        {
            objPlayer.isHooked = true;
        }        
    }    
}
else
{
    flail.xVel = 0;
    flail.yVel = 0;
    flail.y += global.yVel;
    //flail.yVel += yVel;
    
    xVel += (flail.x-x)/60;
    yVel += (flail.y-y)/60;
    
    if (yVel &lt; 0 &amp;&amp; y &lt; flail.y)
    {
        yVel -= 2;
        with(flail)
        {
            if (instance_exists(block))
                with(block)
                    instance_destroy();
        }
        isHooked = false;
    }
}*/

//++++physics

if (in(x+xVel,TILE,WIDTH-TILE))// &amp;&amp; !place_meeting(x+xVel,y,objBlock))
    x += xVel;
else
{
    xVel = -xVel/2;
}

//yGrav += .0001;
yVel += yGrav;

yVel = min(yVel,5);
y += yVel;

global.yVel = -min(yVel,0);// + global.ySpeed;

//center the player
/*if (y &lt; HEIGHT/2)
{
    y = HEIGHT/2;
    y += yVel;
}*/
y += (HEIGHT/2-y)/12;

//loose condition
if (y &gt; HEIGHT+4*TILE) room_restart();
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
