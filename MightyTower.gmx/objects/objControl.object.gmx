<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
mask_index = mskBlock;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_size(2*WIDTH,2*HEIGHT);
window_center();

if (keyboard_check_pressed(ord('R')))
    game_restart();

if (keyboard_check_pressed(ord('K')))
    with(objEnemy) hp = 0;

if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace))
    game_end();

global.timer = global.timer+1 % INF;

//++++ velocity management

global.yVel = max(2+6*(global.lifeLine/HEIGHT),4);
global.lifeLine = min(max(global.lifeLine, 1),HEIGHT);

//++++distance measurement
global.distance = max(global.distance + global.yVel*.1, global.distance);

//++++spawner

time = max(time-1,0);

if (spawnWave)
{
    if (!instance_exists(objNextWave))
    {
        //time = maxTime;
        wave = 3;//choose(1,2); //choose here, depending on depth/theme, which wave spawns
        
        switch(wave)
        {
            case 1:
                instance_create(1*WIDTH/3+random(1*WIDTH/3),HEIGHT+2*TILE,objEnemy1);
                repeat(4)
                    var boulder = instance_create(1.5*TILE+random(WIDTH-3*TILE),-2*TILE,objBoulder);
            break;
            case 2:
                instance_create(WIDTH/2+choose(-TILE,TILE),-2*TILE,objEnemy2);
            break;
            case 3:
                //instance_create(1*WIDTH/3+random(1*WIDTH/3),HEIGHT+2*TILE,objEnemy1);
                instance_create(WIDTH/2+choose(-TILE,TILE),-2*TILE,objEnemy2);
                //instance_create(1*WIDTH/3+random(1*WIDTH/3),-3*TILE,objEnemy3);
            break;
        }
        
        spawnWave = false;
    }
} else
{
    //TODO: reward player with something if he finishes before time?
    if (!instance_exists(objEnemy))
        time = 0;
    
    //if wave is clear, spawn the wave effect, reset timers, hand out goodies (treasure, heart)?
    if (time == 0)
    {
        instance_create(WIDTH/2,HEIGHT+4*TILE,objNextWave);
        time = maxTime;
        spawnWave = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.yVel = 4;
global.yAcc = .0003;
global.yVelMax = 8;

global.distance = 0;

global.coins = 0;

global.timer = 0;

//wave stuff
spawnWave = true; //if this is true, spawn a new wave of enemies
time = 0;
maxTime = 15*60; // time until next wave

/*
the horizontal line at which the flail has to be... this line should get higher as penalty,
and lower as reward, but overall higher and higher so the game finally ends.
*/
global.lifeLine = 1*HEIGHT/3;
global.lineFriction = .02; //the speed at which the lifeline goes up

flail = instance_create(WIDTH/2,global.lifeLine,objFlail);
instance_create(0,0,objBg);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_text(0,0,global.distance);
draw_text(0,TILE,global.coins);
draw_text(0,2*TILE,global.yVel);

//draw_line(0,global.lifeLine,WIDTH,global.lifeLine);

//TODO: other condition than player exists...
if (instance_exists(objPlayer))
{
    //HP
    draw_sprite_part(sprGraphics,-1,14*TILE,0,6*TILE,TILE,WIDTH/2-3*TILE,0);
    draw_sprite_part(sprGraphics,-1,15*TILE,TILE,4*TILE*(objPlayer.hp/objPlayer.maxHp),TILE,WIDTH/2-2*TILE,0);
    
    //HOUR GLASS
    var tf = min(floor(((1-time/maxTime)*13)),12);
    //sand:
    if (tf &lt; 12)
        draw_sprite(sprParticle,-1,WIDTH-1*TILE,TILE+((global.timer*.5) % 12));
    if (tf &lt; 8)
        draw_sprite(sprParticle,-1,WIDTH-1*TILE-1,TILE+((global.timer*.5+3) % 12));
    if (tf &lt; 10)
        draw_sprite(sprParticle,-1,WIDTH-1*TILE+1,TILE+((global.timer*.5+6) % 12));
    draw_sprite_part(sprGraphics,-1,19*TILE+tf*2*TILE,2*TILE,2*TILE,2*TILE,WIDTH-2*TILE,0);
    
    //draw_sprite_part(sprGraphics,-1,21*TILE,2*TILE+TILE*(1-time/maxTime),2*TILE,TILE*(time/maxTime),WIDTH-2*TILE,0+TILE*(time/maxTime));

    
    /*
    //top:
    draw_sprite_part(sprGraphics,-1,21*TILE,2*TILE+TILE*(1-time/maxTime),2*TILE,TILE*(time/maxTime),WIDTH-2*TILE,0+TILE*(1-time/maxTime));
    //bottom:
    draw_sprite_part(sprGraphics,-1,21*TILE,3*TILE+TILE*(time/maxTime),2*TILE,TILE*(1-time/maxTime),WIDTH-2*TILE,TILE+TILE*(time/maxTime));
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
