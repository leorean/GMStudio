<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
mask_index = mskBlock;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_size(2*WIDTH,2*HEIGHT);
window_center();

if (keyboard_check_pressed(ord('R')))
    game_restart();

if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace))
    game_end();
    
//+++++move everything here:
with(objBlock)
{
    y -= global.yVel;
    if (y &lt; -2*TILE) instance_destroy();
}

//++++ velocity management
if (!started &amp;&amp; instance_exists(objFlail) &amp;&amp; objFlail.y &gt;= global.lifeLine-objFlail.yVel)
    started = true;
/*
if (started)
    global.yVel = floor(7-(global.lifeLine/HEIGHT/2)*3);
else
    global.yVel = 4;
*/
global.yVel = max(2+6*(global.lifeLine/HEIGHT),4);
//global.lifeLine -= global.lineFriction; //the lifeline gets too high in due time

if (keyboard_check(ord('1')))
    global.lifeLine += 1;
if (keyboard_check(ord('2')))
    global.lifeLine -= 1;

global.lifeLine = min(max(global.lifeLine, 1),HEIGHT);
//++++distance measurement
global.distance = max(global.distance + global.yVel, global.distance);
//show_debug_message(global.height);

spawnheight += global.yVel;

//++++spawner
if (instance_exists(objFlail))
{
    if (spawnheight div (HEIGHT/2) &gt; 1)
    {
        var boulder = instance_create(1.5*TILE+random(WIDTH-3*TILE),-2*TILE,objBoulder);

        var coin = instance_create(1.5*TILE+random(WIDTH-3*TILE),HEIGHT+2*TILE,objCoin);
        
        var tmpx = 0;
        repeat(0)//1+irandom(10))
        {
            tmpx = TILE+(random(WIDTH-2*TILE)div TILE)*TILE;
            while (place_meeting(tmpx,HEIGHT,objBlock)) tmpx = TILE+(random(WIDTH-2*TILE)div TILE)*TILE;
            {
                var b = instance_create(tmpx,HEIGHT,objBlock);
                b.type = choose(0,1);
            }
        }
        spawnheight = 0;
    }
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.yVel = 0;
global.ySpeed = .5;

global.distance = 0;
spawnheight = 0;

global.fric = 0.005; //air friction
global.maxPow = 10; //full potential power of the shot

global.coins = 0;

/*
the horizontal line at which the flail has to be... this line should get higher as penalty,
and lower as reward, but overall higher and higher so the game finally ends.
*/
global.lifeLine = 1*HEIGHT/2;
global.lineFriction = .02; //the speed at which the lifeline goes up

started = false; //this will be set true once per run, when the player reaches a certain y-height on screen

flail = instance_create(WIDTH/2,global.lifeLine,objFlail);
instance_create(0,0,objBg);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_text(0,0,global.distance);
draw_text(0,TILE,global.coins);

//draw_line(0,global.lifeLine,WIDTH,global.lifeLine);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
