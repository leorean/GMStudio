<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskWarrior</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAny</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// set type in init!
type = -1;
initialized = false;

state = WALK;
stateprev = state;

xVel = 0;
yVel = 0;
yGrav = .1;
onGround = false;

fCur = 0;
frame = 0;

walkSpeed = .5;
hp = 1;

waitTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>INIT STATS</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!initialized)
{
    //types: sword warrior, bow, giant, leader
    switch (type)
    {
        case 0:        
            maxHp = 30;
            dmg = 3;
            maxAttackDelay = 30;
            legionState = WALK;
            distance = 0;
            break;
        case 1:
            maxHp = 20;
            dmg = 8;
            maxAttackDelay = 60;
            distance = 6*TILE;
            break;
    }
    
    hp = maxHp;
    attackDelay = 0;
    initialized = true;
    target = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!initialized) exit;

attackDelay = max(attackDelay - 1, 0);
waitTimer = max(waitTimer - 1, 0);

onGround = y + yVel &gt;= GROUND - TILE;

if (hp &gt; 0)
{

    if (!instance_exists(target) || target.state == DEAD)
    if (!attackDelay)
    {    
        target = noone;
        switch(type)
        {
            case 0:
                for(var i = 0; i &lt; instance_number(objEnemy); i++)
                {
                    var t = instance_find(objEnemy, i);        
                    if (place_meeting(x + distance + 2, y, t) &amp;&amp; t.state != DEAD)
                    {
                        target = t;
                        break;
                    }
                }
                break;
            case 1:                
                var maxDist = 0;
                for(var i = 0; i &lt; instance_number(objEnemy); i++)
                {
                    var t = instance_find(objEnemy, i);        
                    if (t.state != DEAD)
                    {
                        if (collision_line(x, y + 8, x + distance + 2, y + 8, t, false, true)
                        &amp;&amp; abs(t.x - x) &gt; maxDist)
                        {
                            maxDist = abs(t.x - x);
                            target = t;
                        }
                    }
                }
                break;
            }
        }

    // ranged warriors must wait for melee to be front
    var wait = false;
    if (state == WALK || state == IDLE)
    {
        if (distance &gt; 0) // ranged:
        {
            for(var i = 0; i &lt; instance_number(objWarrior); i++)
            {
                var t = instance_find(objWarrior, i);
                if (x + distance &gt; t.x &amp;&amp; distance &gt; t.distance &amp;&amp; t.state != DEAD)
                {                    
                    state = IDLE;
                    wait = true;
                    break;
                }
            }
        }
    }
            
    if (!wait)
    {
        if (!instance_exists(target) || target.state == DEAD)
            state = WALK;
        else if(!attackDelay)
            state = ATTACK;
    }
    
    if (instance_exists(target) &amp;&amp; (state == WALK || state == IDLE))
        state = ATTACK;
        
    // pull back
    for(var i = 0; i &lt; instance_number(objEnemy); i++)
    {
        var t = instance_find(objEnemy, i);
        if (t.x &lt; x &amp;&amp; t.state != DEAD)
        {
            x = min(x, t.x - 2);
            break;
        }
    }
    
    if (state == ATTACK)
    {
        if (!attackDelay)
        {
            if (instance_exists(target) &amp;&amp; target.state != DEAD)
            {
                switch(type)
                {
                    case 0:
                        if(place_meeting(x + distance + 2, y, target))
                            dealDamage(target, dmg);
                        else
                        {
                            target = noone;
                        }
                        break;
                    case 1:
                        var proj = instance_create(x + 8, y, objArrow);
                        
                        proj.x0 = proj.x; proj.y0 = proj.y;
                        
                        var v = 0; var g = .12;      
                        var dX = max(target.x - proj.x, 4);
                        var dY = target.y - proj.y;
                        var rad_ang = (arctan2(-dY, dX)+pi/2)/2;
                        if (rad_ang != pi/2)
                        {
                            clc = (cos(rad_ang)*sqrt(2*(dY+tan(rad_ang)*dX)/g));
                            if (clc != 0)
                                v = dX / clc;
                            else
                                v = 0;
                            proj.vx0 = lengthdir_x(v,radtodeg(rad_ang));
                            proj.vy0 = lengthdir_y(v,radtodeg(rad_ang));
                            proj.g = g;
                        }
                        
                        proj.dmg = dmg;
                        break;                    
                }
                attackDelay = maxAttackDelay;
            }
            
            if (frame == 3)
                state = IDLE;
        }        
    }    
}
else // DIE
{
    if (state != DEAD) fCur = 0;
    state = DEAD;
}

switch(state)
{
    case IDLE:
    case ATTACK:
    case DEAD:
        xVel *= .9;
        break;
    case WALK:
        xVel = min(xVel + .01, walkSpeed);
        break;
}

if (!place_meeting(x + xVel, y, objEnemy) || instance_place(x + xVel, y, objEnemy).state == DEAD)
    x += xVel;
else
{
    x -= xVel;
    xVel = 0;
}

yVel += yGrav;
if (!onGround)
    y += yVel;
else
    yVel = 0;
        
if (state != stateprev) fCur = 0;
stateprev = state;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var row;
switch(state)
{
    case IDLE:
        fCur = (fCur + .1) % 4;
        row = 0;
        break;
    case WALK:
        fCur = (fCur + .15) % 4;
        row = 1;
        break;
    case ATTACK:
        fCur = min(fCur + .2, 3.9);
        if (fCur == 3.9)
            state = IDLE;
        row = 2;
        break;
    case DEAD:
        fCur = min(fCur + .1, 3);
        row = 3;
        break;
}
frame = floor(fCur);

draw_sprite_part(sprWarrior, -1, frame*TILE, row*TILE + 4*type*TILE, TILE, TILE, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
