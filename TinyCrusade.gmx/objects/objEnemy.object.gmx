<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>objAny</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>level = 1; // TODO: REPLACE WITH GLOBAL LEVEL

maxHp = 50;
hp = maxHp;
dmg = 3;

type = 0;
state = WALK;
stateprev = state;
xVel = 0;
yVel = 0;
yGrav = .15;
onGround = false;

attackDelay = 0;
maxAttackDelay = 60;

target = noone;

fCur = 0;
frame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
attackDelay = max(attackDelay - 1, 0);
onGround = y + yVel &gt;= GROUND - TILE;

if (hp &gt; 0)
{

    if (!instance_exists(target) || target.state == DEAD)
    if (!attackDelay)
    {
        for(var i = 0; i &lt; instance_number(objWarrior); i++)
        {
            var t = instance_find(objWarrior, i);
            if (place_meeting(x - 2, y, t) &amp;&amp; t.state != DEAD)
            {
                target = t;
                break;
            }
            else
                target = noone;
        }
        if (instance_exists(target) &amp;&amp; (state == WALK || state == IDLE))
            state = ATTACK;
    }
    
    // pull back
    for(var i = 0; i &lt; instance_number(objWarrior); i++)
    {
        var t = instance_find(objWarrior, i);
        if (t.x &gt; x &amp;&amp; t.state != DEAD)
        {
            x = max(x, t.x + 2);
            break;
        }
    }
    
    if (state == IDLE)
    {
        if (!instance_exists(target) || target.state == DEAD)
            state = WALK;
        else if(!attackDelay)
            state = ATTACK;
    }
    if (state == ATTACK)
    {
        if (!attackDelay)
        {
            if (instance_exists(target) &amp;&amp; target.state != DEAD)
            {
                switch(type)
                {
                    case 0:
                        if(place_meeting(x - 2, y, target))
                            dealDamage(target, dmg);
                        else
                        {
                            target = noone;
                        }
                        break;
                    case 1:
                    
                }
                attackDelay = maxAttackDelay;
            }
        }
    }    
}
else // DIE
{
    if (state != DEAD) fCur = 0;
    state = DEAD;
}

switch(state)
{
    case IDLE:
    case ATTACK:
    case DEAD:
        xVel *= .9;
        break;
    case WALK:
        xVel = max(xVel - .1, -1);
        break;
}

if (!place_meeting(x + xVel, y, objWarrior) || instance_place(x + xVel, y, objWarrior).state == DEAD)
    x += xVel;
else
{
    x -= xVel;
    xVel = 0;
}

yVel += yGrav;

if (!onGround)
    y += yVel;
else
    yVel = 0;

if (state != stateprev) fCur = 0;
stateprev = state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var row;
switch(state)
{
    case IDLE:
        fCur = (fCur + .1) % 4;
        row = 0;
        break;
    case WALK:
        fCur = (fCur + .15) % 4;
        row = 1;
        break;
    case ATTACK:
        fCur = min(fCur + .2, 3.9);
        if (fCur == 3.9)
            state = IDLE;
        row = 2;
        break;
    case DEAD:
        fCur = min(fCur + .1, 3);
        row = 3;
        break;
}
frame = floor(fCur);

draw_sprite_part(sprEnemy, -1, frame*TILE, row*TILE + 4*type*TILE, TILE, TILE, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
