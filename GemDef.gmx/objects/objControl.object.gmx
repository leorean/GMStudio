<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskTile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
surf = -1; //drawing surface
global.zoom = 2;

randomize();
device_mouse_dbclick_enable(true);
if (os_type == os_windows)
{
    window_set_size(2*WIDTH, 2*HEIGHT);
}

global.fnt = font_add_sprite(sprFont, ord(' '), true, 1);
global.fntSmall = font_add_sprite(sprFontSmall, ord(' '), true, 0);
global.fntBanner = font_add_sprite(sprFontBanner, ord('0'), true, 0);
global.fntThin = font_add_sprite(sprFontThin, ord(' '), true, 1);
global.fntUpgrade = font_add_sprite(sprFontUpgrade, ord(' '), true, 1);

for(i = 0; i &lt; 256; i++)
global.effectPool[i] = instance_create(-99,-99,objEffect);
global.effectIndex = 0;

global.enemyQueue = ds_queue_create();
maxEnemyTimer = 40;
enemyTimer = maxEnemyTimer;

global.coins = 0;

map[0] = importLevel("MAP0.tmx");

// WAVE DATA

global.waves = importWave("waves.dat");

// TOWER DATA

towerUnlocked[0] = array(1, 1, 1, 1, 1);
towerPrices[0] = array(180, 160, 270, 390, 650);
towerNames[0] = array("Poop.", "Spoop.", "Double Spoop", "Laxativo", "Gold Nugget");
towerDesc[0] = array(
    "Your standard poo.#Cheap but efficient.",
    "Slightly faster#and a wider range.",
    "Shoots 2 parallel#projectiles.",
    "PewPewPew!#(Fire rate++)",
    "Can pierce up to 10#slimes!");

towerUnlocked[1] = array(1, 1, 1, 1, 1);
towerPrices[1] = array(350, 240, 230, 380, 970);
towerNames[1] = array("Toilet", "Clogged T.", "Gridlocked T.", "Rancid T.", "Fiery T.");
towerDesc[1] = array(
    "Does explosive#area damage.",
    "Someone didn't flush..#(Range+/Speed+)",
    "Totally constipaded.#(Range+/Explosion+)",
    "Ew.. (Range++/Speed++)",
    '"Shouldn'+"'" + 't have eaten#at that burrito place.."');

towerUnlocked[2] = array(1, 1, 1, 1, 1);
towerPrices[2] = array(285, 160, 420, 870, 2600);
towerNames[2] = array("Frozen Poo", "Deep Freeze", "Deadly Frost", "Arctic Turd", "Pooman");
towerDesc[2] = array(
    "Freezes slimes for#a short time period.",
    "Frozen slimes will#become slowed.",
    "The frost kills#off the weak.",
    "Stops freezing,#but increases slow effect.",
    "Do you wanna build#a pooman? (slow+++)");

towerUnlocked[3] = array(1, 1, 1, 1, 1);
towerPrices[3] = array(200, 240, 320, 560, 3550);
towerNames[3] = array("The Hive", "Big Hive", "Burning Hive", "Fiery Flies", "Mecha Hive");
towerDesc[3] = array(
    "Spawns orbiting flies#killing multiple slimes.",
    "Bigger and faster flies.#(piercing+)",
    "Shit's on fire, yo.#(double spawn, piercing++)",
    "Scorching many slimes#with a faster spawn rate.",
    "2 infinite slime grinders # that kill everything!");

towerUnlocked[4] = array(0, 0, 0, 0, 0);
towerPrices[4] = array(999, 999, 999, 999, 999);
towerNames[4] = array("-name4-", "-name2-", "-name3-", "-name4-", "-name5-");
towerDesc[4] = array(
    "-desc1-",
    "-desc2-",
    "-desc3-",
    "-desc4-",
    "-desc5-");

towerUnlocked[5] = array(0, 0, 0, 0, 0);
towerPrices[5] = array(999, 999, 999, 999, 999);
towerNames[5] = array("-name5-", "-name2-", "-name3-", "-name4-", "-name5-");
towerDesc[5] = array(
    "-desc1-",
    "-desc2-",
    "-desc3-",
    "-desc4-",
    "-desc5-");

towerUnlocked[6] = array(0, 0, 0, 0, 0);
towerPrices[6] = array(999, 999, 999, 999, 999);
towerNames[6] = array("-name6-", "-name2-", "-name3-", "-name4-", "-name5-");
towerDesc[6] = array(
    "-desc1-",
    "-desc2-",
    "-desc3-",
    "-desc4-",
    "-desc5-");

towerUnlocked[7] = array(0, 0, 0, 0, 0);
towerPrices[7] = array(999, 999, 999, 999, 999);
towerNames[7] = array("-name7-", "-name2-", "-name3-", "-name4-", "-name5-");
towerDesc[7] = array(
    "-desc1-",
    "-desc2-",
    "-desc3-",
    "-desc4-",
    "-desc5-");


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* DEBUG */
if (keyboard_check_pressed(ord('R'))
    || keyboard_check_pressed(vk_backspace)) room_restart();

if (keyboard_check_pressed(ord('Q'))) game_restart();

if (keyboard_check(ord('C')))
    room_speed = 5;
else
    room_speed = 60;
    
if (keyboard_check(vk_space))
    global.coins +=100;
    
/* END DEBUG*/

global.mx = (device_mouse_x(0) / room_width) * view_wview + view_xview;
global.my = (device_mouse_y(0) / room_height) * view_hview + view_yview;

if (!instance_exists(global.tower) &amp;&amp; global.state != G_OVER)
{

    // toggle speed
    if (in(global.mx, WIDTH-4*TILE, WIDTH) &amp;&amp; in(global.my, HEIGHT - 3*TILE, HEIGHT))
    if (mouse_check_button_released(mb_left))
    {
        if (global.state == G_PAUSE) global.state = G_PLAY;
        
        global.spd = (global.spd * 2);
        if (global.spd &gt; 4) global.spd = 1;
    }
}

// toggle pause
if (in(global.mx, room_width-2*TILE, room_width) &amp;&amp; in(global.my, 0, 2*TILE))
{
    if (mouse_check_button_released(mb_left))
    {
        if (global.state == G_PLAY) global.state = G_PAUSE;
        else if (global.state == G_PAUSE) global.state = G_PLAY;
    }
}
else
{
    if (mouse_check_button_pressed(mb_left) &amp;&amp; (!instance_exists(global.tower) || global.tower.placed = true)
        // above menu:
        &amp;&amp; global.my &lt; HEIGHT - 3*TILE
        // not in trash icon:
        &amp;&amp; !(in(global.mx,0,2*TILE) &amp;&amp; in(global.my,HEIGHT-5*TILE,HEIGHT-3*TILE) &amp;&amp; instance_exists(global.tower))
        &amp;&amp; global.state == G_PLAY)
    {
        global.tower = collision_circle(global.mx, global.my, 8, objTower, false, true);
    }
    
    if (global.state == G_OVER) global.tower = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.hp == 0)
{

    // TODO
    global.spd = 1;
    global.state = G_OVER;
}

if (global.state == G_START)
{
    if (global.hp &gt; 0)
    {
        // reset everything here
        
        global.timer = 0;
        
        if (mouse_check_button_released(mb_left))
        {
            global.state = G_PLAY;
        }
    }
}
if (global.state == G_PLAY)
{

    //++++SHAKE SCREEN++++
    if (global.shake)
    {
        shakeTimer = 5;
        global.shake = false;
    }
    if (shakeTimer)
    {
        shakeTimer = max(shakeTimer-global.spd,0);
        //view_angle = -1+random(2);
        view_xview = -1+random(2);
        view_yview = -1+random(2);
    } else
    {
        view_xview = 0;
        view_yview = 0;
        //view_angle = 0;
    }

    global.timer = (global.timer + 1 * global.spd) % INFINITE;
    
    //waveTimer = max(waveTimer - global.spd, 0);
    
    noMoreSlimes = true;
    waveTimer = 0;
    for(i = 0; i &lt; instance_number(objSlime); i++)
    {
        var _s = instance_find(objSlime, i);
        if (instance_exists(_s) &amp;&amp; _s.wave == wave)
        {
            noMoreSlimes = false;
        }
    }

    waveTimer = min(maxWaveTimer, instance_number(objSlime));
    
    if (noMoreSlimes)// &amp;&amp; ds_queue_size(global.enemyQueue) &lt; 100)
    {
    
        // text at hud for adding money
        var t = instance_create(5*TILE,2*TILE,objText);
        v = 100; // TODO: make tower/upgrade for that money
        t.text = "+"+string(v)+'"';
        t.yVel = 0;
        t.size = 3;
        t.depth = depth-1;
        global.coins += v;
        
        spawnWave(wave);
        wave++;
        maxWaveTimer = ds_queue_size(global.enemyQueue);
        waveTimer = maxWaveTimer;
    }
        
    var _delay = 0;
    repeat(ds_queue_size(global.enemyQueue))
    {
        var s = instance_create(-999, -999, objSlime);
        
        var q = ds_queue_dequeue(global.enemyQueue);
        s.type = q[0];
        s.banner = q[1];
        s.delay = _delay;
        _delay += 32;
    }
    
    /*
    enemyTimer = max(enemyTimer - global.spd, 0);
    if (!enemyTimer)
    {
        var _delay = 0;
        repeat((ds_queue_size(global.enemyQueue) div 50) + 1)
        {
            if (ds_queue_size(global.enemyQueue) &gt; 0)
            { 
                var s = instance_create(-999, -999, objSlime);
                
                var q = ds_queue_dequeue(global.enemyQueue);
                s.type = q[0];
                s.banner = q[1];
                s.delay = _delay;
                _delay += 10;
            }
        }
        enemyTimer = maxEnemyTimer;
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Free Surface
if (surface_exists(surf))
    surface_free(surf);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.timer = 0;
global.state = G_START;

global.mx = WIDTH/2;
global.my = HEIGHT/2;

global.hp = 250;

//loading level
createRoom(map[0]);
global.path = path_map0;

wave = 0;
maxWaveTimer = 30 * SEC;
waveTimer = 0;

ds_queue_clear(global.enemyQueue);

global.spd = 1;
global.coins = 200;

global.shake = false;
shakeTimer = 0;

// UPGRADE/ETC 

selected = -1;
global.tower = noone;
preText = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HUD</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ++++ DRAW GUI HERE ++++

var w = display_get_gui_width();
var h = display_get_gui_height();

// tower range display
if (instance_exists(global.tower) &amp;&amp; !global.tower.spawnDelay)
{
    
    draw_set_blend_mode(bm_add);
    var col = c_white;
    if (!global.tower.free)
    {
        draw_set_blend_mode(bm_normal);    
        col = c_red;
    }
    draw_set_color(col);
    draw_set_alpha(.3);
    draw_circle(global.tower.x + 8, global.tower.y + 8, global.tower.range, 0);
    draw_set_blend_mode(bm_normal);
}

draw_set_alpha(1);
draw_set_font(global.fnt);
draw_set_color(c_white);
draw_set_valign(fa_top);

// hp
draw_set_halign(fa_center);
draw_sprite_part(sprHud, -1, 8*TILE, 3*TILE, 2*TILE, 2*TILE, 0, 0);
draw_text(1*TILE, .5*TILE, "" + string(global.hp));

// money
draw_set_halign(fa_left);
draw_sprite_part(sprHud, -1, 6*TILE, 3*TILE, 2*TILE, 2*TILE, 2*TILE, 0);
draw_text(4*TILE, .5*TILE, "" + string(global.coins));

// wave
draw_sprite_part(sprHud, -1, 10*TILE, 3*TILE, 4*TILE, TILE,.5*TILE, 2*TILE);
draw_sprite_part(sprHud, -1, 10*TILE, 4*TILE, (waveTimer/maxWaveTimer)*4*TILE, TILE,.5*TILE, 2*TILE);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_text(2.5*TILE, 2.5*TILE, wave);

// draw start
if (global.state == G_START)
{
    preText = '$ Tap to play $';
    //draw_text(w/2, h/2, '"Tap to play"');
}

// draw pause
draw_sprite_part(sprHud, -1, (global.state == G_PAUSE)*2*TILE, 0, 2*TILE, 2*TILE, w - 2*TILE, 0);

if (!instance_exists(global.tower) &amp;&amp; global.state != G_OVER)
{
    // draw speedfactor
    if (global.spd == 1) _spf = 0;
    if (global.spd == 2) _spf = 1;
    if (global.spd &gt; 2) _spf = 2;
    
    var inSpdBtn = in(global.mx,w-4*TILE,w)&amp;&amp;in(global.my,h-3*TILE,h) &amp;&amp; mouse_check_button(mb_left);
    draw_sprite_part(sprHud, -1, 4*TILE+4*TILE*inSpdBtn,0 , 4*TILE, 3*TILE, w-4*TILE, h-3*TILE);
    draw_sprite_part(sprHud, -1, 12*TILE + _spf * 2*TILE, 0, 2*TILE, 2*TILE, w - 3*TILE, h - 2.5*TILE + inSpdBtn*2);
}

// ++++++++++++++ draw tower shop buttons +++++++++++++++++
if (global.state != G_OVER)
{

    if (mouse_check_button(mb_left) &amp;&amp; global.my &lt; h-3*TILE)
        preText = "";

    // info text
    if (!instance_exists(global.tower) || !global.tower.placed)
    {
        if (preText != "")
            draw_sprite_part_ext(sprHud, -1, 4*TILE, 9*TILE, 13*TILE, 3*TILE, w/2 - 6.5*TILE, h/4 - 1.5*TILE, 1, 1, c_white, 1);
            
        draw_set_font(global.fntUpgrade);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        var _c = c_white;//make_color_rgb(100,100,100);
        draw_text_color(w/2, h/4, preText, _c, _c, _c ,_c, 1);
        draw_set_font(global.fnt);
        
        if (mouse_check_button_released(mb_left))
            preText = "";
    }
        
    if (!instance_exists(global.tower))
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_top);
                
        var indexOffset = 0;
        for (i = 0; i &lt; array_length_1d(towerUnlocked); i++)
        {
            var _x = (i-indexOffset)*3*TILE;
            
            isLocked = get(towerUnlocked[i], 0) == 0;
            
            if (isLocked) { indexOffset++; continue; }
            
            if (!isLocked &amp;&amp; global.coins &gt;= get(towerPrices[i], 0))
            {
                draw_set_font(global.fntSmall);
                _c = make_color_rgb(99, 255, 64);
    
                //bg
                draw_sprite_part(sprHud, -1, 0, 3*TILE, 3*TILE, 3*TILE, _x, h - 3*TILE);
    
                // tower
                draw_sprite_part(sprTower, -1, i*8*TILE, 0, 2*TILE, 2*TILE, _x + .5 * TILE, h - 3*TILE);
                
            } else
            {
                draw_set_font(global.fntThin);
                _c = make_color_rgb(255, 0, 0);
    
                // bg
                draw_sprite_part_ext(sprHud, -1, 3*TILE, 3*TILE, 3*TILE, 3*TILE, _x, h - 3*TILE, 1, 1, c_white, 1);
    
                // tower
                if (!isLocked)
                    draw_sprite_part_ext(sprTower, -1, i*8*TILE, 0, 2*TILE, 2*TILE, _x + .5 * TILE, h - 3*TILE, 1, 1, c_black,.5);
                else
                    draw_sprite_part(sprTower, -1, 16*TILE, 3*TILE, 2*TILE, 2*TILE, _x + .5 * TILE, h - 3*TILE);
            
            }
            
            // tag
            draw_sprite_part(sprHud, -1, 6*TILE, 5*TILE, 3*TILE, TILE, _x, h - TILE - 2);
                    
            // price
            if (!isLocked) _text = string(get(towerPrices[i], 0)) else _text = "locked";
            draw_text_color(_x + 1.5*TILE, h - 1*TILE, "" + _text, _c, _c, _c, _c, 1);
            
            if (global.state == G_PLAY)
            {
                if (in(global.mx, _x, _x + 3*TILE) &amp;&amp; in(global.my, h - 3*TILE, h))
                {
                    // update info text
                    if (mouse_check_button(mb_left))
                        preText =  get(towerDesc[i], 0);
                 
                    // pre-purchase action
                    if (mouse_check_button_pressed(mb_left))
                    {
                        if (!(get(towerPrices[i], 0) &gt; global.coins 
                        || isLocked))
                        {
                            global.tower = instance_create(global.mx, global.my, objTower);
                            global.tower.price = get(towerPrices[i], 0);
                            global.tower.type = i;
                        }                        
                    }
                }
            }
        }
    }
    // +++++ TOWER UPGRADE MENU +++++
    else
    {
        if (!global.tower.placed)
            draw_sprite_ext(sprStopBar, -1, 0, h-3*TILE, 1, 1, 0, c_black, .5);
            
        if (global.tower.placed)
        {
            // sell again
            var sale = floor(.5 * get(towerPrices[global.tower.type], global.tower.upgrade));
            var inBtnSell = in(global.mx,0,2*TILE) &amp;&amp; in(global.my,h-5*TILE,h-3*TILE)
             &amp;&amp; global.state == G_PLAY;
            
            draw_sprite_part(sprHud, -1, 2*TILE*(inBtnSell &amp;&amp;  mouse_check_button(mb_left)), 9*TILE, 2*TILE, 2*TILE, 0, h-5*TILE);
            draw_set_font(global.fntThin);
            draw_set_halign(fa_left);
            _c = make_color_rgb(255, 0, 0);
            draw_text_color(2*TILE + 2, h - 4*TILE + 6, 'Sell: '+string(sale)+"$",
                _c,_c,_c,_c,1);
                
            if (inBtnSell &amp;&amp; mouse_check_button_pressed(mb_left))
            {
                createEffect(global.tower.x + 8, global.tower.y + 8, 2);
                var t = instance_create(global.tower.x + 8, global.tower.y, objText);
                t.text = '+'+string(sale)+'"';
            
                global.coins += sale;
                
                with(global.tower) instance_destroy();
                global.tower = noone;
                exit;
            }
            
            // draw bottom background
            draw_sprite_part(sprHud, -1, 0, 6*TILE, 32*TILE, 3*TILE, 0, h-3*TILE);
        
            draw_set_valign(fa_top);
            draw_set_font(global.fntUpgrade);
                
            // left info:
            draw_set_halign(fa_left);
            _c = make_color_rgb(177, 230, 27);
            draw_text_color(.5*TILE,h-3*TILE + 6, get(towerNames[global.tower.type], global.tower.upgrade)
                ,_c,_c,_c,_c,1);
        
            draw_set_font(global.fntThin);
            draw_set_halign(fa_left);
            _c = make_color_rgb(177, 130, 27);
            draw_text_color(.5*TILE,h-2*TILE + 6, get(towerDesc[global.tower.type], global.tower.upgrade)
                ,_c,_c,_c,_c,1);
            
            draw_set_font(global.fntUpgrade);
            draw_set_halign(fa_right);
            _c = make_color_rgb(128,128,128);
            draw_text_color(10.5*TILE,h-3*TILE + 6, "owned",_c,_c,_c,_c,1);
            
            draw_sprite_part(sprTower, -1, global.tower.type*8*TILE, 
                global.tower.upgrade*2*TILE,2*TILE,2*TILE, 12*TILE, 15*TILE - 6);
            
            // right info:
            if (global.tower.upgrade &lt; array_length_1d(towerPrices[global.tower.type]) - 1)
            {
            
                if (get(towerUnlocked[global.tower.type], global.tower.upgrade + 1) == 1)
                {
                    var price = get(towerPrices[global.tower.type], global.tower.upgrade+1);
                    var canBuy = (price &lt;= global.coins);
                    
                    draw_set_halign(fa_left);
                    _c = make_color_rgb(177, 230, 27);    
                    draw_text_color(21.5*TILE,h-3*TILE + 6, get(towerNames[global.tower.type], global.tower.upgrade+1)
                        ,_c,_c,_c,_c,1);
                    
                    draw_set_font(global.fntThin);
                    draw_set_halign(fa_left);
                    _c = make_color_rgb(177, 130, 27);
                    draw_text_color(21.5*TILE,h-2*TILE + 6, get(towerDesc[global.tower.type], global.tower.upgrade+1)
                        ,_c,_c,_c,_c,1);
                
                    draw_set_font(global.fntUpgrade);
                    draw_set_halign(fa_right);
                    if (canBuy)
                    {
                        _c = make_color_rgb(99, 255, 64);
                        draw_text_color(31.5*TILE,h-3*TILE + 6, '$' + string(price),_c,_c,_c,_c,1);        
                    }
                    else
                    {
                        _c = make_color_rgb(255, 0, 0);
                        draw_text_color(31.5*TILE,h-3*TILE + 6, '$' + string(price),_c,_c,_c,_c,1);
                    }
                
                    draw_sprite_part(sprTower, -1, global.tower.type*8*TILE, 0
                        + (global.tower.upgrade + 1)*2*TILE,2*TILE,2*TILE, 18*TILE, 15*TILE - 6);
                    
                    var inBtnBuy = in(global.mx, 14*TILE, 18*TILE) &amp;&amp; in(global.my, h-3*TILE, h)
                     &amp;&amp; global.state == G_PLAY;
                    draw_sprite_part(sprHud, -1, 18*TILE + 4*TILE*(inBtnBuy &amp;&amp; mouse_check_button(mb_left)), 3*TILE*(canBuy), 4*TILE, 3*TILE, 14*TILE, h-3*TILE);
                    
                    if (mouse_check_button_released(mb_left) &amp;&amp; canBuy &amp;&amp; inBtnBuy)
                    {
                        createEffect(global.tower.x + 8, global.tower.y + 8, 2);
                        global.tower.upgrade++;
                        global.coins -= price;
                        var t = instance_create(global.tower.x + 8, global.tower.y, objText);
                        t.text = "-"+string(price)+'"';
                    }
                }
                else // LOCKED
                {
                    draw_sprite_part(sprHud, -1, 26*TILE, 3*TILE, 6*TILE, 3*TILE, 23.5*TILE, h-3*TILE);
                    draw_sprite_part_ext(sprTower, -1, global.tower.type*8*TILE,
                        (global.tower.upgrade + 1)*2*TILE,2*TILE,2*TILE, 18*TILE, 15*TILE - 6, 1, 1, c_black,.5);
                    
                }
            }
            else
            {
                draw_sprite_part(sprHud, -1, 26*TILE, 0, 6*TILE, 3*TILE, 23.5*TILE, h-3*TILE);
            }
        }
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SHADER STUFF</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++SHADER++++
shader_set(shader0);
draw_clear(c_black);

//--------------------------------------------------

//++++SURFACE++++
if (!surface_exists(surf))
{
    view_hview = HEIGHT;
    view_wview = WIDTH;
    
    var _w = view_wport;
    var _h = view_hport;

    surf = surface_create(_w, _h);
    surface_set_target(surf);
    
    draw_clear(c_black);
    surface_reset_target();
    
    //Set the view that you want to draw to the surface
    view_surface_id[0] = surf;
        
}
else
{

    //Disable alpha blending (not needed since we are drawing the whole view)
    draw_enable_alphablend(false);
    //Draw the surface stretched to the GUI layer
    
    var aspect_x = display_get_gui_width() / surface_get_width(surf);
    var aspect_y = display_get_gui_height() / surface_get_height(surf);
    
    display_set_gui_size(surface_get_width(surf) / global.zoom, surface_get_height(surf) / global.zoom);
    
    var xoffset = (surface_get_width(surf)*aspect_x) / 2;
    var yoffset = (surface_get_height(surf)*aspect_y) / 2;
    draw_surface_ext(surf,
        display_get_gui_width() / 2 - xoffset,
        display_get_gui_height() / 2 - yoffset, aspect_x, aspect_y, 0, c_white, 1);
    
    //Switch on alpha blending again for the next normal draw pass
    draw_enable_alphablend(true);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DISABLE MASK VISIBILITY</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_path(global.path, 0, 0, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
