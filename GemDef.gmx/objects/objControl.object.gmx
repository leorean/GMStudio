<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskTile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
surf = -1; //drawing surface
global.zoom = 2;

randomize();
device_mouse_dbclick_enable(true);
if (os_type == os_windows)
{
    window_set_size(2*WIDTH, 2*HEIGHT);
}

global.fnt = font_add_sprite(sprFont, ord(' '), true, 1);
global.fntSmall = font_add_sprite(sprFontSmall, ord(' '), true, 0);
global.fntBanner = font_add_sprite(sprFontBanner, ord('0'), true, 0);
global.fntThin = font_add_sprite(sprFontThin, ord(' '), true, 1);
global.fntUpgrade = font_add_sprite(sprFontUpgrade, ord(' '), true, 1);

for(i = 0; i &lt; 256; i++)
global.effectPool[i] = instance_create(-99,-99,objEffect);
global.effectIndex = 0;

global.enemyQueue = ds_queue_create();
maxEnemyTimer = 40;
enemyTimer = maxEnemyTimer;

global.coins = 0;

map[0] = importLevel("MAP0.tmx");

// TOWER DATA

towerUnlocked[0] = array(1, 1, 1, 1, 1);
towerPrices[0] = array(50, 100, 160, 240, 320);
towerNames[0] = array("Poop.", "Fast poop.", "Double shot", "Ultra fast.", "MEGA POOP");
towerDesc[0] = array(
    "Your standard poo.#Cheap but efficient.",
    "Faster attacks.",
    "Shoots 2 parallel#projectiles.",
    "Incredibly fast#stream of projectiles!",
    "Where does all that#poo come from?");

towerUnlocked[1] = array(1, 1, 1, 1, 1);
towerPrices[1] = array(999, 999, 999, 999, 999);
towerNames[1] = array("-name1-", "-name2-", "-name3-", "-name4-", "-name5-");
towerDesc[1] = array(
    "-desc1-",
    "-desc2-",
    "-desc3-",
    "-desc4-",
    "-desc5-");

towerUnlocked[2] = array(1, 1, 1, 1, 1);
towerPrices[2] = array(999, 999, 999, 999, 999);
towerNames[2] = array("-name1-", "-name2-", "-name3-", "-name4-", "-name5-");
towerDesc[2] = array(
    "-desc1-",
    "-desc2-",
    "-desc3-",
    "-desc4-",
    "-desc5-");

towerUnlocked[3] = array(1, 1, 1, 1, 1);
towerPrices[3] = array(999, 999, 999, 999, 999);
towerNames[3] = array("-name1-", "-name2-", "-name3-", "-name4-", "-name5-");
towerDesc[3] = array(
    "-desc1-",
    "-desc2-",
    "-desc3-",
    "-desc4-",
    "-desc5-");

towerUnlocked[4] = array(1, 1, 1, 1, 1);
towerPrices[4] = array(999, 999, 999, 999, 999);
towerNames[4] = array("-name1-", "-name2-", "-name3-", "-name4-", "-name5-");
towerDesc[4] = array(
    "-desc1-",
    "-desc2-",
    "-desc3-",
    "-desc4-",
    "-desc5-");

towerUnlocked[5] = array(1, 1, 1, 1, 1);
towerPrices[5] = array(999, 999, 999, 999, 999);
towerNames[5] = array("-name1-", "-name2-", "-name3-", "-name4-", "-name5-");
towerDesc[5] = array(
    "-desc1-",
    "-desc2-",
    "-desc3-",
    "-desc4-",
    "-desc5-");

towerUnlocked[6] = array(1, 1, 1, 1, 1);
towerPrices[6] = array(999, 999, 999, 999, 999);
towerNames[6] = array("-name1-", "-name2-", "-name3-", "-name4-", "-name5-");
towerDesc[6] = array(
    "-desc1-",
    "-desc2-",
    "-desc3-",
    "-desc4-",
    "-desc5-");

towerUnlocked[7] = array(1, 1, 1, 1, 1);
towerPrices[7] = array(999, 999, 999, 999, 999);
towerNames[7] = array("-name1-", "-name2-", "-name3-", "-name4-", "-name5-");
towerDesc[7] = array(
    "-desc1-",
    "-desc2-",
    "-desc3-",
    "-desc4-",
    "-desc5-");


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord('R'))
    || keyboard_check_pressed(vk_backspace)) room_restart();

if (keyboard_check_pressed(ord('Q'))) game_restart();

if (keyboard_check(ord('C')))
    room_speed = 5;
else
    room_speed = 60;

global.mx = (device_mouse_x(0) / room_width) * view_wview + view_xview;
global.my = (device_mouse_y(0) / room_height) * view_hview + view_yview;

if (!instance_exists(global.tower))
{

    // toggle speed
    if (in(global.mx, WIDTH-4*TILE, WIDTH) &amp;&amp; in(global.my, HEIGHT - 3*TILE, HEIGHT))
    if (mouse_check_button_released(mb_left))
    {
        if (global.state == G_PAUSE) global.state = G_PLAY;
        
        global.spd = (global.spd * 2);
        if (global.spd &gt; 4) global.spd = 1;
    }
}

// toggle pause
if (in(global.mx, room_width-2*TILE, room_width) &amp;&amp; in(global.my, 0, 2*TILE))
{
    if (mouse_check_button_released(mb_left))
    {
        if (global.state == G_PLAY) global.state = G_PAUSE;
        else if (global.state == G_PAUSE) global.state = G_PLAY;
    }
}
else
    if (mouse_check_button_pressed(mb_left) &amp;&amp; (!instance_exists(global.tower) || global.tower.placed = true)
        &amp;&amp; global.my &lt; HEIGHT - 3*TILE)
        global.tower = collision_circle(global.mx, global.my, 8, objTower, false, true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.hp == 0)
{

    // TODO
        
    global.state = G_OVER;
}

if (global.state == G_START)
{
    if (global.hp &gt; 0)
    {
        // reset everything here
        
        global.timer = 0;
        
        if (mouse_check_button_released(mb_left))
        {
            global.state = G_PLAY;
        }
    }
}
if (global.state == G_PLAY)
{

    //++++SHAKE SCREEN++++
    if (global.shake)
    {
        shakeTimer = 5;
        global.shake = false;
    }
    if (shakeTimer)
    {
        shakeTimer = max(shakeTimer-global.spd,0);
        //view_angle = -1+random(2);
        view_xview = -1+random(2);
        view_yview = -1+random(2);
    } else
    {
        view_xview = 0;
        view_yview = 0;
        //view_angle = 0;
    }

    global.timer = (global.timer + 1 * global.spd) % INFINITE;
    
    waveTimer = max(waveTimer - global.spd, 0);
    
    if (!waveTimer &amp;&amp; ds_queue_size(global.enemyQueue) &lt; 100)
    {
        spawnWave(wave);
        wave++;
        waveTimer = maxWaveTimer;
    }
    
    enemyTimer = max(enemyTimer - global.spd, 0);
    if (!enemyTimer)
    {
        var _delay = 0;
        repeat((ds_queue_size(global.enemyQueue) div 50) + 1)
        {
            if (ds_queue_size(global.enemyQueue) &gt; 0)
            { 
                var s = instance_create(-999, -999, objSlime);
                
                var q = ds_queue_dequeue(global.enemyQueue);
                s.type = q[0];
                s.banner = q[1];
                s.delay = _delay;
                _delay += 10;
            }
        }
        enemyTimer = maxEnemyTimer;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Free Surface
if (surface_exists(surf))
    surface_free(surf);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.timer = 0;
global.state = G_START;

global.mx = WIDTH/2;
global.my = HEIGHT/2;

global.hp = 250;

//loading level
createRoom(map[0]);
global.path = path_map0;

wave = 0;
maxWaveTimer = 30 * SEC;
waveTimer = 0;

ds_queue_clear(global.enemyQueue);

global.spd = 1;
global.coins = 80;

global.shake = false;
shakeTimer = 0;

// UPGRADE/ETC 

selected = -1;
global.tower = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HUD</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ++++ DRAW GUI HERE ++++

var w = display_get_gui_width();
var h = display_get_gui_height();

draw_set_alpha(1);
draw_set_font(global.fnt);
draw_set_color(c_white);
draw_set_valign(fa_top);

// hp
draw_set_halign(fa_center);
draw_sprite_part(sprHud, -1, 8*TILE, 3*TILE, 2*TILE, 2*TILE, 0, 0);
draw_text(1*TILE, .5*TILE, "" + string(global.hp));

// money
draw_set_halign(fa_left);
draw_sprite_part(sprHud, -1, 6*TILE, 3*TILE, 2*TILE, 2*TILE, 2*TILE, 0);
draw_text(4*TILE, .5*TILE, "" + string(global.coins));

// wave
draw_sprite_part(sprHud, -1, 10*TILE, 3*TILE, 4*TILE, TILE,.5*TILE, 2*TILE);
draw_sprite_part(sprHud, -1, 10*TILE, 4*TILE, (waveTimer/maxWaveTimer)*4*TILE, TILE,.5*TILE, 2*TILE);

// draw start
if (global.state == G_START)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(w/2, h/2, '"Tap to play"');
}

// draw pause
draw_sprite_part(sprHud, -1, (global.state == G_PAUSE)*2*TILE, 0, 2*TILE, 2*TILE, w - 2*TILE, 0);

if (!instance_exists(global.tower))
{
    // draw speedfactor
    if (global.spd == 1) _spf = 0;
    if (global.spd == 2) _spf = 1;
    if (global.spd &gt; 2) _spf = 2;
    
    var inSpdBtn = in(global.mx,w-4*TILE,w)&amp;&amp;in(global.my,h-3*TILE,h) &amp;&amp; mouse_check_button(mb_left);
    draw_sprite_part(sprHud, -1, 4*TILE+4*TILE*inSpdBtn,0 , 4*TILE, 3*TILE, w-4*TILE, h-3*TILE);
    draw_sprite_part(sprHud, -1, 12*TILE + _spf * 2*TILE, 0, 2*TILE, 2*TILE, w - 3*TILE, h - 2.5*TILE + inSpdBtn*2);
}

// ++++++++++++++ draw tower shop buttons +++++++++++++++++
if (!instance_exists(global.tower))
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    
    var maxTower = 0;
    for (i = 0; i &lt; array_length_1d(towerUnlocked); i++)
    {
        if (get(towerUnlocked[i], 0)) maxTower++;
    }
    
    for (i = 0; i &lt; maxTower; i++)
    {
        var _x = i*3*TILE;
        
        if (global.coins &gt;= get(towerPrices[i], 0))
        {
            draw_set_font(global.fntSmall);
            _c = make_color_rgb(99, 255, 64);

            //bg
            draw_sprite_part(sprHud, -1, 0, 3*TILE, 3*TILE, 3*TILE, _x, h - 3*TILE);

            // tower
            draw_sprite_part(sprHud, -1, i*2*TILE, 6*TILE, 2*TILE, 2*TILE, _x + .5 * TILE, h - 2.5*TILE);
            
        } else
        {
            draw_set_font(global.fntThin);
            _c = make_color_rgb(255, 0, 0);

            // bg
            draw_sprite_part_ext(sprHud, -1, 3*TILE, 3*TILE, 3*TILE, 3*TILE, _x, h - 3*TILE, 1, 1, c_white, 1);

            // tower
            draw_sprite_part_ext(sprHud, -1, i*2*TILE, 6*TILE, 2*TILE, 2*TILE, _x + .5 * TILE, h - 2.5*TILE, 1,1,c_black,.5);
        }
        
        // tag
        draw_sprite_part(sprHud, -1, 6*TILE, 5*TILE, 3*TILE, TILE, _x, h - TILE - 2);
                
        // price
        draw_text_color(_x + 1.5*TILE, h - 1*TILE, "" + string(get(towerPrices[i], 0)), _c, _c, _c, _c, 1);
        
        if (get(towerPrices[i], 0) &gt; global.coins || global.state != G_PLAY) continue;
        
        if (in(global.mx, _x, _x + 3*TILE) &amp;&amp; in(global.my, h - 3*TILE, h))
        {
            //if (global.coins &gt;= towerPrice[i])
            {
                if (mouse_check_button_pressed(mb_left))
                {
                    global.tower = instance_create(global.mx, global.my, objTower);
                    global.tower.price = get(towerPrices[i], 0);
                }
            }
        }
    }
    
}
// +++++ TOWER UPGRADE MENU +++++
else
{
    if (!global.tower.placed)
    {
        draw_set_font(global.fnt);
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_text(w/2, h - 1.5*TILE, '"Drag and Drop"');
    }
    if (global.tower.placed)
    {
        if (keyboard_check_pressed(vk_space))
            global.coins +=50;
    
        var sale = .5 * get(towerPrices[global.tower.type], global.tower.upgrade);
    
        // draw bottom background
        draw_sprite_part(sprHud, -1, 0, 16*TILE, 32*TILE, 3*TILE, 0, h-3*TILE);
    
        draw_set_valign(fa_top);
        draw_set_font(global.fntUpgrade);
            
        // left info:
        draw_set_halign(fa_left);
        _c = make_color_rgb(177, 230, 27);    
        draw_text_color(.5*TILE,h-3*TILE + 6, get(towerNames[global.tower.type], global.tower.upgrade)
            ,_c,_c,_c,_c,1);
    
        draw_set_font(global.fntThin);
        draw_set_halign(fa_left);
        _c = make_color_rgb(177, 130, 27);
        draw_text_color(.5*TILE,h-2*TILE + 6, get(towerDesc[global.tower.type], global.tower.upgrade)
            ,_c,_c,_c,_c,1);
        
        draw_set_font(global.fntUpgrade);
        draw_set_halign(fa_right);
        _c = make_color_rgb(128,128,128);
        draw_text_color(10.5*TILE,h-3*TILE + 6, "owned",_c,_c,_c,_c,1);
        
        draw_sprite_part(sprHud, -1, global.tower.type*2*TILE, 6*TILE
            + global.tower.upgrade*2*TILE,2*TILE,2*TILE, 12*TILE, 15*TILE);
        
        // right info:
        if (global.tower.upgrade &lt; array_length_1d(towerPrices[global.tower.type]) - 1)
        {
            var price = get(towerPrices[global.tower.type], global.tower.upgrade+1);
            var canBuy = (price &lt;= global.coins);
            
            draw_set_halign(fa_left);
            _c = make_color_rgb(177, 230, 27);    
            draw_text_color(21.5*TILE,h-3*TILE + 6, get(towerNames[global.tower.type], global.tower.upgrade+1)
                ,_c,_c,_c,_c,1);
            
            draw_set_font(global.fntThin);
            draw_set_halign(fa_left);
            _c = make_color_rgb(177, 130, 27);
            draw_text_color(21.5*TILE,h-2*TILE + 6, get(towerDesc[global.tower.type], global.tower.upgrade+1)
                ,_c,_c,_c,_c,1);
        
            draw_set_font(global.fntUpgrade);
            draw_set_halign(fa_right);
            if (canBuy)
            {
                _c = make_color_rgb(99, 255, 64);
                draw_text_color(31.5*TILE,h-3*TILE + 6, '$' + string(price),_c,_c,_c,_c,1);        
            }
            else
            {
                _c = make_color_rgb(255, 0, 0);
                draw_text_color(31.5*TILE,h-3*TILE + 6, '$' + string(price),_c,_c,_c,_c,1);
            }
        
            draw_sprite_part(sprHud, -1, global.tower.type*2*TILE, 6*TILE
                + (global.tower.upgrade + 1)*2*TILE,2*TILE,2*TILE, 18*TILE, 15*TILE);
            
            var inBtnBuy = in(global.mx, 14*TILE, 18*TILE) &amp;&amp; in(global.my, h-3*TILE, h);
            draw_sprite_part(sprHud, -1, 18*TILE + 4*TILE*(inBtnBuy &amp;&amp; mouse_check_button(mb_left)), 3*TILE*(canBuy), 4*TILE, 3*TILE, 14*TILE, h-3*TILE);
            
            if (mouse_check_button_released(mb_left) &amp;&amp; canBuy &amp;&amp; inBtnBuy)
            {
                global.tower.upgrade++;
            }
        }
        else
        {
            draw_sprite_part(sprHud, -1, 26*TILE, 0, 5*TILE, 3*TILE, 24*TILE, h-3*TILE);
        }
    }
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SHADER STUFF</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++SHADER++++
shader_set(shader0);
draw_clear(c_black);

//--------------------------------------------------

//++++SURFACE++++
if (!surface_exists(surf))
{
    view_hview = HEIGHT;
    view_wview = WIDTH;
    
    var _w = view_wport;
    var _h = view_hport;

    surf = surface_create(_w, _h);
    surface_set_target(surf);
    
    draw_clear(c_black);
    surface_reset_target();
    
    //Set the view that you want to draw to the surface
    view_surface_id[0] = surf;
        
}
else
{

    //Disable alpha blending (not needed since we are drawing the whole view)
    draw_enable_alphablend(false);
    //Draw the surface stretched to the GUI layer
    
    var aspect_x = display_get_gui_width() / surface_get_width(surf);
    var aspect_y = display_get_gui_height() / surface_get_height(surf);
    
    display_set_gui_size(surface_get_width(surf) / global.zoom, surface_get_height(surf) / global.zoom);
    
    var xoffset = (surface_get_width(surf)*aspect_x) / 2;
    var yoffset = (surface_get_height(surf)*aspect_y) / 2;
    draw_surface_ext(surf,
        display_get_gui_width() / 2 - xoffset,
        display_get_gui_height() / 2 - yoffset, aspect_x, aspect_y, 0, c_white, 1);
    
    //Switch on alpha blending again for the next normal draw pass
    draw_enable_alphablend(true);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DISABLE MASK VISIBILITY</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_path(global.path, 0, 0, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
