<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskTile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
surf = -1; //drawing surface
global.zoom = 2;

randomize();
device_mouse_dbclick_enable(true);
if (os_type == os_windows)
{
    window_set_size(2*WIDTH, 2*HEIGHT);
}

global.fnt = font_add_sprite(sprFont, ord(' '), true, 1);
global.fntSmall = font_add_sprite(sprFontSmall, ord(' '), true, 0);
global.fntBanner = font_add_sprite(sprFontBanner, ord('0'), true, 0);

global.enemyQueue = ds_queue_create();
maxEnemyTimer = 40;
enemyTimer = maxEnemyTimer;

global.coins = 0;

map[0] = importLevel("MAP0.tmx");

// basic tower unlocks
tower[0] = 1; towerPrice[0] = 50; 
tower[1] = 1; towerPrice[1] = 300;
tower[2] = 0; towerPrice[2] = 550;
tower[3] = 0; towerPrice[3] = 800;
tower[4] = 0; towerPrice[4] = 2400;
tower[5] = 0; towerPrice[5] = 3200;
tower[6] = 0; towerPrice[6] = 9999;
tower[7] = 0; towerPrice[7] = 14000;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord('R'))
    || keyboard_check_pressed(vk_backspace)) room_restart();

if (keyboard_check_pressed(ord('Q'))) game_restart();

if (keyboard_check(ord('C')))
    room_speed = 5;
else
    room_speed = 60;

global.mx = (device_mouse_x(0) / room_width) * view_wview + view_xview;
global.my = (device_mouse_y(0) / room_height) * view_hview + view_yview;

// toggle speed
if (in(global.mx, room_width-5*TILE, room_width-3*TILE) &amp;&amp; in(global.my, HEIGHT - 3*TILE, HEIGHT))
if (mouse_check_button_released(mb_left))
{
    if (global.state == G_PAUSE) global.state = G_PLAY;
    
    global.spd = (global.spd * 2);
    if (global.spd &gt; 4) global.spd = 1;
}

if (in(global.mx, room_width-3*TILE, room_width) &amp;&amp; in(global.my, HEIGHT - 3*TILE, HEIGHT))
if (mouse_check_button_released(mb_left))
{
    if (global.state == G_PLAY) global.state = G_PAUSE;
    else if (global.state == G_PAUSE) global.state = G_PLAY;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.hp == 0)
{

    // TODO
        
    global.state = G_OVER;
}

if (global.state == G_START)
{
    if (global.hp &gt; 0)
    {
        // reset everything here
        
        global.timer = 0;
        
        if (mouse_check_button_released(mb_left))
        {
            global.state = G_PLAY;
        }
    }
}
if (global.state == G_PLAY)
{

    global.timer = (global.timer + 1 * global.spd) % INFINITE;
    
    waveTimer = max(waveTimer - global.spd, 0);
    
    if (!waveTimer &amp;&amp; ds_queue_size(global.enemyQueue) &lt; 100)
    {
        spawnWave(wave);
        wave++;
        waveTimer = maxWaveTimer;
    }
    
    enemyTimer = max(enemyTimer - global.spd, 0);
    if (!enemyTimer)
    {
        var _delay = 0;
        repeat((ds_queue_size(global.enemyQueue) div 50) + 1)
        {
            if (ds_queue_size(global.enemyQueue) &gt; 0)
            { 
                var s = instance_create(-999, -999, objSlime);
                
                var q = ds_queue_dequeue(global.enemyQueue);
                s.type = q[0];
                s.banner = q[1];
                s.delay = _delay;
                _delay += 10;
            }
        }
        enemyTimer = maxEnemyTimer;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Free Surface
if (surface_exists(surf))
    surface_free(surf);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.timer = 0;
global.state = G_START;

global.mx = WIDTH/2;
global.my = HEIGHT/2;

global.hp = 500;

global.spawn = noone;
global.goal = noone;

//loading level
createRoom(map[0]);
global.path = path_map0;

wave = 0;
maxWaveTimer = 30 * SEC;
waveTimer = 0;

ds_queue_empty(global.enemyQueue);

global.spd = 1;

global.coins = 80;

currentTower = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HUD</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ++++ DRAW GUI HERE ++++

var w = display_get_gui_width();
var h = display_get_gui_height();

draw_set_alpha(1);
draw_set_font(global.fnt);
draw_set_color(c_white);

draw_set_halign(fa_right);
draw_set_valign(fa_top);

draw_text(w, 0, "$" + string(global.coins));

draw_set_halign(fa_left);
draw_text(0, 0, "HP: " + string(global.hp));

// wave
draw_sprite_part(sprHud, -1, 10*TILE, 0, 4*TILE, TILE,0, TILE);
draw_sprite_part(sprHud, -1, 10*TILE, TILE, (waveTimer/maxWaveTimer)*4*TILE, TILE,0, TILE);

// draw start
if (global.state == G_START)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);    
    draw_text(w/2, h/2, "-Tap to play-");
}

// draw speedfactor
if (global.spd == 1) _spf = 0;
if (global.spd == 2) _spf = 1;
if (global.spd &gt; 2) _spf = 2;
draw_sprite_part(sprHud, -1, _spf * 2*TILE, 0, 2*TILE, 2*TILE, w - 4.5*TILE, h - 2.5*TILE);

// draw pause
draw_sprite_part(sprHud, -1, 3 * 2*TILE + (global.state == G_PAUSE)*2*TILE, 0, 2*TILE, 2*TILE, w - 2.5*TILE, h - 2.5*TILE);

//DEBUG:
draw_set_halign(fa_right);
draw_set_valign(fa_top);
//draw_text(w, h - TILE, ds_queue_size(global.enemyQueue));

// ++++++++++++++ draw tower shop buttons +++++++++++++++++

draw_set_halign(fa_center);
draw_set_valign(fa_top);

var maxTower = 0;
for (i = 0; i &lt; array_length_1d(tower); i++)
    if (tower[i]) maxTower++;

for (i = 0; i &lt; maxTower; i++)
{
    var _x = room_width/2 - maxTower*1.5*TILE + i*3*TILE;
    draw_sprite_part(sprHud, -1, 0 + (global.coins &lt; towerPrice[i]) * 3*TILE, 2*TILE, 3*TILE, 3*TILE, _x, h - 3*TILE);    
    draw_sprite_part(sprHud, -1, i*2*TILE, 5*TILE, 2*TILE, 2*TILE, _x + .5 * TILE, h - 2.5*TILE);
    
    draw_text(_x + 1.5*TILE, h - TILE, "$" + string(towerPrice[i]));
    
    if (in(global.mx, _x, _x + 3*TILE) &amp;&amp; in(global.my, h - 3*TILE, h))
    {
        if (currentTower == noone
        &amp;&amp; global.coins &gt;= towerPrice[i])
        {
            if (mouse_check_button_pressed(mb_left))
            {
                currentTower = instance_create(global.mx, global.my, objTower);
                currentTower.price = towerPrice[i];
            }
        }
    }
}
















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SHADER STUFF</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++SHADER++++
shader_set(shader0);
draw_clear(c_black);

//--------------------------------------------------

//++++SURFACE++++
if (!surface_exists(surf))
{
    view_hview = HEIGHT;
    view_wview = WIDTH;
    
    var _w = view_wport;
    var _h = view_hport;

    surf = surface_create(_w, _h);
    surface_set_target(surf);
    
    draw_clear(c_black);
    surface_reset_target();
    
    //Set the view that you want to draw to the surface
    view_surface_id[0] = surf;
        
}
else
{

    //Disable alpha blending (not needed since we are drawing the whole view)
    draw_enable_alphablend(false);
    //Draw the surface stretched to the GUI layer
    
    var aspect_x = display_get_gui_width() / surface_get_width(surf);
    var aspect_y = display_get_gui_height() / surface_get_height(surf);
    
    display_set_gui_size(surface_get_width(surf) / global.zoom, surface_get_height(surf) / global.zoom);
    
    var xoffset = (surface_get_width(surf)*aspect_x) / 2;
    var yoffset = (surface_get_height(surf)*aspect_y) / 2;
    draw_surface_ext(surf,
        display_get_gui_width() / 2 - xoffset,
        display_get_gui_height() / 2 - yoffset, aspect_x, aspect_y, 0, c_white, 1);
    
    //Switch on alpha blending again for the next normal draw pass
    draw_enable_alphablend(true);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DISABLE MASK VISIBILITY</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_path(global.path, 0, 0, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
