<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskTower</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// upgrades:

upgrade = 0;
type = 0;
price = 0;

// for fly hive tower:
spawnedProj = false;
alt = 1; //&lt;- for alternatingg fly directions

// flags:

placed = false;
free = false;
canSeeInvisible = false;

// stats:

range = 0;
maxDelay = 0;
delay = 0;

// cosmetic:

spawnDelay = 0;
maxSpawnDelay = 30;

fCur = 0;
frame = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>INIT</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(type)
{
    case 0: // poop
        switch(upgrade)
        {
            case 0:
                range = 4*TILE;
                maxDelay = 60;
                dmg = 1;   
            break;
            case 1:
                range = 5*TILE;
                maxDelay = 50;
                dmg = 1;   
            break;
            case 2:
                range = 5*TILE;
                maxDelay = 50;
                dmg = 1;   
            break;
            case 3:
                range = 5*TILE;
                maxDelay = 20;
                dmg = 1;   
            break;
            case 4:
                range = 6*TILE;
                maxDelay = 30;
                dmg = 2;   
            break;
        }
    break;
    case 1: // toilet bomb
        switch(upgrade)
        {
            case 0:
                range = 3*TILE;
                maxDelay = 90;
                dmg = 1;
                bombType = 1;
            break;
            case 1:
                range = 3.5*TILE;
                maxDelay = 80;
                dmg = 1;
                bombType = 1;  
            break;
            case 2:
                range = 4*TILE;
                maxDelay = 60;
                dmg = 2;
                bombType = 2;
            break;
            case 3:
                range = 4.5*TILE;
                maxDelay = 60;
                dmg = 2;
                bombType = 2;
            break;
            case 4:
                range = 5*TILE;
                maxDelay = 30;
                dmg = 5;
                bombType = 3;
            break;
        }
    break;
    case 2: // ICE
        dmg = 1;
        switch(upgrade)
        {
            case 0:
                range = 3*TILE;
                maxDelay = 90;
            break;
            case 1:
                range = 3*TILE;
                maxDelay = 75;
            break;
            case 2:
                range = 3*TILE;
                maxDelay = 60;
            break;
            case 3:
                range = 3.5*TILE;
                maxDelay = 5;
            break;
            case 4:
                range = 4*TILE;
                maxDelay = 5;
            break;            
        }
    break;
    case 3: // FLY HIVE
        dmg = 1;
        switch(upgrade)
        {
            case 0:
                range = 2.5*TILE;
                maxDelay = 90;
            break;
            case 1:
                range = 2.5*TILE;
                maxDelay = 60;
            break;
            case 2:
                range = 2.5*TILE;
                maxDelay = 120;
            break;
            case 3:
                range = 2.5*TILE;
                maxDelay = 60;
            break;
            case 4:
                range = 2*TILE;
                maxDelay = 0;
            break;            
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!placed)
    depth = 0;
else
    depth = 10 + room_height - y;

if (global.state != G_PLAY) exit;

free = place_free(x, y) &amp;&amp; (bbox_bottom &lt; room_height - 3*TILE);

if (!placed)
{
    x = global.mx - 8;
    y = global.my - 8;

    if (mouse_check_button_released(mb_left))
    {
        if (free)
        {
            global.coins -= price;
            var t = instance_create(x + 8, y, objText);
            t.text = '-'+string(price)+'"';
            
            createEffect(x + 8, y + 8, 2);
            
            placed = true;
            spawnDelay = maxSpawnDelay;
        }
        else
            instance_destroy();
    }
}
else
{
    spawnDelay = max(spawnDelay - global.spd, 0);
    if (spawnDelay) exit;
    
    delay = max(delay - global.spd, 0);

    if (!delay)    
    {
        switch(type)
        {
            case 0: // poop
            
                var e = findEnemy(x + 8, y + 8, range, canSeeInvisible);
                switch(upgrade)
                {
                    case 0:
                    case 1:
                    case 3:
                        if (instance_exists(e) &amp;&amp; e.initialized &amp;&amp; e.hp &gt; 0)
                        {
                            var proj = instance_create(x + 8,y + 12, objProjectile);
                            proj.angle = point_direction(proj.x, proj.y, e.x, e.y);
                            proj.dmg = dmg;
                            proj.range = range;
                            proj.spd = 3;
                            proj.type = 0;
                            proj.z = -4;
                            delay = maxDelay;
                            
                            if (upgrade == 3) // laxativo
                            {
                                //proj.subType = 1; //green color
                                proj.spd = 4;
                            }
                        }
                    break;
                    case 2:
                        if (instance_exists(e) &amp;&amp; e.initialized &amp;&amp; e.hp &gt; 0)
                        {
                            var proj1 = instance_create(x + 8,y + 12, objProjectile);
                            var proj2 = instance_create(x + 8,y + 12, objProjectile);
                            
                            proj1.angle = point_direction(proj1.x, proj1.y, e.x, e.y);
                            proj2.angle = point_direction(proj2.x, proj2.y, e.x, e.y);
                            
                            proj1.x += lengthdir_x(-4, proj1.angle + 90);
                            proj1.y += lengthdir_y(-4, proj1.angle + 90);
                            proj2.x += lengthdir_x(4, proj1.angle + 90);
                            proj2.y += lengthdir_y(4, proj1.angle + 90);
                            
                            proj1.dmg = dmg;
                            proj1.range = range;
                            proj1.spd = 3;
                            proj1.type = 0;
                            proj1.z = -4;
                            
                            proj2.dmg = dmg;
                            proj2.range = range;
                            proj2.spd = 3;
                            proj2.type = 0;
                            proj2.z = -4;
                            
                            delay = maxDelay;
                        }
                    break;
                    case 4: // goldnugget
                        if (instance_exists(e) &amp;&amp; e.initialized &amp;&amp; e.hp &gt; 0)
                        {
                            var proj = instance_create(x + 8,y + 12, objProjectile);
                            proj.angle = point_direction(proj.x, proj.y, e.x, e.y);
                            proj.dmg = dmg;
                            proj.range = range;
                            proj.spd = 2.5;
                            proj.type = 4;
                            proj.z = -4;
                            delay = maxDelay;
                        }
                    break;
                }
            break;
            case 1: // toilet bombs
                var e = findEnemy(x + 8, y + 8, range, canSeeInvisible);
                if (instance_exists(e) &amp;&amp; e.initialized &amp;&amp; e.hp &gt; 0)
                {
                    var proj = instance_create(x + 8,y, objProjectile);
                    proj.angle = point_direction(proj.x, proj.y, e.x, e.y);
                    proj.dmg = dmg;
                    proj.range = point_distance(proj.x, proj.y, e.x, e.y);
                    proj.maxHeight = proj.range / 2;
                    proj.type = bombType;
                    switch(upgrade)
                    {
                        case 0:
                            proj.spd = 1.3;
                        break;
                        case 1:
                            proj.spd = 1.4;
                        break;
                        case 2:
                            proj.spd = 1.5;
                        break;
                        case 3:
                            proj.spd = 2;
                        break;
                        case 4:
                            proj.spd = 3;
                        break;
                    }
                    delay = maxDelay;
                }
            break;
            case 2: // ice
                var e = findEnemy(x + 8, y + 8, range, canSeeInvisible || upgrade &gt; 2);
                if (instance_exists(e) &amp;&amp; e.initialized &amp;&amp; e.hp &gt; 0)
                {
                    /*
                        "Freezes slimes for#a short time period.",
                        "Frozen slimes will#become slowed.",
                        "The frost kills#off the weak.",
                        "Stops freezing,#but increases slow effect.",
                        "Do you wanna build#a pooman? (slow+++)");
                    */
                    switch(upgrade)
                    {
                        case 0:
                            var f = instance_create(x + 8, y + 8, objFrost);
                            f.type = 0;
                        break;
                        case 1:
                            var f = instance_create(x + 8, y + 8, objFrost);
                            f.type = 1;
                        break;
                        case 2:
                            var f = instance_create(x + 8, y + 8, objFrost);
                            f.type = 2;
                        break;
                        case 3:                            
                        case 4:
                            instance_deactivate_object(objSlime);
                            instance_activate_region(x-range,y-range,2*range,2*range, true);
                            
                            for(i = 0; i &lt; instance_number(objSlime); i++)
                            {
                                var e = instance_find(objSlime, i);
                                if (instance_exists(e) &amp;&amp; e.initialized &amp;&amp; e.hp &gt; 0 &amp;&amp; !e.immuneToIce
                                 &amp;&amp; distance_to_point(e.x, e.y) &lt;= range)
                                {
                                    e.maxSlowFactor = 0; // just resets
                                    if (upgrade == 3)
                                        e.slowFactor = .7;
                                    if (upgrade == 4)
                                        e.slowFactor = .4;
                                    e.slowDuration = 20;
                                }
                            }
                            instance_activate_object(objSlime);
                        break;
                    }
                    delay = maxDelay;
                }
            break;
            case 3: // FLY HIVE
                if (!delay)
                {
                    alt = -alt;
                    switch(upgrade)
                    {
                        case 0:
                            var proj = instance_create(x + 8, y + 8, objProjCircle);
                            proj.parent = id;
                            proj.type = 0;
                            proj.maxEnemies = 3;
                            proj.spd = 3 * alt;
                            proj.r = 0;
                            proj.hp = 3*60;
                            proj.range = range;
                        break;
                        case 1:
                            var proj = instance_create(x + 8, y + 8, objProjCircle);
                            proj.parent = id;
                            proj.type = 1;
                            proj.maxEnemies = 4;
                            proj.spd = 4 * alt;
                            proj.r = 0;
                            proj.hp = 3*60;
                            proj.range = range;                            
                        break;
                        case 2:
                            for (i = 0; i &lt; 2; i++)
                            {
                                var proj = instance_create(x + 8, y + 8, objProjCircle);
                                proj.parent = id;
                                proj.type = 2;
                                proj.maxEnemies = 8;
                                proj.spd = 1.5;
                                proj.r = i * 180 + (alt == 1)*90;
                                proj.hp = 4*60;
                                proj.range = range;                                
                            }
                        break;
                        case 3:
                            var proj = instance_create(x + 8, y + 8, objProjCircle);
                            proj.parent = id;
                            proj.type = 3;
                            proj.maxEnemies = 12;
                            proj.spd = 2;
                            proj.r = 0;
                            proj.hp = 3*60;
                            proj.range = range;                            
                        break;
                        case 4:
                            if (!spawnedProj)
                            {
                                var proj = instance_create(x + 8, y + 8, objProjCircle);
                                proj.parent = id;
                                proj.type = 4;
                                proj.maxEnemies = -1;
                                proj.spd = 1;
                                proj.r = 270;
                                proj.hp = -1;
                                proj.range = range;
                                proj.dmg = .1;                                
                            
                                var proj = instance_create(x + 8, y + 8, objProjCircle);
                                proj.parent = id;
                                proj.type = 4;
                                proj.maxEnemies = -1;
                                proj.spd = 1;
                                proj.r = 90;
                                proj.hp = -1;
                                proj.range = range;
                                proj.dmg = .1;
                                
                                spawnedProj = true;
                            }
                        break;
                    
                    }
                    delay = maxDelay;
                }
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);

// pillar
draw_sprite_part(sprHud,-1,16*TILE,3*TILE,2*TILE,2*TILE,x - 8, y - TILE + 4);

// frost tower
if (type == 2)
{
    if (upgrade &lt; 3)
    {
        rot1 = 0;
        rot2 = 0;
        rot3 = 0;
    }
    else
    {
        draw_set_blend_mode(bm_add);
    }
    if (upgrade == 3) // small storm
    {
        if (global.state != G_PAUSE)
        {
            rot1 = (rot1 + 2) % 360;
            rot2 = (rot2 - 3) % 360;
        }
        draw_sprite_ext(sprFrost, 3, x+8, y+8, 1, 1, rot1, c_white, .15);
        draw_sprite_ext(sprFrost, 4, x+8, y+8, .7, .7, rot2, c_white, .2);
    }
    if (upgrade == 4) // bigger storm
    {
        if (global.state != G_PAUSE)
        {
            rot1 = (rot1 + 1) % 360;
            rot2 = (rot2 - 2) % 360;
            rot3 = (rot3 + 3) % 360;
        }
        draw_sprite_ext(sprFrost, 3, x+8, y+8, 1.3, 1.3, rot1, c_white, .15);
        draw_sprite_ext(sprFrost, 4, x+8, y+8, .95, .95, rot2, c_white, .15);
        draw_sprite_ext(sprFrost, 4, x+8, y+8, .75, .75, rot3, c_white, .2);
    }
    draw_set_blend_mode(bm_normal);
}

if (global.state != G_PAUSE)
    fCur = (fCur + .1 /* * global.spd*/) % 4;
    
frame = floor(fCur);

var sd = 1 - spawnDelay / maxSpawnDelay;

draw_sprite_part_ext(sprTower, -1, frame*2*TILE + type*8*TILE, upgrade*2*TILE, 2*TILE, 2*TILE, x - sd*TILE + 8, y - sd*TILE - 2, sd, sd, c_white, 1);

if (global.tower == id &amp;&amp; placed)
for (i = 0; i &lt; upgrade+1; i++)
    draw_sprite_part(sprHud,-1,16*TILE,5*TILE,9,8, x - 3 - ((upgrade-1)/2 * 12) + 12*i, y - TILE - 8);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
