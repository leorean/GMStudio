<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objControl.spawnX = x;
objControl.spawnY = y;

die = false;

if (!instance_exists(objCamera))
    instance_create(x,y,objCamera);

canPlaceBlock = false;

state = IDLE;
statePrev = state;
dir = RIGHT;
look = NONE;
xVel = 0;
yVel = 0;
xVelOther = 0;
xVelMax = 4;
yVelMax = 4;
cx = x+TILE/2;
cy = y+TILE/2;
px = -1;
py = -1;

yGrav = .15;
yGravGlide = .08;

jumpSpd = 3.4;
jumpSpdLow = 2.5;
jumpSpdGlide = 3;
xSpd = 1.5;
xSpdLow = 1;


jumped = false;
onGround = false;
hasBlock = -1;

inside = noone;

//++++drawing++++
fCur = 0;
fMax = 3;
fSpeed = 0;
frame = 0;

//++++input++++
kLeft = false;
kRight = false;
kUp = false;
kDown = false;
kJump = false;
kAction = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++local variables++++
cx = x+TILE/2;
cy = y+TILE/2;
//++++++++

//++++input++++

//var g = (global.gameState == G.PLAY);

kLeft = keyboard_check(vk_left) || (instance_exists(objDPad) &amp;&amp; objDPad.kLeft);
kRight = keyboard_check(vk_right) || (instance_exists(objDPad) &amp;&amp; objDPad.kRight);
kUp = keyboard_check(vk_up) || (instance_exists(objDPad) &amp;&amp; objDPad.kUp);
kDown = keyboard_check(vk_down) || (instance_exists(objDPad) &amp;&amp; objDPad.kDown);
kJump = keyboard_check_pressed(ord('A')) || (instance_exists(objDPadButton1) &amp;&amp; objDPadButton1.pressing);
kAction = keyboard_check_pressed(ord('S')) || (instance_exists(objDPadButton2) &amp;&amp; objDPadButton2.pressed);

xVel = sign(xVel)*min(abs(xVel),xVelMax);
yVel = sign(yVel)*min(abs(yVel),yVelMax);
//++++++++++++++

//++++dieing++++
if (die || place_meeting(x,y,objSpike) || y &gt; room_height)
{
    global.gameState = G.GAMEOVER;
    global.hasBlock = hasBlock;
    instance_create(x,y,objEffectDust);
    instance_destroy();
}

if (kUp)
    look = UP;
else if (kDown)
    look = DOWN;
else
    look = NONE;

if (instance_exists(inside))
    if (!place_meeting(x+xVel,y+yVel,inside))
        inside = noone;
        
px = (cx div TILE) * TILE; py = (cy div TILE) * TILE;

if (look == UP) py = py - TILE;
if (look == DOWN) py = py + TILE;
//if (look == NONE)
{
    if (dir == LEFT) px = px - TILE;
    if (dir == RIGHT) px = px + TILE;
}

canPlaceBlock = place_free(px,py) &amp;&amp; !place_meeting(x,y,objBlockTemp)// &amp;&amp; !(px == objControl.spawnX &amp;&amp; py == objControl.spawnY)
    &amp;&amp; in(px,0,room_width-TILE) &amp;&amp; in(py,0,room_height-TILE);

if (hasBlock == -1) // take block
{
    if (kAction)
    {
        blk = collision_point(px+TILE/2,py+TILE/2,objBlock,true,true);
        if (blk == noone)
            blk = collision_point(px+TILE/2,py+TILE/2,objBlockTemp,true,true);
        
        if (instance_exists(blk))
        {
            instance_create(blk.x,blk.y,objEffectDust);
            
            if (blk.type == 3) //grass block
                with(blk) instance_destroy();
            else
            {
                hasBlock = blk.type;
                
                //so it cant be abused
                if (hasBlock == 1)
                    yVel = max(yVel,-jumpSpdGlide);
                else
                    yVel = max(yVel,-jumpSpdLow);
                
                with (blk) instance_destroy();
            }
        }
    }
    
} else //place block
{
    if (kAction &amp;&amp; canPlaceBlock)
    {
        blk = instance_create(px,py,objBlockTemp);
        blk.type = hasBlock;
        with (blk)
        {
            if (place_meeting(x,y,objSolid) || place_meeting(x,y,objBlockTemp))
                instance_destroy();
            else
                objPlayer.hasBlock = -1;
        }
    }
}


//++++++++
if (hasBlock == 1)
    yVel += yGravGlide;
else
    yVel += yGrav;

onGround = collision_line(bbox_left,bbox_bottom+1+yVel,bbox_right,bbox_bottom+4,objSolid,true,true);
//    || collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+4,objBlock1,true,true);
if (onGround)
    jumped = false;

var s;
if (hasBlock == -1) s = xSpd;
else s = xSpdLow;

if (kLeft &amp;&amp; !kRight) //GO LEFT
{
    if (xVel &lt; 0)
        dir = LEFT;

    if (onGround)
    {
        xVel = max(xVel - .2, -s);
        state = WALK;
    }
    else
    {
        xVel = max(xVel - .2, -s);
        state = JUMP;        
    }
}
if (kRight &amp;&amp; !kLeft) //GO RIGHT
{
    if (xVel &gt; 0)
        dir = RIGHT;

    if (onGround)
    {
        xVel = min(xVel + .2, s);
        state = WALK;
    }
    else
    {
        xVel = min(xVel + .2, s);
        state = JUMP;
    }
}

if (!kLeft &amp;&amp; !kRight || (kLeft &amp;&amp; kRight))
{
    xVel = sign(xVel) * max(abs(xVel) - .2, 0);
    if (onGround)
        state = IDLE;
    else
        if (state == IDLE || state == WALK) state = JUMP;

}

if (kJump &amp;&amp; !jumped) //JUMP
{
    state = JUMP;
    if (hasBlock == -1)
        yVel = -jumpSpd;
    else if (hasBlock == 1)
        yVel = -jumpSpdGlide;
    else
        yVel = -jumpSpdLow;
    jumped = true;
}

if (!place_meeting(x+xVel+xVelOther,y,objSolid) &amp;&amp; in(cx+xVel+xVelOther,0,room_width))
    x += xVel + xVelOther;
else
    xVel = 0;
repeat((abs(yVel))*10)
    if (!place_meeting(x,y+sign(yVel)*.1,objSolid))
        y += sign(yVel)*.1;
    else
        yVel = 0;

//++++end step stuff++++
if (statePrev != state)
    fCur = 0;
statePrev = state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fCur = (fCur + fSpeed) % (fMax + 1);
switch(state)
{
    case IDLE:
        row = 0;
        fSpeed = .1;
        if (look == UP) fCur = 4;
        if (look == DOWN) fCur = 5;      
    break;
    case WALK:
        row = 1;
        fSpeed = .3;
    break;
    case JUMP:
        if (yVel &gt;= 0) fCur = 2;
        else fCur = 0;
        row = 2;
        fSpeed = 0;
    break;
    case DRILL:
        row = 3;
        fSpeed = .3;
    break;
}
frame = floor(fCur);

//draw block pointer
if (canPlaceBlock || hasBlock == -1) c = c_white;
else c = c_red;
draw_sprite_part_ext(sprGfx,-1,0,2*TILE,TILE,TILE,(px),(py),1,1,c,.3);

//draw block on back
if (hasBlock != -1)
    draw_sprite_part(sprGfx,-1,hasBlock*TILE,0,TILE,TILE,floor(x-sign(dir)*TILE*.4),floor(y-TILE*.4));

if (dir == LEFT)
    draw_sprite_part_ext(sprPlayer,-1,frame*TILE,row*TILE,TILE,TILE,(x)+TILE,(y),-1,1,c_white,1);
if (dir == RIGHT)
    draw_sprite_part_ext(sprPlayer,-1,frame*TILE,row*TILE,TILE,TILE,(x),(y),1,1,c_white,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
