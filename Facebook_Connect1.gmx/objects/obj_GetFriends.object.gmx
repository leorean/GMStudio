<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_GetFriends</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

graphResponse = ds_map_create();        // Prepare a ds_map to receive information
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_map_exists(graphResponse, "data"))                               // Check to see if the ds_map exists
{
var dataList, dataListSize, n, friendMap;                               // Create local vars

dataList = ds_map_find_value(graphResponse, "data");                    // Get list
dataListSize = ds_list_size(dataList);                                  // Get list size

for (n = 0; n &lt; dataListSize; n += 1)                                   // Start loop
    {
    friendMap = ds_list_find_value(dataList, n);                        // Get map
    ds_map_destroy(friendMap);                                          // Destroy map
    }   
ds_list_destroy(dataList);                                              // Destroy list
ds_map_destroy(graphResponse);                                          // Destroy main graph map
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_Press</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.Auth
{
facebook_graph_request("me/friends", "GET", -1, graphResponse);             // Request information from Facebook
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>501</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_sprite</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_GetFriends</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>-1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.Auth
{
// If we've got a response to our friends list request then display it please
var xx, yy, fontHeight;
xx = 0;
yy = 0;
fontHeight = string_height("ABCDEFGHIJKLMNOPQRSTUVWXYZ") + 1;                                       // Get the maximum height for the string

draw_set_font(font0);                                                                               // Set the font
draw_set_color(c_white);                                                                            // Set the draw colour
draw_set_halign(fa_left);                                                                          // Set the text alignment

if (ds_map_exists(graphResponse, "data"))                                                           // Make sure that the map exists
    {
    var dataList, dataListSize, n, friendMap, currentKey, currentValue;                             // Set up local vars
    
    dataList = ds_map_find_value(graphResponse, "data");                                            // Get the "data" list from the map
    dataListSize = ds_list_size(dataList);                                                          // Get the size of the data list
    
    for (n = 0; n &lt; dataListSize; n += 1)                                                           // Loop through the list to get the names
        {
        friendMap = ds_list_find_value(dataList, n);                                                // Gets the ds_map from the list (this is the id/friend map)
        currentKey = ds_map_find_first(friendMap);                                                  // Gets the first friend key (id)
        while (ds_map_exists(friendMap, currentKey))                                                // loop through the list, getting each ds_map
            {
            currentValue = ds_map_find_value(friendMap, currentKey);                                // Get the friend that corresponds to the id
            draw_text(xx, yy, "    " + string(currentKey) + ": " + string(currentValue));           // Draw the friend on the screen
            currentKey = ds_map_find_next(friendMap, currentKey);                                   // Get the next ds_map id key
            yy += fontHeight;                                                                       // Add to the draw y position
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
