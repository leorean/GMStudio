<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskTower</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>objStatic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dmg = 1;
delay = 20;
del = delay;
range = 2*TILE;

level = 0;
type = 0;

multi = 1; //number of enemies

//++++drawing++++
frame = 0;
fCur = 0;
fMax = 4;
fSpeed = .1;

state = IDLE;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cx = x+.5*TILE;
cy = y+.5*TILE;

if (global.state == G_PLAY)
{
    if (true)//state == IDLE)
    {
        del = max(del-1,0);
        
        if (!del)
        {
            var found = false;
            
            del = 5;

            //todo: choose enemies, shoot, depending on type
            var enemies = findEnemies(cx,cy,range,multi);

            for (var i = 0; i &lt; array_length_1d(enemies); i++)
            {
                if (instance_exists(enemies[i]))
                {
                    found = true;
                    var proj = instance_create(cx,cy,objProjectile1);
                    proj.target = enemies[i];
                    proj.dmg = dmg;
                }
            }
            
            if (found)
            {
                state = ATTACK;
                fCur = 0;
                del = delay;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fCur = (fCur+fSpeed) % fMax;
frame = floor(fCur);

if (state == ATTACK &amp;&amp; fCur &gt;= fMax-fSpeed-1)
    state = IDLE;

draw_sprite_part(sprTowers,-1,frame*TILE+4*(state==ATTACK)*TILE+8*type*TILE,0,TILE,TILE,x,y);

if (mouse_check_button(mb_left) &amp;&amp; collision_point(mouse_x,mouse_y,id,false,false))
{
    drawRadius(cx,cy,range,c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
