<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;
state = IDLE;

deathTimer = 2*SEC;

dragged = false;
angle = 0;
yGrav = .12;

//draw vars
draw_angle = 0;
frame = 0;
fCur = 0;
dir = RIGHT;

//center of sprite
cx = x+TILE/2;
cy = y+TILE/2;
//spawn of mouse in relation to drag
mx = cx;
my = cy;

//drag radius
dr = 2*TILE;
//max drag distance for mouse
dmax = 10*TILE;
//current angular drag distance
dx = cx;
dy = cy;
path = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != G_PAUSED)
{
    //+++++physics++++++
    onGround = (yVel &gt;=-yGrav &amp;&amp; (collision_line(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,objSolid,true,true) != noone));
    cx = x + TILE/2;
    cy = y + TILE/2;
    
    if (onGround)
    {
        if (xVel &lt; 0) dir = LEFT;
        if (xVel &gt; 0) dir = RIGHT;
    
        if (state == JUMP) state = IDLE;
    
        //friction from jumping
        if (state != WALK)
        {
            if (abs(xVel) &lt; 1.5)
            {
                xVel *= .3;
            }
            else
                xVel *= .85;
        }
    } else 
        if (state != DEAD)
            state = JUMP;
    
    yVel += yGrav;
    
    //++++routine++++
    
    if (state != CHARGE &amp;&amp; state != DEAD &amp;&amp; device_mouse_check_button_pressed(0,mb_left))
    {
        mx = global.mousex;
        my = global.mousey;
    }
    
    if (state == IDLE || state == WALK)
    {
        if (global.kLeft &amp;&amp; !global.kRight)
        {
            dir = LEFT;
            state = WALK;
            if (xVel &gt; 0) xVel -= .1;        
            xVel = max(xVel - .1,-2);
        }
        if (global.kRight &amp;&amp; !global.kLeft)
        {
            dir = RIGHT;
            state = WALK;
            if (xVel &lt; 0) xVel += .1;
            xVel = min(xVel + .1,2);
        }
        if (state == WALK &amp;&amp; !global.kLeft &amp;&amp; !global.kRight)
            state = IDLE;

        if (device_mouse_check_button(0,mb_left))
        {
            if (abs(mx - global.mousex) &gt; 4 || abs(my - global.mousey) &gt; 4)
                state = CHARGE;
        }
    }
    if (state == CHARGE)
    {
        xVel *= .8;
        yVel *= .8;
        
        angle = point_direction(mx, my, global.mousex, global.mousey);
        var rad_angle = ((angle / 180) * pi);
        
        dx = mx - (cos(rad_angle)) * min(abs(mx - global.mousex), dmax);
        dy = my + (sin(rad_angle)) * min(abs(my - global.mousey), dmax);
        
        var pow = clamp( (point_distance(mx, my, dx, dy) / dmax) * 5, 2, 5);
        var pow_x = -lengthdir_x(pow, angle);
        var pow_y = -lengthdir_y(pow, angle);
    
        if (!instance_exists(path))
            path = instance_create(cx,cy,objPath);
        
        path.x = cx;
        path.y = cy;
        path.x0 = cx;
        path.y0 = cy;
        path.vx0 = pow_x;
        path.vy0 = pow_y;    
        path.g = yGrav;
        
        if (mouse_check_button_released(mb_left) &amp;&amp; state != DEAD)
        {
            xVel = pow_x;
            yVel = pow_y;
    
            if (xVel &lt; 0) dir = LEFT;
            if (xVel &gt; 0) dir = RIGHT;
            state = JUMP;
    
            with(path)
                instance_destroy();
            path = noone;
        }
    }
    
    if (state != DEAD &amp;&amp; (place_meeting(x, y, objEnemy) || cy &gt; room_width + TILE))
    {
        repeat(20)
        {
            var p = instance_create(bbox_left+random(TILE),bbox_top+random(TILE),objParticle);
            p.xVel = xVel + -2 + random(4);
            p.yVel = yVel + -3 + random(2);
        }
        state = DEAD;        
    }
    
    if (state == DEAD)
    {
        xVel *= .99;
        yVel *= .99;
        deathTimer = max(deathTimer - 1, 0);
        if (!deathTimer)
            room_restart();
    }
    
    //++++collision and move routine++++
    if (!place_meeting(x, y + yVel, objSolid))
        y += yVel;
    else
    {
        yVel *= -.3;
    }
    
    if (in(x + xVel, 0, room_width - TILE) &amp;&amp; !place_meeting(x + xVel, y, objSolid))
        x += xVel;
    else
    {
        if (abs(xVel) &gt; 1.5)
            xVel *= -.3;
        else
            xVel *= .5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    //draw_sprite_ext(mskPlayer, -1,floor(x),floor(y),1,1,0,c,1);
var drawx = cx;
var drawy = cy;

switch(state)
{
    case IDLE:
        draw_angle = 0;
        fCur = (fCur+.08) % 4;
        frame = floor(fCur);
    break;
    case WALK:
        draw_angle = 0;
        fCur = (fCur+.15) % 4;
        frame = floor(fCur) + 6;
    break;
    case CHARGE:
        draw_angle = 270+point_direction(mx,my-1,global.mousex,global.mousey);
        frame = 4;
        drawx = cx-1+random(2);
    break;
    case JUMP:
        draw_angle = 90+point_direction(cx,cy-1,cx+xVel,cy+yVel);
        frame = 5;
    break;
    case DEAD:
        frame = 10;
    break;
}
    
draw_sprite_ext(sprPlayer,frame,drawx,drawy,sign(dir),1,draw_angle,c_white,1);

/*if (state == IDLE)
    draw_circle(cx,cy,dr,1);

if (state == CHARGE)
    draw_line(mx,my,dx,dy);
*/

//draw_circle(global.mousex,global.mousey,3,1);
//draw_text(cx,y-2*TILE,string(global.mousex)+","+string(global.mousey)+":"+string(mx)+","+string(my));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
