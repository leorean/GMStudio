<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;
state = IDLE;

dragged = false;
angle = 0;

yGrav = .12;

//draw vars
draw_angle = 0;
frame = 0;
fCur = 0;
dir = RIGHT;

//center of sprite
cx = x+TILE/2;
cy = y+TILE/2;

//drag radius
dr = 2*TILE;
//max drag distance for mouse
dmax = 5*TILE;
//current angular drag distance
dx = cx;
dy = cy;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//+++++physics++++++
onGround = (yVel &gt;=-yGrav &amp;&amp; (collision_line(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,objBlock,true,true) != noone));
cx = x+TILE/2;
cy = y+TILE/2;

if (onGround)
{
    if (abs(xVel) &lt; 1.5)
    {
        xVel *= .3;
//        yVel = 0;
        if (state == JUMP) state = IDLE;        
    }
    else
        xVel *= .85;    
} else
    state = JUMP;

yVel += yGrav;

//++++jump routine++++
if (state == IDLE)
{
    if (mouse_check_button(mb_left))    
        if (in(global.mousex,cx-dr,cx+dr) &amp;&amp; in(global.mousey,cy-dr,cy+dr))
        {
            state = CHARGE;
        }
}
if (state == CHARGE)
{
    xVel *=.8;
    yVel *=.8;

    angle = point_direction(cx,cy,global.mousex,global.mousey);
    var rad_angle = ((angle / 180) * pi);
    
    dx = cx - (cos(rad_angle)) * min(abs(cx-global.mousex),dmax);
    dy = cy + (sin(rad_angle)) * min(abs(cy-global.mousey),dmax);
    
    //angle = point_direction(cx,cy,dx,dy);
    //pow = clamp(point_distance(cx,cy,mouse_x,mouse_y)/10,2,5);
    
    var pow = clamp( (point_distance(cx,cy,dx,dy) / dmax) * 6.5 , 1.5, 6.5);
    
    if (mouse_check_button_released(mb_left))
    {
        xVel = -lengthdir_x(pow,angle);
        yVel = -lengthdir_y(pow,angle);        

        if (xVel&lt;0) dir = LEFT;
        if (xVel&gt;0) dir = RIGHT;
        state = JUMP;
    }
}

//++++collision and move routine++++
if (y+yVel&gt;0 &amp;&amp; !place_meeting(x,y+yVel,objBlock))
    y += yVel;
else
{
    yVel *= -.3;
}

if (in(x+xVel,0,room_width-TILE) &amp;&amp; !place_meeting(x+xVel,y,objBlock))
    x += xVel;
else
{
    if (abs(xVel)&gt;1.5)
        xVel *= -.3;
    else
        xVel *= .5;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    //draw_sprite_ext(mskPlayer, -1,floor(x),floor(y),1,1,0,c,1);

switch(state)
{
    case IDLE:
        draw_angle = 0;
        fCur = (fCur+.08) % 4;
        frame = floor(fCur);
    break;
    case CHARGE:
        draw_angle = 0;
        frame = 4;
    break;
    case JUMP:
        draw_angle = 90+point_direction(cx,cy-2,cx+xVel,cy+yVel);
        frame = 5;
    break;
}
    
draw_sprite_ext(sprPlayer,frame,cx,cy,sign(dir),1,draw_angle,c_white,1);
//draw_self();

if (state == IDLE)
{
    draw_circle(cx,cy,dr,1);
}

if (state == CHARGE)
{
    draw_line(cx,cy,dx,dy);
}

draw_circle(global.mousex,global.mousey,3,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
