<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;
state = IDLE;

maxDeathTimer = 2*SEC;
deathTimer = maxDeathTimer;
light = noone;

alpha = 1;

dragged = false;
angle = 0;
yGrav = .12;

//draw vars
draw_angle = 0;
frame = 0;
fCur = 0;
dir = RIGHT;

//center of sprite
cx = x+TILE/2;
cy = y+TILE/2;
//spawn of mouse in relation to drag
mx = cx;
my = cy;

//drag radius
dr = 2*TILE;
//max drag distance for mouse
dmax = 8*TILE;
//current angular drag distance
dx = cx;
dy = cy;
path = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != G_PAUSED &amp;&amp; global.state != G_WIN)
{
    //+++++physics++++++
    onGround = (yVel &gt;=-yGrav &amp;&amp; (collision_line(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,objSolid,true,true) != noone));

    cx = x + TILE/2;
    cy = y + TILE/2;
    
    /*if (onPlatform)
    {
        //y = (platform.y div TILE) * TILE - TILE;
    }*/
            
    if (onGround)
    {
        if (xVel &lt; 0) dir = LEFT;
        if (xVel &gt; 0) dir = RIGHT;
    
        if (state == JUMP) state = IDLE;
    
        //friction from jumping
        if (state != WALK)
            xVel *= .8;            

    } else 
        if (state != DEAD)
            state = JUMP;
    
    yVel += yGrav;
    
    //++++routine++++
    
    if (state == IDLE || xVel &gt; 0 || yVel &gt; 0)
        if (device_mouse_check_button_pressed(0,mb_left))
        {
            mx = global.mousex;
            my = global.mousey;
        }
    
    if (state == IDLE || state == WALK)
    {
        if (global.kLeft &amp;&amp; !global.kRight)
        {
            dir = LEFT;
            state = WALK;
            if (xVel &gt; 0) xVel -= .1;        
            xVel = max(xVel - .1,-2);
        }
        if (global.kRight &amp;&amp; !global.kLeft)
        {
            dir = RIGHT;
            state = WALK;
            if (xVel &lt; 0) xVel += .1;
            xVel = min(xVel + .1,2);
        }
        if (state == WALK &amp;&amp; !global.kLeft &amp;&amp; !global.kRight)
            state = IDLE;

        if (device_mouse_check_button(0,mb_left) &amp;&amp; (!global.mobile || (!global.kLeft &amp;&amp; !global.kRight &amp;&amp; !global.kPause)))
        {
            if (global.mousex &gt; (2*TILE) &amp;&amp; global.mousey &gt; (2*TILE)) //cheap workaround for pause issue
            if (abs(mx - global.mousex) &gt; 4 || abs(my - global.mousey) &gt; 4)
                state = CHARGE;
        }
    }
    if (state == CHARGE)
    {
        xVel *= .8;
        yVel *= .8;
        
        angle = point_direction(mx, my, global.mousex, global.mousey);
        var rad_angle = ((angle / 180) * pi);
        
        dx = mx - (cos(rad_angle)) * min(abs(mx - global.mousex), dmax);
        dy = my + (sin(rad_angle)) * min(abs(my - global.mousey), dmax);
        
        var pow = clamp( (point_distance(mx, my, dx, dy) / dmax) * 5, 2, 5);
        var pow_x = -lengthdir_x(pow, angle);
        var pow_y = -lengthdir_y(pow, angle);
    
        if (!instance_exists(path))
            path = instance_create(cx,cy,objPath);
        
        path.x = cx;
        path.y = cy;
        path.x0 = cx;
        path.y0 = cy;
        path.vx0 = pow_x;
        path.vy0 = pow_y;    
        path.g = yGrav;
        
        for (i = 0; i &lt; 5; i++)
        if (state != DEAD &amp;&amp; device_mouse_check_button_released(i,mb_any))
        {
            xVel = pow_x;
            yVel = pow_y;
    
            if (xVel &lt; 0) dir = LEFT;
            if (xVel &gt; 0) dir = RIGHT;
            state = JUMP;
    
        }
    } else
        with(path)
            instance_destroy();
    
    if (state != DEAD &amp;&amp; (place_meeting(x, y, objEnemy) || cy &gt; room_height))
    {
        repeat(20)
        {
            var p = instance_create(bbox_left+random(TILE),bbox_top+random(TILE),objParticle);
            p.xVel = xVel + -2 + random(4);
            p.yVel = yVel + -3 + random(2);
        }
        global.shake = true;
        state = DEAD;        
    }
    
    if (state == DEAD)
    {
        with (path) instance_destroy();
        dragged = false;
        
        xVel *= .99;
        yVel *= .99;
        
        deathTimer = max(deathTimer - 1, 0);
        if (!deathTimer)
        {
            xVel = 0;
            yVel = 0;

            x = global.spawnx;
            y = global.spawny;
            
            //TODO: reroll collects and enemies
            
            deathTimer = maxDeathTimer;
            state = IDLE;            
        }
    }
    
    //++++collectables++++
    if (state != DEAD)
    {
        //collectables
        var collectable = instance_place(x,y,objCollect);
        if (collectable != noone &amp;&amp; !collectable.collected)
        {
            global.flash = true;
            collectable.collected = true;
            global.collectables++;
        }
        
        //++++WIN++++
        if (global.state != G_WIN &amp;&amp; global.collectables == global.maxCollectables)
        {
            xVel = 0;
            yVel = 0;
            state = WIN;
            global.state = G_WIN;
            global.curtain.state = CLOSE;
            global.curtain.timer = 4*SEC;
            light = instance_create(cx,cy,objLight);
            light.alpha = .001;
            light.size = .001;
            
            //cleared
            global.levelProps[global.currentLevel,1] = true;
            //foundSecret
            global.levelProps[global.currentLevel,2] = global.secret;
            
            //set the next level as target if it hasn't been cleared yet
            if (!global.levelProps[min(global.currentLevel+1,MAXLVL-1),1])
            {
                global.nextLevel = min(global.currentLevel+1,MAXLVL-1);
                show_debug_message("setting next level to: "+ string(global.nextLevel));
            }
            else
                global.nextLevel = global.currentLevel;
            
            //canBePlayed
            global.levelProps[min(global.currentLevel+1,MAXLVL-1),3] = true;
            
            save();
        }
        
        //secret
        var secret = instance_place(x,y,objSecret);
        if (secret != noone &amp;&amp; !secret.collected)
        {
            global.flash = true;
            secret.collected = true;
            global.secret = true;
        }
        
        //coins
        var coin = instance_place(x,y,objCoin)
        if (coin != noone &amp;&amp; !coin.collected)        
        {
            //collect effect
            repeat (5)
            {
                var r = 12;
                var g = instance_create(cx-r+random(2*r),cy-r+random(2*r),objEffectGlitter);
                g.color = make_color_hsv(25+random(25),155+random(100),255);
            }
            
            coin.collected = true;
            global.coins++;
        }
        
        //checkpoint
        var chk = instance_place(x,y,objCheckpoint);
        if (chk != noone)
        {
            global.checkpoint = chk;
            global.spawnx = chk.x;
            global.spawny = chk.y;
        }
    }
    //++++collision and move routine++++
    if (in(x,view_xview[0],view_xview[0]+view_wview[0])
        &amp;&amp; in(y,view_yview[0],view_yview[0]+view_hview[0]+TILE))
    {    
        if (!place_meeting(x, y + yVel, objBlock)
            &amp;&amp; !(place_meeting(x,y+yVel,objPlatform) &amp;&amp; (yVel &gt; 0 &amp;&amp; !place_meeting(x,y-1,objPlatform))))
        {
            y += yVel;
        }
        else
        {
            yVel = min(yVel * -.3, 0);
        }
        
        if (in(x + xVel, 0, room_width - TILE) &amp;&amp; !place_meeting(x + xVel, y, objBlock))
            x += xVel;
        else
        {
            if (abs(xVel) &gt; 1.5)
                xVel *= -.3;
            else
                xVel *= .5;
        }
    }
}

if (global.state == G_WIN)
{
    with(path) instance_destroy();
    
    light.size *= 1.1;
    light.alpha = min(light.alpha+.003,1);
    
    alpha = max(alpha - .01, 0);
    if (global.timer % 2 == 0)
    {
        var r = 12;
        var g = instance_create(cx-r+random(2*r),cy-r+random(2*r),objEffectGlitter);
        g.color = make_color_hsv(random(255),155+random(100),255);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var drawx = cx;
var drawy = cy;

if (global.state != G_PAUSED)
{
    switch(state)
    {
        case IDLE:
            draw_angle = 0;
            fCur = (fCur+.08) % 4;
            frame = floor(fCur);
        break;
        case WALK:
            draw_angle = 0;
            fCur = (fCur+.15) % 4;
            frame = floor(fCur) + 6;
        break;
        case CHARGE:
            draw_angle = 270+point_direction(mx,my-1,global.mousex,global.mousey);
            frame = 4;
            drawx = cx-1+random(2);
        break;
        case JUMP:
            draw_angle = 90+point_direction(cx,cy-1,cx+xVel,cy+yVel);
            frame = 5;
        break;
        case DEAD:
            frame = 10;
        break;
        case WIN:
            frame = 11;
            draw_angle = 0;
        break;
    }
}
draw_sprite_ext(sprPlayer,frame,drawx,drawy,sign(dir),1,draw_angle,c_white,alpha);

//if (state == IDLE)
//    draw_circle(cx,cy,dr,1);

//draw_circle(global.mousex,global.mousey,3,1);
//draw_text(cx,y-2*TILE,string(global.mousex)+","+string(global.mousey)+":"+string(mx)+","+string(my));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
