<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++global variables++++
randomize();

global.saveFile = "sv.ini";

global.mobile = false;
if (os_type == os_android || os_type == os_ios)
    global.mobile = true;

//effects:
global.shake = false;
shakeTimer = 0;
maxShakeTimer = .2*SEC;

global.flash = false;
flashAlpha = 0;

    
//font
global.fntDefault = font_add_sprite(sprFntDefault,ord(' '),true,1);

//curtain
global.curtain = instance_create(0,0,objCurtain);

//config vars
global.quality = 2; //0 = low, 1 = med, 2 = high
global.mute = false;

global.w = view_wport[0];
global.h = view_hport[0];
surf = -1; //drawing surface

global.mousex=0;
global.mousey=0;

//level vars
global.timer = 0;
global.state = G_PLAY;
global.camera = noone;

global.currentLevel = -1;

//level props:
for (i = 0; i &lt; 100; i++)
{
    //name:
    global.levelProps[i,0] = "Course " + string(i);
    //lvlid: from obj
    //cleared
    global.levelProps[i,1] = false;
    //foundSecret
    global.levelProps[i,2] = false;
    //canBePlayed
    global.levelProps[i,3] = false;
}

mapData = importLevel("WORLD.tmx");
//l0Data = importLevel("L0.tmx");
levelData[0] = importLevel("L0.tmx");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++debug keys++++
if (keyboard_check_pressed(ord('C')))
{
    global.quality = (global.quality+1)%3;
    if (surface_exists(surf))
        surface_free(surf);
    show_debug_message("Quality set to" + string(global.quality));
}
if (keyboard_check_pressed(ord('R')))
    room_restart();

if (keyboard_check_pressed(ord('Q')))
    game_restart();

if (keyboard_check_pressed(ord('L')))
    room_goto_next();
    
if (keyboard_check_pressed(ord('K')))
    global.collectables = global.maxCollectables;

//++++global input++++        
//global.mousex = view_xview[0] + device_mouse_x(i) / room_width * WIDTH;
//global.mousey = view_yview[0] + device_mouse_y(i) / room_height * HEIGHT;
global.mousex = device_mouse_x_to_gui(0);
global.mousey = device_mouse_y_to_gui(0);

if (room == GAME)
{
    global.kPause = btnPause.pressed || keyboard_check_pressed(vk_escape) || keyboard_check_pressed(ord('P'));
    
    if (!btnPause.pressing)
    {
        global.kLeft = keyboard_check(vk_left) || keyboard_check(ord('A')) || btnLeft.pressing;
        global.kRight = keyboard_check(vk_right) || keyboard_check(ord('D'))  || btnRight.pressing;
    } else
    {
        global.kLeft = false;
        global.kRight = false;
    }
    
    //++++pause menu handling++++
    if (global.kPause)
    {
        if (global.state == G_PLAY)
        {
            var pmenu = instance_create(view_xview[0],view_yview[0],objPauseMenu);
            pmenu.depth = depth-1;
            global.state = G_PAUSED;        
        }
        else if (global.state == G_PAUSED)
        {
            global.state = G_PLAY;
        }    
    }
    
    if (global.state == G_PAUSED)
    {
        with(objButton)
            visible = false;
    }
    else if (global.state == G_PLAY)
    {
        with(objButton)
            visible = true;
        with(objPauseMenu)
            instance_destroy();
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++global routines++++
if (global.state != G_PAUSED)
{
    global.timer = (global.timer + 1) % INF;    
    flashAlpha = max(flashAlpha - .03, 0);
    
    if (room == GAME)
    {
        //++++level win scenario++++
        if (global.state == G_WIN)
        {
            //curtainCloseTimer = max(curtainCloseTimer - 1, 0);
        
            //if (!curtainCloseTimer)
            //    global.curtain.state = CLOSE;
    
            //TODO: LOAD LEVEL
            if (global.curtain.isClosed)
            {
                winTimer = max(winTimer - 1, 0);
                if (!winTimer)
                    room_goto(WORLDMAP);
            }
                            
        } else
        {
            /*curtainOpenTimer = max(curtainOpenTimer - 1, 0);
            if (!curtainOpenTimer)
                global.curtain.state = OPEN;*/
        }
    }
}

if (global.shake)
{
    shakeTimer = maxShakeTimer;
    global.shake = 0;
}
shakeTimer = max(shakeTimer - 1,0);
if (shakeTimer)
    view_angle[0] = -1+random(2);
else
    view_angle[0] = 0;

//++++instance management++++
var off = 3*TILE;

instance_deactivate_object(objStatic);
instance_activate_region(view_xview[0]-off,view_yview[0]-off,WIDTH+2*off,HEIGHT+2*off,true);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Free Surface
if (surface_exists(surf))
    surface_free(surf);

mouse_clear(mb_left);

with (objPauseMenu) instance_destroy();
with (objTitleMenu) instance_destroy();
with (objWorldMap) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.timer = 0;
global.state = G_PLAY;
global.camera = noone;

global.collectables = 0;
global.maxCollectables = 0;
global.secret = false;
global.coins = 0;

global.spawnx = 0;
global.spawny = 0;
global.checkpoint = noone;

winTimer = 1*SEC;

with(objButton) instance_destroy();

if (room == TITLE)
{
    instance_create(0,0,objTitleMenu);
}

if (room == WORLDMAP)
{
    load();
    createWorldMap(mapData);
}

if (room == GAME)
{

    global.curtain.state = OPEN;
    global.curtain.timer = 1*SEC;

    //create UI buttons:
    btnLeft = instance_create(2*TILE,.8*HEIGHT,objButton);
    btnLeft.offspritex = 0;
    btnRight = instance_create(WIDTH-2*TILE,.8*HEIGHT,objButton);
    btnRight.offspritex = 3*TILE;
    btnPause = instance_create(1*TILE+1,1*TILE+1,objButton);
    btnPause.w = 2*TILE;
    btnPause.h = 2*TILE;
    btnPause.offspritex = 6*TILE;
    
    //create room:
    createRoom(levelData[global.currentLevel]);
    //createRoom(l0Data);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++SHADER++++
shader_set(shader0);
//draw_clear(c_black);

//--------------------------------------------------

//++++SURFACE++++
if (!surface_exists(surf))
{
    //Create (or recreate) the surface when needed
    //QUALITY:
    var w,h;
    switch(global.quality)
    {
        case 0: // low (1x)
            global.w = view_wview[0]; global.h = view_hview[0];
        break;
        case 1: // med (2x)
            global.w = view_wport[0]/2; global.h = view_hport[0]/2;
        break;
        case 2: // high (4x)
            global.w = view_wport[0]; global.h = view_hport[0];
        break;
    }
    surf = surface_create(global.w,global.h);
    surface_set_target(surf);
    
    draw_clear(c_black);
    surface_reset_target();
    //Set the view that you want to draw to the surface
    view_surface_id[0] = surf;
        
}
else
{

    //Disable alpha blending (not needed since we are drawing the whole view)
    draw_enable_alphablend(false);
    //Draw the surface stretched to the GUI layer
    
    var aspect_x = display_get_gui_width() / surface_get_width(surf);
    var aspect_y = display_get_gui_height() / surface_get_height(surf);
    
    display_set_gui_size(surface_get_width(surf),surface_get_height(surf));
    
    var xoffset = (surface_get_width(surf)*aspect_x)/2;
    var yoffset = (surface_get_height(surf)*aspect_y)/2;
    draw_surface_ext(surf,display_get_gui_width()/2-xoffset,display_get_gui_height()/2-yoffset,aspect_x,aspect_y,0,c_white,1);
    
    //Switch on alpha blending again for the next normal draw pass
    draw_enable_alphablend(false);    
}

//draw_line(global.mousex,global.mousey,objPlayer.mx,objPlayer.my);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DRAW UI HERE

var vx = view_xview[0];
var vy = view_yview[0];
var vw = view_wview[0];
var vh = view_hview[0];

//flash effect:
if (global.flash)
{
    flashAlpha = 1;
    global.flash = false;
}
if (flashAlpha &gt; 0)
    draw_sprite_ext(sprScreenRect,-1,vx,vy,1,1,0,c_white,flashAlpha);

draw_set_color(c_white);
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
draw_set_font(global.fntDefault);

if (room == GAME)
{
    
    //coins
    draw_set_halign(fa_right);
    draw_set_valign(fa_top);
    draw_sprite_part(sprMisc,-1,10*TILE,2*TILE,TILE,TILE,vx+vw-TILE,vy+TILE);
    draw_text(vx+vw-TILE,vy+TILE,global.coins);
    
    //secret
    draw_sprite_part(sprMisc,-1,11*TILE+(global.secret==true)*TILE,2*TILE,TILE,TILE,vx+vw-TILE,vy+2*TILE);

    //collectables
    draw_set_halign(fa_right);
    draw_set_valign(fa_top);
    draw_sprite_part(sprMisc,-1,9*TILE,2*TILE,TILE,TILE,vx+vw-TILE,vy);
    draw_text(vx+vw-TILE,vy,string(global.collectables)+"/"+string(global.maxCollectables));

}

//fps
draw_set_halign(fa_right);
draw_text(vx+vw,vy+vh-TILE,fps);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
