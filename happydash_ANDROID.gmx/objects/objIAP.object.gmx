<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.iap = false;

global.pCount = 5; // HAS TO BE ADJUSTED WHEN ADDING NEW ITEMS!!!!

var i;
for (i = 0; i &lt; global.pCount; i++)
{
    global.p_id[i] = "none";
    global.p_title[i] = "none";
    global.p_description[i] = "none";
    global.p_price[i] = "none";
    //global.p_type[i] = "none";
}
global.pCur = 0;
initIAP(); //INIT IN APP PURCHASES
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var val = ds_map_find_value(iap_data, "type");
switch(val)
{
    //one-time purchases like noads or unlock stuff,
    //also initiates consumables for the iap_ev_consume event
    case iap_ev_purchase:
        var map = ds_map_create();
        var purchase_id = ds_map_find_value(iap_data, "index");
        iap_purchase_details(purchase_id, map);
        //these events are triggered when a purchase is SUCCESSFUL
        // - also triggers at the start of the game
        if (ds_map_find_value(map, "status") == iap_purchased)
        {
            var product_id = ds_map_find_value(map, "product");
            
            switch(product_id)
            {
                case "noads":
                    global.noads = true;
                    saveProgress(); loadProgress();
                break;
                case "unlockupgrades":
                    global.unlockupgrades = true;
                    unlockUpgrades();
                    saveProgress(); loadProgress();
                break;
                case "coinpack1":
                case "coinpack2":
                case "coinpack3":
                    iap_consume(product_id);
                break;
            }
            
            if (global.iap)
            {
                playSound(sfxBuy,1);
                if (instance_exists(objPremiumMenu))
                    with(objPremiumMenu)
                        show_message_async('Thank you for purchasing "' + 
                            cutString(product.p_title," (Happy Dash)") + '"!');
            }
            
            global.iap = true;
            
            ds_map_replace(global.purchaseMap, product_id, 1);
        }
        ds_map_destroy(map);
    break;
    //consumables
    case iap_ev_consume:
        var product_id = ds_map_find_value(iap_data, "product");
        if (ds_map_find_value(iap_data, "consumed"))
        {
            ds_map_replace(global.purchaseMap, product_id, 0);
            var amount = -1;
            switch (product_id)
            {
                case "coinpack1":
                    amount = 10000;
                break;
                case "coinpack2":
                    amount = 25000;
                break;
                case "coinpack3":
                    amount = 50000;
                break;
            }
            if (amount != -1)
            {
                global.wallet += amount;
                saveProgress(); loadProgress();
                //playSound(sfxBuy,1);
                //show_message("Purchased!");
            }
        }
    break;
    //HERE I WILL GET THE DATA FOR THE PRODUCT
    case iap_ev_product:
        
        var p_map = ds_map_create();
        iap_product_details(ds_map_find_value(iap_data, "index"), p_map);

        global.p_id[global.pCur] = string(ds_map_find_value(p_map, "id"));
        global.p_title[global.pCur] = string(ds_map_find_value(p_map, "title"));
        global.p_description[global.pCur] = string(ds_map_find_value(p_map, "description"));
        global.p_price[global.pCur] = string(ds_map_find_value(p_map, "price"));
        //global.p_type[global.pCur] = string(ds_map_find_value(p_map, "type"));

        //show_message_async(global.p_id[global.pCur] + string(ds_map_find_value(p_map,"verified")));
        global.pCur ++;
        
        ds_map_destroy(p_map);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
