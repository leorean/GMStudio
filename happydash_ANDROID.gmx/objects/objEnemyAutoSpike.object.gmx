<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprEnemyAutoSpikeMask</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objLivingEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

mask_index = objBlock;
checking = 1;
mask = 0;

state = IDLE;
alive = true;

active = false;
depth = BLOCKDEPTH-2;
dir = NONE;

fCur = 0;
fSpeed = .25;
fMax = 4;

hasShot = false;
cooldown = 0;
maxCooldown = 45;

yGrav = .15;
yVel = 0;

isFlying = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cycle ();

if (!global.pause &amp;&amp; x &gt; 0)
{
    if (alive)
    {
        if (checking &gt; 0)
        {
            cx = x+TILE*.5-ceil(global.xSpeed);
            cy = y+TILE*.5;
            
            l = collision_point(cx-TILE,cy,objSolid,false,true);
            r = collision_point(cx+TILE,cy,objSolid,false,true);
            u = collision_point(cx,cy-TILE,objSolid,false,true);
            d = collision_point(cx,cy+TILE,objSolid,false,true);
        
            if (!l &amp;&amp; !r &amp;&amp; !u &amp;&amp; !d)
                mask = 4;
        
            if (l) mask = 2;
            if (r) mask = 3;    
        
            if (u &amp;&amp; !d &amp;&amp; !l &amp;&amp; !r) mask = 1;
            if (d &amp;&amp; !u &amp;&amp; !l &amp;&amp; !r) mask = 0;
        
            if (mask == 0)
            {
                mask_index = sprEnemyMaskUp;
                dir = UP;
            }
            if (mask == 1)
            {
                mask_index = sprEnemyMaskDown;
                dir = DOWN;
            }
            if (mask == 2)
            {
                mask_index = sprEnemyMaskRight;
                dir = RIGHT;
            }
            if (mask == 3)
            {
                mask_index = sprEnemyMaskLeft;
                dir = LEFT;
            }
            if (mask == 4)
            {
                mask_index = sprEnemySpikeMask;
                dir = NONE;
                alive = false;
            }
        
            checking = max(checking - 1, 0);
        } else
        {
            if (dir == UP &amp;&amp; place_free(x,y+TILE/2))
            || (dir == DOWN &amp;&amp; place_free(x,y-TILE/2))
            || (dir == LEFT &amp;&amp; place_free(x-global.xSpeed+TILE/2,y))
            || (dir == RIGHT &amp;&amp; place_free(x-global.xSpeed-TILE/2,y))
                alive = false;
        }

        if (state == IDLE)
        {
            if (!active &amp;&amp; fCur == 0)
            {
                if (abs(x-global.player.x)&lt; .33*WIDTH)
                    active = true;
            } else
            {
                fCur = min(fCur + fSpeed, fMax);
                if (fCur == fMax)
                {
                    mask_index = sprEnemyMask; 
                    state = ATTACK;
                    cooldown = maxCooldown;
                }
            }
        }
        if (state == ATTACK)
        {
            cooldown = max(cooldown - 1, 0);
            
            if (!cooldown &amp;&amp; !hasShot)
            {
                instance_create(x+TILE*.5,y+TILE*.5,objEnemyProjectile);
                hasShot = true;
                d = instance_create(x,y,objEffectDust);
                d.type = 5;
                d.color = make_color_hsv(70,255,255);
            }
        }
        
    } else //DEAD
    {
        if (state != DEAD)
        {
            t = instance_create(x,y,objEffectDust);
            t.type = 2;
            global.enemiesKilled += 1;
            repeat(5)
                spawnParticle(x+TILE*.5,y+TILE*.5,COLOR_POO);
            yVel = -3;
        }
        fCur = (fCur + fSpeed) mod fMax;
        state = DEAD;
        xVel = 0;
        y += yVel;
        yVel += yGrav;
    }
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
frame = floor(fCur);
row = 0;

switch(dir)
{
    case UP:
        row = 0;
    break;
    case DOWN:
        row = 1;
    break;
    case LEFT:
        row = 2;
    break;
    case RIGHT:
        row = 3;
    break;
}

if (alive)
{
    if (state != ATTACK)
        draw_sprite_part(spriteEnemies,-1,frame*TILE,6*TILE+row*TILE,TILE,TILE,floor(x),y);
    else
    {
        dx = ((abs(dir) == 2) &amp;&amp; cooldown/maxCooldown &lt; .5)*(-1+random(2));
        dy = ((abs(dir) == 1) &amp;&amp; cooldown/maxCooldown &lt; .5)*(-1+random(2));
        
        if (cooldown &gt; 0)
            draw_sprite_part(spriteEnemies,-1,5*TILE+floor((1-(cooldown/maxCooldown))*3)*TILE,6*TILE+row*TILE,TILE,TILE,floor(x+dx),floor(y+dy));
        else
            draw_sprite_part(spriteEnemies,-1,8*TILE,6*TILE+row*TILE,TILE,TILE,floor(x),y);
    }
}
else
    draw_sprite_part(spriteEnemies,-1,frame*TILE,10*TILE,TILE,TILE,floor(x),y);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
