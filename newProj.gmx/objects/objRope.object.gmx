<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskRope</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>parent = noone;
child = noone;

sticky = false;

target = noone;
joint = -1;

spd = .01;
alive = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sticky) //end of rope
{
    if (joint == -1)
    {
        target = instance_place(x,y,objSolid);
        if (instance_exists(target))
        {
            joint = physics_joint_rope_create(self,target,x,y,x,y,1,false);
            
            //joint = physics_joint_distance_create(self,target,x,y,target.x+TILE/2,target.y+TILE/2,false);
            //physics_joint_set_value(joint,phy_joint_damping_ratio,1);
            //physics_joint_set_value(joint,phy_joint_frequency,10);
            //joint = physics_joint_revolute_create(self, target, x, y, 0, 360, 0, 0, 0, 0, false); 
            global.player.attached = true;
        }
        target = noone;
    }
}

if (!alive)
{
    parent.alive = false;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objCollider">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if (instance_exists(parent))
{
    c = min((point_distance(parent.x,parent.y,x,y)/TILE)*255,255);
    color = make_color_hsv(0,c,c);
    
    draw_set_color(color);
    
    draw_line_width(x,y,parent.x,parent.y,2);
}

//draw_set_color(c_yellow)
//draw_rectangle(x,y,x+1,y+1,false);

/*if (instance_exists(target))
{
    if (joint != -1)
    {
        tx = physics_joint_get_value(joint,phy_joint_anchor_2_x);
        ty = physics_joint_get_value(joint,phy_joint_anchor_2_y);
        
        draw_line_width(x,y,target.x+tx,target.y+ty,2);
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>2,2</point>
    <point>2,1</point>
  </PhysicsShapePoints>
</object>
