<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskEnemyGround</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = RIGHT;
if (x &gt; room_width/2) dir = LEFT;

spd = 1;
xVel = 0;
yVel = 0;
yGrav = .15;

state = MOVE;
hurtTimer = 0;

onGround = false;

jumpTimer = SEC + random(3*SEC);

hp = 5;
hurt = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>onGround = yVel &gt;= 0 &amp;&amp; 
    collision_rectangle(bbox_left, bbox_bottom, bbox_right, 
    bbox_bottom + max(yVel, 1), objSolid, false, true);

if (state != HURT) {
    if (hurt) {
        state = HURT;
    }
}

if (state == HURT) {
    hurt = max(hurt - 1, 0);
    if (onGround) {
        xVel *= .9;
    }
    if (!hurt) {
        xVel = 0;
        state = MOVE;
    }
}

if (hp == 0) {
    instance_destroy();
}
    
if (state == MOVE) {
    xVel = sign(dir) * min(abs(xVel) + .1, spd);

    var wall = noone;
    if (dir == LEFT) wall = collision_point(bbox_left + 4*sign(xVel), y, objSolid, false, true);
    if (dir == RIGHT) wall = collision_point(bbox_right + 4*sign(xVel), y, objSolid, false, true);
    
    if (onGround)
        jumpTimer = max(jumpTimer - 1, 0);
    else {
        wall = noone;
        xVel *= .9;
    }
    
    if (wall != noone || !jumpTimer) {
        jumpTimer = SEC + random(3*SEC);
        yVel = -(3.5 + random(1));
        xVel = 0;
        state = JUMP;
    }
}
if (state == JUMP) {
    xVel = sign(dir) * abs(xVel) + .1;
    if (onGround) state = MOVE;
}

// hit head
if (collision_line(bbox_left, bbox_top + yVel, bbox_right, bbox_top + yVel, objSolid, false, true))
{
    move_contact_solid(90, TILE);
    yVel = max(yVel, 0);
}

// actual movement:

xVel = sign(xVel) * min(abs(xVel), 6);
yVel = sign(yVel) * min(abs(yVel), 6);

yVel += yGrav;
if (!place_meeting(x + xVel, y, objSolid) &amp;&amp; in(x + xVel, 0, room_width)) {
    x += xVel;
} else {
    xVel = 0;
}
if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    move_contact_solid(270, TILE);
    yVel = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
