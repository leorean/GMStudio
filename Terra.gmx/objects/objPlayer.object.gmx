<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>onPlatform = false;
xVel = 0;
yVel = 0;
yGrav = .15;

dir = RIGHT;

gamepad = -1;

kLeft = 0;
kRight = 0;
kUp = 0;
kDown = 0;
kJump = 0;
kJumpPressed = 0;
kJumpReleased = 0;
kAttack = 0;
kAttackPressed = 0;
kAttackReleased = 0;

jumped = 0;
jumpVel = 0;
jumpVelMax = 2;

// weapon
wx = x;
wy = y;
weaponAngle = 0;
weapon = 0;
weaponCooldown = 0;

hook = noone;
hooked = false;

// animations
state = IDLE;
fCur = 0;
fMin = 0;
fMax = 0;
fSpeed = 0;
frame = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// no gamepad:

kLeft = keyboard_check(vk_left);
kRight = keyboard_check(vk_right);
kUp = keyboard_check(vk_up);
kDown = keyboard_check(vk_down);
kJump = keyboard_check(ord('A'));
kJumpPressed = keyboard_check_pressed(ord('A'));
kJumpReleased = keyboard_check_released(ord('A'));
kAttack = keyboard_check(ord('S'));
kAttackPressed = keyboard_check_pressed(ord('S'));
kAttackReleased = keyboard_check_released(ord('S'));

var d = 1*kRight + 10*kUp + 100*kLeft + 1000*kDown;
switch(d) {
    case 1: weaponAngle = 0; break;
    case 10: weaponAngle = 90; break;
    case 100: weaponAngle = 180; break;
    case 1000: weaponAngle = 270; break;
    case 11: weaponAngle = 45; break;
    case 110: weaponAngle = 135; break;
    case 1100: weaponAngle = 225; break;
    case 1001: weaponAngle = 315; break;
    default: weaponAngle = 0 + 180*(dir==LEFT); break;
}

if (state == TURN &amp;&amp; (kLeft || kRight)) {
    weaponAngle = -sign(xVel &lt; 0)*180;
}

// disable gamepad if it was enabled
if (kUp || kDown || kLeft || kRight || kJump || kAttack) gamepad = -1;

// gamepad:

if (gamepad_is_supported() &amp;&amp; gamepad_get_device_count() &gt; 0 &amp;&amp; gamepad_is_connected(0)) {
    if (gamepad == -1) {
        if (gamepad_button_check(0, gp_face1)) gamepad = 0;
    }
}

if (gamepad &gt; -1) {
    
    var T = .75;
    kUp = gamepad_axis_value(0, gp_axislv) &lt; -T;
    kDown = gamepad_axis_value(0, gp_axislv) &gt; T;
    kLeft = gamepad_axis_value(0, gp_axislh) &lt; -T;
    kRight = gamepad_axis_value(0, gp_axislh) &gt; T;
    kJump = gamepad_button_check(0, gp_face1);
    kJumpPressed = gamepad_button_check_pressed(0, gp_face1);
    kJumpReleased = gamepad_button_check_released(0, gp_face1);
    kAttack = gamepad_button_check(0, gp_face3);
    kAttackPressed = gamepad_button_check_pressed(0, gp_face3);
    kAttackReleased = gamepad_button_check_released(0, gp_face3);
    
    weaponAngle = point_direction(0, 0, gamepad_axis_value(0, gp_axislh), gamepad_axis_value(0, gp_axislv));
    if (!kDown &amp;&amp; !kUp &amp;&amp; !kLeft &amp;&amp; !kRight) weaponAngle = 180*(dir==LEFT);
}
/*
if (dir == LEFT) {
    if (weaponAngle &lt; 90 || weaponAngle &gt; 270) weaponAngle = 90;
    if (weaponAngle &gt; 270) weaponAngle = 270;
}
if (dir == RIGHT) {
    if (weaponAngle &gt; 90 &amp;&amp; weaponAngle &lt; 270) weaponAngle = 90;
    if (weaponAngle &lt; 270) weaponAngle = 270;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// flags

onGround = yVel &gt;= 0 &amp;&amp; 
    collision_rectangle(bbox_left, bbox_bottom, bbox_right, 
    bbox_bottom + max(yVel, 1), objSolid, false, true);

// hook

if (!instance_exists(hook)) {
    hooked = false;
    hook = noone;
}

var wl = 7; // "length" of weapon
if (kAttackPressed)
{
/*  weaponCooldown = 15;
    var pew = instance_create(
        wx + lengthdir_x(wl, weaponAngle),
        wy + lengthdir_y(wl, weaponAngle),
        objWeaponProjectile);
    pew.angle = weaponAngle;
    pew.dmg = 1;*/
    
    if (!instance_exists(hook)) {
        hook = instance_create(
        wx + lengthdir_x(wl, weaponAngle),
        wy + lengthdir_y(wl, weaponAngle),
        objHook);
        hook.angle = weaponAngle;
    }
}

if (!kAttack) {
    if (hook) {
        hook.contract = true;
    }
}

weaponCooldown = max(weaponCooldown - 1, 0);
    
// input -&gt; action

kLeft = kLeft &amp;&amp; !kRight;
kRight = kRight &amp;&amp; !kLeft;

if (!hooked) {
    if (kLeft) {
        //turn around
        if (xVel &gt; 0) {
            xVel -= .15;
            if (onGround) state = TURN;
        }
        else {
            if (onGround) state = WALK;
            dir = LEFT;
            xVel = max(xVel - .25, -2);
        }
    }
    else if (kRight) {
        // turn around
        if (xVel &lt; 0) {
            xVel += .15;
            if (onGround) state = TURN;
        }
        else {
            if (onGround) state = WALK;
            dir = RIGHT;
            xVel = min(xVel + .25, 2);
        }
    }
    else {
        if (onGround) state = IDLE;
        xVel  *= .8;
    }
} else {
    if (kLeft) dir = LEFT;
    if (kRight) dir = RIGHT;
}

// jumping

if (onGround) {
    jumped = 0;
}
else {
    state = JUMP;
}

if (jumped == 0 &amp;&amp; kJumpPressed &amp;&amp; !hooked) {
    jumped = 1;
    jumpVel = 0;
    state = JUMP;
}
if (jumped == 1) {

    yVel = min(yVel, -3.2);
    
    if (kJump) {
        jumpVel = min(jumpVel + .2, 2.4);
    }
    
    if (jumpVel &gt;= 2.4 || kJumpReleased) {
        jumped = 2;
    }
}

// hit head
if (collision_line(bbox_left, bbox_top + yVel, bbox_right, bbox_top + yVel, objSolid, false, true))
{
    //move_contact_solid(90, TILE);
    yVel = max(yVel, 0);
    jumped = 2;
}

// actual movement:
if (!hooked) {
    yVel += yGrav;
} else {

    var hookAngle = point_direction(x, y, hook.x, hook.y);

    xVel =(hook.x - x) / 8;//+= (hook.x - x) / 250;
    yVel =(hook.y - y) / 8;//+= (hook.y - y) / 250;
}

xVel = sign(xVel) * min(abs(xVel), 6);
yVel = sign(yVel) * min(abs(yVel), 6);
    
if (!place_meeting(x + xVel, y, objSolid) &amp;&amp; in(x + xVel, 0, room_width)) {
    x += xVel;
} else {
    xVel = 0;
}
if (!place_meeting(x, y + yVel, objSolid)) {
    y += yVel;
} else {
    if(yVel &gt; 0)
        move_contact_solid(270, TILE);
    yVel = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state) {
    case IDLE:
        fMin = 0;
        fMax = 3;
        fSpeed = .12;
    break;
    case WALK:
        fMin = 4;
        fMax = 7;
        fSpeed = .2;
    break;
    case TURN:
        fMin = 8;
        fMax = 8;
        fSpeed = 0;
    break;
    case JUMP:
        fMin = 9;
        fMax = 9;
        fSpeed = 0;
    break;
    case HURT:
        fMin = 10;
        fMax = 10;
        fSpeed = 0;
    break;
    case DEAD:
        fMin = 11;
        fMax = 11;
        fSpeed = 0;
    break;
}
fCur = max(fMin, (fCur + fSpeed) % (fMax + 1));
frame = floor(fCur);

// draw player
draw_sprite_ext(sprPlayer, frame, x, y, sign(dir), 1, 0, c_white, 1);

// draw weapon
wx = x + sign(dir) * 7;
wy = y + 8;
draw_sprite_ext(sprWeapon, weapon, wx, wy, sign(dir), 1, weaponAngle + 180*(dir==LEFT), c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
