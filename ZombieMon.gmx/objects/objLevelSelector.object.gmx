<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mask_index = sprParticle;

bgx = 0;
bgy = 0;
bgspeed = .5;
cloudx = 0;
cloudy = 0;

x = room_width/2;
y = room_height;

selectY = 13*TILE;

xVel = 0;
yVel = 0;

state = 1;
desty = room_height;

levelParams = objControl.levelParams;
levelCount = array_length_1d(levelParams);
destx = 0;

offx = room_width/2;
space = 96;

dragx = mouse_x;
selected = 0;

btnPlay = false;
btnShop = false;
tapTimer = 0;

alpha = -.5;

mapx = -100;
mapy = -100;

for (i = 0; i &lt; levelCount; i++)
{
    lvl[i] = instance_create((x + i*space)/* - 2.5*TILE*/, selectY, objLvl);
    lvl[i].l = i;
}

lvl[0].map = array(64, 80);
lvl[1].map = array(112, 64);
lvl[2].map = array(144, 96);
lvl[3].map = array(112, 144);
lvl[4].map = array(176, 144);
//lvl[5].map = array(354, 234);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var levelDragPressed = in(mouse_y, y + selectY, y + selectY+5*TILE) 
    &amp;&amp; mouse_check_button_pressed(mb_left);
var levelDragReleased = in(mouse_y, y + selectY, y + selectY+5*TILE) 
    &amp;&amp; mouse_check_button_released(mb_left);    
var levelDrag = in(mouse_y, y + selectY, y + selectY+5*TILE)
    &amp;&amp; !mouse_check_button_pressed(mb_left) &amp;&amp; mouse_check_button(mb_left);

var doubleClick;
if (os_type != os_windows)
    doubleClick = mouse_check_button_pressed(mb_right);
else
{
    doubleClick = mouse_check_button_pressed(mb_left) &amp;&amp; tapTimer;
    if (mouse_check_button_pressed(mb_left))
        tapTimer = 30;
}
    
var backPressed = keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(vk_escape);
var backReleased = keyboard_check_released(vk_backspace) || keyboard_check_released(vk_escape);


if (state == 0) //title state
{
    desty = room_height;
    selected = global.maxLevel;
    if (backPressed)
        game_end();
    
    if (mouse_check_button_released(mb_left))
        state = 1;
    
    //reset map    
    mapx = room_width/2;
    mapy = -2000;
}

if (state == 1) //selectable state
{
    desty = room_height;
    bgspeed = .5;

    // scroll to map
    
    if (true)
    {
        var _sel = instance_place(room_width/2, y + selectY, objLvl);
        var _s = -1;
        if (instance_exists(_sel))
        {
            _s = _sel.l;
            
            var _lvs = lvl[_s].map;
            mapx += (_lvs[0] - mapx) / 8;
            mapy += (_lvs[1] - mapy) / 8;
        }
        else if (selected != -1)
        {
            var _lvs = lvl[selected].map;
            mapx += (_lvs[0] - mapx) / 8;
            mapy += (_lvs[1] - mapy) / 8;        
        }
    }
    
    /*
    btnPlay = in(mouse_x, 1*TILE, 5*TILE) &amp;&amp; in(mouse_y, y + room_height - 5*TILE, y + room_height - 1*TILE)
        &amp;&amp; selected &lt;= global.maxLevel;
    
    btnShop = in(mouse_x, room_width-5*TILE, room_width-1*TILE) &amp;&amp; in(mouse_y, y + room_height - 5*TILE, y + room_height - 1*TILE);
    
    if (btnPlay &amp;&amp; mouse_check_button_released(mb_left))
        state = 2;
    
    if (btnShop &amp;&amp; mouse_check_button_released(mb_left))
        state = 3;*/
          
    if (backPressed)
        state = 0;
    desty = 0;
        
    if (levelDrag)
    {
        if(abs(mouse_x - dragx) &gt; 6)
        {
            selected = -1;
            xVel = -(dragx - mouse_x) / 10;
        }
    }
    else
    {
        dragx = mouse_x;
        if (selected != -1)
        {
            destx = -(selected*space) + offx;
            xVel = (destx - x) / 10;
        }
        else
        {
            if (abs(xVel) &gt; .3)
                xVel *= .92;
            else
            {
                var _sel = instance_place(room_width/2, y + selectY, objLvl);
                if (instance_exists(_sel))
                    selected = _sel.l;
                
            }
        }
    }
    
    // double -tap to play
    var _sel = instance_place(mouse_x, mouse_y, objLvl);
    
    if (doubleClick &amp;&amp; instance_exists(_sel)
    &amp;&amp; _sel.l == selected &amp;&amp; selected &lt;= global.maxLevel)
    {        
        state = 2;
    }
    
    if (levelDragPressed)
    {

        var _sel = instance_place(mouse_x, mouse_y, objLvl);
        if (instance_exists(_sel))
            selected = _sel.l;
    }
}

tapTimer = max(tapTimer - 1, 0);

//back while transitioning
if (state == 2 || state == 3)
    if (backPressed)
    {
        alpha = 0;
        state = 1;
    }

// play pressed
if (state == 2)
{
    global.level = selected;
    global.nextRoom = GAME;
    bgspeed = min(bgspeed + .02, 4);
    desty = -room_height;
    state = 3;
    /*alpha = min(alpha + .02, 1);
    if (alpha == 1)
    {
        global.level = selected;
        //room_goto(GAME);
    }*/
}

// shop
/*if (state == 3)
{
    bgspeed = max(bgspeed - .008, 0);
    desty = -room_height;
    alpha = min(alpha + .01, 1);
    if (alpha == 1)
    {
        room_goto(SHOP);
    }
}*/

yVel = (desty - y) / 10;
xVel = sign(xVel)*min(abs(xVel), 10);
yVel = sign(yVel)*min(abs(yVel), 16);

if (in(x + xVel, -(levelCount-1)*space + offx, offx))
    x += xVel;
else
{
    dragx = mouse_x;
    xVel = 0;
}

y += yVel;

with(objLvl)
    x += objLevelSelector.xVel;

mouse_x_prev = mouse_x;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_top);


// draw bg
bgx = (bgx - bgspeed) % 192;
bgy = (bgy - bgspeed) % 320;

var _a = max((room_height - y) / room_height, .3);

draw_sprite_ext(sprBackground, -1, bgx, bgy, 1, 1, 0, c_white, _a);
draw_sprite_ext(sprBackground, -1, bgx + 192, bgy, 1, 1, 0, c_white, _a);
draw_sprite_ext(sprBackground, -1, bgx, bgy + 320, 1, 1, 0, c_white, _a);
draw_sprite_ext(sprBackground, -1, bgx + 192, bgy + 320, 1, 1, 0, c_white, _a);

// draw map
if (state == 1 || state == 2)
{
    var mofx = room_width/2;
    var mofy = room_height/3;
    draw_sprite(sprMap, -1, mofx - mapx - 8, mofy - mapy + 8);
    
    for (i = 0; i &lt; array_length_1d(lvl); i++)
    {
        var _mapx = lvl[i].map[0];
        var _mapy = lvl[i].map[1];
        
        draw_sprite_part(sprHud, -1, 2*TILE + (global.maxLevel &gt; i)*TILE + (global.maxLevel &lt; i)*2*TILE, TILE, TILE, TILE, 
            mofx + _mapx - mapx - 8 , mofy + _mapy - mapy + 8);    
    }
    
    var _sint = sin((global.timer % 30) / 15) * 4;
    //map cursor
    if (selected != -1)
    if (point_distance(mapx, mapy, lvl[selected].map[0], lvl[selected].map[1]) &lt; 3)
        draw_sprite_part(sprHud, -1, TILE, TILE, TILE, TILE, mofx - 8, mofy + _sint);
}

// draw mask
draw_set_blend_mode(bm_subtract);
draw_sprite_part_ext(sprBgMask, -1, 0, 0, 180, 320, 0, 0, 1, 1, c_white, .04);
draw_set_blend_mode(bm_normal);

    // draw clouds
    cloudx = (cloudx + .3) % 192;
    cloudy = (cloudy - .1) % 320;
    
    draw_sprite_ext(sprClouds, -1, cloudx - 192 + 3, cloudy - 360 + 12, 1, 1, 0, c_black, .2);
    draw_sprite_ext(sprClouds, -1, cloudx - 192, cloudy - 360, 1, 1, 0, c_white, _a*.7);

// draw title

draw_sprite_part(sprHud, -1, 15*TILE, 5*TILE, 5*TILE, 4*TILE, room_width/2 - 2.5*TILE, y - room_height + 15*TILE);

var _t = .03 * (global.timer);
var _y = floor(8 * sin(_t));

if (global.timer % 30 &gt; 15)
{
    draw_sprite_part_ext(sprHud, -1, 5*TILE,5*TILE, 10*TILE, 9*TILE, room_width/2-5*TILE - 3 + random(6), y - room_height - 3 +
    random(6) + 4*TILE + _y, 1, 1, c_white, .3);
}
if (global.timer % 50 &gt; 30)
{
    draw_sprite_part_ext(sprHud, -1, 5*TILE,5*TILE, 10*TILE, 9*TILE, room_width/2-5*TILE - 6 + random(12), y - room_height - 6 +
    random(12) + 4*TILE + _y, 1, 1, c_white, .2);
}
draw_sprite_part(sprHud, -1, 5*TILE,5*TILE, 10*TILE, 9*TILE, room_width/2-5*TILE, y - room_height + 4*TILE + _y);

//color and alpha for flashing text
var _ca = sin(2*_t);
var _cv = c_white;

if (state == 0)// &amp;&amp; global.timer % 90 &lt; 60)
{    
    draw_text_color(room_width/2, y - 1.25*TILE, "Tap to play", _cv, _cv, _cv, _cv, _ca);
}

// draw options
/*if (state == 1)
{
    //settings
    draw_sprite_part(sprHud, -1, 2*TILE, 0, 2*TILE, 2*TILE, 0, 0);

    //help
    draw_sprite_part(sprHud, -1, 4*TILE, 0, 2*TILE, 2*TILE, room_width-2*TILE, 0);    
}*/

// draw levels

var finalSelection = selected != -1;

for (i = 0; i &lt; levelCount; i++)
{

    var _color;
    if (i &lt;= global.maxLevel)
        _color = c_white;
    else
        _color = c_black;

    draw_sprite_part_ext(sprHud, -1, 0, 2*TILE, 5*TILE, 5*TILE, (x + i*space) - 2.5*TILE, y + selectY, 1, 1, c_white, 1);
    draw_set_blend_mode(bm_add);
    draw_sprite_part_ext(sprHud, -1, 0, 7*TILE, 5*TILE, 5*TILE, (x + i*space) - 2.5*TILE, y + selectY, 1, 1, c_white, .6);
    draw_sprite_part_ext(sprHud, -1, 0, 12*TILE, 5*TILE, 5*TILE, (x + i*space) - 2.5*TILE, y + selectY, 1, 1, c_white, .2
        *(finalSelection &amp;&amp; selected == i));
    draw_set_blend_mode(bm_normal);
    
    draw_sprite_part_ext(sprHud, -1, 5*TILE+i*3*TILE, 2*TILE, 3*TILE, 3*TILE, (x + i*space) - 1.5*TILE, y + selectY + TILE, 
        1, 1, _color, 1);
}

var canPlay = false;
var canShop = true;

// draw selection
if (finalSelection)
{
    draw_sprite_part_ext(sprHud, -1, TILE, 0, TILE, TILE, 0, y + selectY - 1.5*TILE, 20, 1, c_white, .4);
    var _ld = levelParams[selected];
    if (selected &lt;= global.maxLevel)
    {
        draw_text(offx, y + selectY + -1.5*TILE, _ld[0]);
        canPlay = true;
        
        //if (global.timer % 60 &gt; 30)
        draw_text_color(offx, y + selectY + 5.5*TILE, "*double tap*", _cv, _cv, _cv, _cv, _ca);
    }
    else
    {
        draw_set_halign(fa_center);
        draw_text(offx, y + selectY + -1.5*TILE, "???");
    }    
}

// draw alpha for level transition
if (state == 2)
{
    var _ld = levelParams[selected];
    //draw_text(offx, y + room_height + 8*TILE, "Invading#" + string(_ld[0]) + "...");
    draw_sprite_part_ext(sprBgMask, -1, 180, 0, 180, 320, 0, 0, 1, 1, c_white, alpha);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
