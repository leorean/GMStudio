<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mask_index = sprParticle;

bgx = 0;
bgy = 0;

x = room_width/2;
y = room_height;

xVel = 0;
yVel = 0;

state = 0;
desty = room_height;

levelParams = objControl.levelParams;
levelCount = array_length_1d(levelParams);
destx = 0;

offx = room_width/2;
space = 96;

mouse_x_prev = mouse_x;
selected = 0;

for (i = 0; i &lt; levelCount; i++)
{
    lvl[i] = instance_create((x + i*space)/* - 2.5*TILE*/, 128, objLvl);
    lvl[i].l = i;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var levelDragPressed = in(mouse_y, y + 128, y + 128+5*TILE) 
    &amp;&amp; mouse_check_button_pressed(mb_left);
var levelDragReleased = in(mouse_y, y + 128, y + 128+5*TILE) 
    &amp;&amp; mouse_check_button_released(mb_left);    
var levelDrag = in(mouse_y, y + 128, y + 128+5*TILE)
    &amp;&amp; !mouse_check_button_pressed(mb_left) &amp;&amp; mouse_check_button(mb_left);

if (state == 0) //title state
{
    if (mouse_check_button_released(mb_left))
        state = 1;
    desty = room_height;
}

if (state == 1) //selectable state
{
    if (keyboard_check_pressed(vk_backspace))
        state = 0;
    desty = 0;
        
    if (levelDrag)
    {
        if(abs(mouse_x - mouse_x_prev) &gt; 4)
            selected = -1;
            
        xVel -= (mouse_x_prev - mouse_x) / 5;
    }
    else
    {
        if (selected != -1)
        {
            destx = -(selected*space) + offx;
            xVel = (destx - x) / 10;
        }
        else
        {
            if (abs(xVel) &gt; .5)
                xVel *= .94;
            else
            {
                /*var _sel = instance_place(room_width/2, y + 128, objLvl);
                if (instance_exists(_sel))
                    selected = _sel.l;
                */
            }
        }
    }
    
    if (levelDragPressed)
    {
        xVel = 0;
        var _sel = instance_place(mouse_x, mouse_y, objLvl);
        if (instance_exists(_sel))
            selected = _sel.l;
    }
}

yVel = (desty - y) / 10;
xVel = sign(xVel)*min(abs(xVel), 10);

if (in(x + xVel, -(levelCount-1)*space + offx, offx))
    x += xVel;
else
{
    xVel = 0;
}

y += yVel;

with(objLvl)
    x += objLevelSelector.xVel;

mouse_x_prev = mouse_x;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_top);

//draw bg
bgx = (bgx - .5) % 192;
bgy = (bgy - .5) % 320;

draw_sprite(sprBackground, -1, bgx, bgy);
draw_sprite(sprBackground, -1, bgx + 192, bgy);
draw_sprite(sprBackground, -1, bgx, bgy + 320);
draw_sprite(sprBackground, -1, bgx + 192, bgy + 320);

var finalSelection = selected != -1 &amp;&amp; abs(lvl[selected].x - room_width/2) &lt; 128;

//draw levels
for (i = 0; i &lt; levelCount; i++)
{

    draw_sprite_part_ext(sprHud, -1, 0, 2*TILE, 5*TILE, 5*TILE, (x + i*space) - 2.5*TILE, y + 128, 1, 1, c_white, 1);
    draw_set_blend_mode(bm_add);
    draw_sprite_part_ext(sprHud, -1, 0, 7*TILE, 5*TILE, 5*TILE, (x + i*space) - 2.5*TILE, y + 128, 1, 1, c_white, .6);
    draw_sprite_part_ext(sprHud, -1, 0, 12*TILE, 5*TILE, 5*TILE, (x + i*space) - 2.5*TILE, y + 128, 1, 1, c_white, .2
        *(finalSelection &amp;&amp; selected == i));
    draw_set_blend_mode(bm_normal);
    draw_sprite_part(sprHud, -1, 5*TILE+i*3*TILE, 2*TILE, 3*TILE, 3*TILE, (x + i*space) - 1.5*TILE, y + 128 + TILE);
}

//draw selection
if (finalSelection)
{
    var _ld = levelParams[selected];
    draw_text(offx, y + 212, _ld[0]);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
