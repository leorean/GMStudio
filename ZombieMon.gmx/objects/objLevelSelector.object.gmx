<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width/2;
xVel = 0;

levelParams = objControl.levelParams;
levelCount = array_length_1d(levelParams);

s = 0;
destx = 0;
dragx = x;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var levelDragPressed = in(mouse_y, 128, 128+5*TILE) 
    &amp;&amp; mouse_check_button_pressed(mb_left);
var levelDragReleased = in(mouse_y, 128, 128+5*TILE) 
    &amp;&amp; mouse_check_button_released(mb_left);    
var levelDrag = in(mouse_y, 128, 128+5*TILE) 
    &amp;&amp; !mouse_check_button_pressed(mb_left) &amp;&amp; mouse_check_button(mb_left);

draw_set_alpha(1);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
    
//c = make_color_hsv((s % 2 == 0) *45, 255,255);
//draw_line_colour(0, 120,room_width, 120, c, c);

if (levelDrag)
{
    xVel += (dragx - mouse_x) / 120;
    s = (room_width - x) div (room_width);
    show_debug_message(s);
}
else
{
    dragx = mouse_x;    
    destx = -(s*(room_width)) + room_width/2;
    xVel = (destx - x) / 10;
    xVel = sign(xVel)*min(abs(xVel), 3);
}

if (abs(x - destx) &lt; room_width/3)
{
    var _ld = levelParams[s];
    draw_text(room_width/2, 212, _ld[0]);
}

xVel = sign(xVel)*min(abs(xVel), 8);

if (in(x + xVel, -(levelCount-1)*room_width + room_width/2, room_width/2))
    x += xVel;
else
{
    xVel = 0;
}

for (i = 0; i &lt; levelCount; i++)
{
    draw_sprite_part(sprHud, -1, 0, 2*TILE, 5*TILE, 5*TILE, (x + i*room_width) - 2.5*TILE, 128);
    //draw_text((x + i*room_width) - 2.5*TILE, 112, (i*room_width) + room_width/2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
