<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskBomb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objItem</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxTimer = 3*SEC;
timer = maxTimer;

radius = 2; // UPGRADEABLE
type = 0;

exploded = false;
holding = true;
free = false;

frame = 0;
fCur = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>free = !place_meeting(x, y, objSolid) &amp;&amp; !place_meeting(x, y, objBomb)
    &amp;&amp; device_mouse_y_to_gui(0) &lt; display_get_gui_height() - 2*TILE;
if (holding)
{
    timer = maxTimer;
    x = ((mouse_x) div TILE) * TILE;
    y = ((mouse_y) div TILE) * TILE;
    
    if (free)
        if (mouse_check_button_released(mb_left))
        {
            holding = false;
        }
}

if (!holding)
{
    timer = max(timer - 1, 0);
    
    if (!timer)
    {
        if (!exploded)
        {
            global.shake = true;
            global.state = G_PLAY;
            
            exploded = true;
            fCur = 0;
        }
    }
    
    depth = room_height - y + 35;
} else
    depth = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_alpha(1);

var w = display_get_gui_width();
var h = display_get_gui_height();

var xt = ((x + .5*TILE) / room_width) * w;
var yt = ((y - TILE) / room_height) * h;

if (!holding &amp;&amp; !exploded)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_text(xt, yt, ceil((timer / SEC)));
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frame = floor(fCur);

var a = 1;
var c = c_white;

if (holding)
{
    a = .5;
    if (!free) c = c_red;
}

if (!exploded)
{
    if ((timer/maxTimer) &lt; .25)
    {
        fSpeed = (.3 * (1 - (timer / maxTimer)));
        fCur = (fCur + fSpeed) % 2;
    }
    draw_sprite_part_ext(sprBomb, -1, frame*TILE, 0, TILE, TILE, x, y, 1, 1, c, a);
    
    // fuse
    var fuseFrame = ((1 - (timer / maxTimer))*5*TILE) div TILE;
    draw_sprite_part(sprBomb, -1, 8*TILE + fuseFrame*TILE, (global.timer % 10 &gt; 5)*TILE, TILE, TILE, x, y-TILE);
}
if (exploded)
{
    fCur = min(fCur + .2, 3);
    
    for (i = -radius; i &lt;= radius; i++)
    for (j = -radius; j &lt;= radius; j++)
    {
        if ((((i == 0 || j == 0) &amp;&amp; i != j) || (i == 0 &amp;&amp; j == 0))
         &amp;&amp; !place_meeting(x + i*TILE, y + j*TILE, objSolid))
        {
            instance_create(x + i*TILE, y + j*TILE, objInfector);
            
            //middle part
            if (i == 0 &amp;&amp; j == 0)
                draw_sprite_part(sprBomb, -1, 2*TILE + frame*TILE, 0*TILE, TILE, TILE, x + i*TILE, y+j*TILE);
            
            //up
            if (i == 0 &amp;&amp; j &lt; 0)
                draw_sprite_part(sprBomb, -1, frame*TILE + 4*(abs(j)==radius)*TILE, 1*TILE,TILE, TILE, x + i*TILE, y+j*TILE);
            //down
            if (i == 0 &amp;&amp; j &gt; 0)
                draw_sprite_part(sprBomb, -1, frame*TILE + 4*(abs(j)==radius)*TILE, 3*TILE,TILE, TILE, x + i*TILE, y+j*TILE);
            //left
            if (i &lt; 0 &amp;&amp; j == 0)
                draw_sprite_part(sprBomb, -1, frame*TILE + 4*(abs(i)==radius)*TILE, 4*TILE,TILE, TILE, x + i*TILE, y+j*TILE);
            //right
            if (i &gt; 0 &amp;&amp; j == 0)
                draw_sprite_part(sprBomb, -1, frame*TILE + 4*(abs(i)==radius)*TILE, 2*TILE,TILE, TILE, x + i*TILE, y+j*TILE);
        }
    }
    
    if (fCur == 3)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
