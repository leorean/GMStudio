<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
device_mouse_dbclick_enable(false);
if (os_type == os_windows)
{
    window_set_size(360, 640);
}

// for initiating the round
spawned = false;
mx_prev = mouse_x;
my_prev = mouse_y;

surf = -1; //drawing surface
global.zoom = 4;

global.fnt = font_add_sprite(sprFnt, ord(' '), true, 1);

// ++++ level data ++++

//params: name, population, density, security, npc hp

levelData[0] = importLevel("LEVEL0.tmx");
levelParams[0] = array("Smallfield", 20, 15, 0.0, 30);
levelData[1] = importLevel("LEVEL1.tmx");
levelParams[1] = array("Wellington", 60, 40, 0.1, 55);

levelData[2] = 0;
levelParams[2] = array("3", 60, 40, 0.1, 55);
levelData[3] = 0;
levelParams[3] = array("4", 60, 40, 0.1, 55);


//Wellington, Newfield, Almerst, Bloodworth, Norfolk, Strong Haven, Swordbreak, 

// ++++ define upgrades &amp; prices! ++++

//global price list for all upgrades
prices = array(0, 500, 2000, 7000, 11500, 19200, 34000, 51000, 172000, 390000, 1250000);

u_dmg[0] = array(10, 15, 25, 35, 50, 70, 85, 100, 120, 150, 175);
u_delay[0] = array(30, 28, 26, 23, 19, 17, 15, 13, 12, 10, 8);
u_infectedHp[0] = array(235, 250, 275, 300, 325, 350, 380, 400, 450, 550, 650);
u_huntSpeed[0] = array(1.1, 1.15, 1.20, 1.25, 1.3, 1.35, 1.40, 1.45, 1.50, 1.55, 1.6);
u_infectChance[0] = array(0.27, 0.31, 0.34, 0.38, 0.42, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95);
u_value[0] = array(3, 15, 27, 80, 155, 285, 423, 681, 1208, 1654, 2358);
u_coinRadius[0] = array(32, 36, 42, 48, 52, 64, 80, 96, 128, 144, 160);

//further upgrades:
//initiator upgrades, tries, money multiplier?

// ++++ pool of particles to reuse ++++
global.poolIndex = 0;
for (var i = 0; i &lt; 512; i++)
{
    global.pool[i] = instance_create(-1, -1, objParticle);
    global.pool[i].xVel = 0;
    global.pool[i].yVel = 0;
    global.pool[i].alpha = 0;
}

// ++++ LOAD/SAVE PARAMETERS ++++
global.level = 0;
global.maxLevel = 0
global.coins = 0;
global.maxTries = 1; // don't change for now

setUpgradeLevel(u_dmg, 0);
setUpgradeLevel(u_delay, 0);
setUpgradeLevel(u_infectedHp, 0);
setUpgradeLevel(u_huntSpeed, 0);
setUpgradeLevel(u_infectChance, 0);
setUpgradeLevel(u_value, 0);
setUpgradeLevel(u_coinRadius, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == GAME)
{
    if (keyboard_check_pressed(ord('R')) || keyboard_check_pressed(vk_backspace))
        room_restart();
        
    if (in(device_mouse_x_to_gui(0), 0, 1*TILE) &amp;&amp; in(device_mouse_y_to_gui(0), 0, 1*TILE))
        if (mouse_check_button_released(mb_left))
            room_goto(TITLE);
}

if (room == SHOP)
    if (keyboard_check_pressed(ord('R')) || keyboard_check_pressed(vk_backspace))
        room_goto(TITLE);

if (keyboard_check_pressed(ord('Q')))
    game_restart();
        
if (keyboard_check(vk_space))
    room_speed = 5;
else
    room_speed = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// game routine
if (global.state != G_PAUSE)
{
    global.timer = (global.timer + 1) % INFINITE;

    if (room == GAME)
    {
        // calculate population:
        zombiesLeft = 0;
        peopleOnScreen = 0;
        for (i = 0; i &lt; instance_number(objNpc); i++)
        {
            var _t = instance_find(objNpc, i);
            if (_t.state == INFECTED)
                zombiesLeft++;
            if (_t.state != INFECTED &amp;&amp; _t.state != DIE)
                peopleOnScreen++;
        }
        
        // flash
        if (global.flash)
        {
            flashAlpha = 1;
            global.flash = false;
        }
        
        // spawn initiators
        if (mouse_check_button(mb_left))
        {            
            if (!spawned &amp;&amp; point_distance(mouse_x, mouse_y, mx_prev, my_prev) &gt; 3)
            {
                if (global.tries &gt; 0)
                {
                    instance_create(clamp(mouse_x,40,room_width-40), 
                        clamp(mouse_y,40,room_height-40), objInitiator);
                    global.tries = max(global.tries - 1, 0);
                    
                    spawned = true;
                }
            }
        }
        if (mouse_check_button_released(mb_left))
            spawned = false;
        
        if (global.state == G_PLAY
            &amp;&amp; (zombiesLeft == 0 || global.kills == levelPopulation)
            &amp;&amp; global.tries == 0)
            
            gameOverTimer = max(gameOverTimer - 1 , 0);
        
        if (!gameOverTimer)
            global.state = G_OVER;
        
        if (peopleOnScreen &lt; levelDensity &amp;&amp; (global.kills &lt;= (levelPopulation - levelDensity)))
            spawnNewNpc();
    }
}
// title menu routine
if(room == TITLE)
{
    var levelDrag = in(mouse_y, 128, 128+5*TILE) 
        &amp;&amp; !mouse_check_button_pressed(mb_left) &amp;&amp; mouse_check_button(mb_left);
}

mx_prev = mouse_x;
my_prev = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Free Surface
if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.state = G_START;
gameOverTimer = 1.5*SEC;
global.timer = 0;

// clean up mess
with(objParticle) alpha = 0;

// alpha effect for starting a level / flashing
alpha = 1.5;
flashAlpha = 0;
global.flash = false;
            
//todo: load these parameters:

var _lp = levelParams[global.level];

levelPopulation = _lp[1];
levelDensity = _lp[2];
global.npcHp = _lp[4];

global.kills = 0;

// upgradeable variables:

global.coinRadius = getParamFromUpgrade(u_coinRadius);
global.dmg = getParamFromUpgrade(u_dmg);
global.delay = getParamFromUpgrade(u_delay);
global.infectedHp = getParamFromUpgrade(u_infectedHp);
global.huntSpeed = getParamFromUpgrade(u_huntSpeed);
global.infectChance = getParamFromUpgrade(u_infectChance);
global.value = getParamFromUpgrade(u_value);

global.tries = global.maxTries;

// title screen
if (room == TITLE)
    instance_create(0, 0, objLevelSelector);

// starting a level
if (room == GAME)
{
    createRoom(levelData[global.level]);

    repeat(levelDensity)
    {
        var rndx = -1;
        var rndy = -1;
        
        while(!place_free(rndx, rndy) || min(rndx, rndy) &lt; 0)
        {
            rndx = irandom(room_width div TILE - 1) * TILE;
            rndy = irandom(room_height div TILE - 1) * TILE;
        }
        var _npc = instance_create(rndx, rndy, objNpc);
    }
    
    // create initiator
    //instance_create(0, 0, objInitiator);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ++++ DRAW GUI HERE ++++

var w = display_get_gui_width();
var h = display_get_gui_height();

draw_set_alpha(1);
draw_set_color(c_white);
draw_set_font(global.fnt);

draw_set_halign(fa_right);
draw_set_valign(fa_top);

if (room == GAME)
{
    // border
    if (global.state == G_START || global.state == G_PLAY)
        draw_sprite_part_ext(sprHud, -1, TILE, 0, TILE, TILE, 0, 0, 20, 1, c_white, .3);
    
    //flash effect
    if (global.state != G_OVER)
        flashAlpha = max(flashAlpha - .05, 0);
    else
    {
        flashAlpha = min(flashAlpha + .01, 1);
        if (flashAlpha == 1 &amp;&amp; mouse_check_button_pressed(mb_left))
            room_goto(SHOP);
            
    }
    if (flashAlpha)
        draw_sprite_part_ext(sprBgMask, -1, 180, 0, 180, 320, 0, 0, 1, 1, c_black, flashAlpha);
        
    // coins
    draw_text(w - 0, 0, "$" + string(global.coins));
    
    // back icon
    draw_sprite_part(sprHud, -1, 2*TILE, 0, 1*TILE, 1*TILE, 0, 0);
    
    // game over text
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    if (global.state == G_OVER)
    {
        var gameoverText;
        if (global.kills == 0)
            gameoverText = "Everyone survived..";
        else if (global.kills &lt; levelPopulation)
            gameoverText = "Survivors:#" + string(levelPopulation - global.kills);
        else
            gameoverText = "No survivors.#Level clear!";
        draw_text(w/2, h/3, gameoverText);
    }
    
    // alpha effect
    alpha = max(alpha - .02, 0);
    if (alpha)
        draw_sprite_part_ext(sprBgMask, -1, 180, 0, 180, 320, 0, 0, 1, 1, c_white, alpha);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++SHADER++++
shader_set(shader0);
//draw_clear(c_black);

//--------------------------------------------------

//++++SURFACE++++
if (!surface_exists(surf))
{

    // this keeps the 16:9 aspect:
    /*
    zoom = min(view_hport / room_height, view_wport / room_width);
    
    view_hview = 640 / zoom; //1.7777776;//room_height;
    view_wview = 360 / zoom;
   
    // center view
    view_xview = (room_width - view_wview) / 2;
    view_yview = (room_height - view_hview) / 2;
    */
    
    view_hview = room_height;
    view_wview = room_width;
    
    var _w = view_wport;
    var _h = view_hport;

    surf = surface_create(_w, _h);
    surface_set_target(surf);
    
    draw_clear(c_black);
    surface_reset_target();
    
    //Set the view that you want to draw to the surface
    view_surface_id[0] = surf;
        
}
else
{

    //Disable alpha blending (not needed since we are drawing the whole view)
    draw_enable_alphablend(false);
    //Draw the surface stretched to the GUI layer
    
    var aspect_x = display_get_gui_width() / surface_get_width(surf);
    var aspect_y = display_get_gui_height() / surface_get_height(surf);
    
    display_set_gui_size(surface_get_width(surf) / global.zoom, surface_get_height(surf) / global.zoom);
    
    var xoffset = (surface_get_width(surf)*aspect_x) / 2;
    var yoffset = (surface_get_height(surf)*aspect_y) / 2;
    draw_surface_ext(surf,
        display_get_gui_width() / 2 - xoffset,
        display_get_gui_height() / 2 - yoffset, aspect_x, aspect_y, 0, c_white, 1);
    
    //Switch on alpha blending again for the next normal draw pass
    draw_enable_alphablend(true);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>disables mask visibility</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
