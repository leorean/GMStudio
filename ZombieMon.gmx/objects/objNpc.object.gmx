<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskNpc</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxHp = 100;
infectedHp = //TODO
dir = NONE;

xVel = 0;
yVel = 0;

state = WALK;
walkDist = 0;
angle = random(360);

target = noone;
fleeFrom = noone;

walkSpeed = 1;
huntSpeed = 1.2;
runSpeed = 1.3;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// walk around randomly
if (state == WALK)
{
    if (walkDist == 0)
    {
        walkDist = (1+random(2)) * TILE;
        angle = random(360);

    } else
    {
        angle += -6+random(12);
    }
    
    walkDist =  max(walkDist - walkSpeed, 0);
    
    xVel = lengthdir_x(walkSpeed, angle);
    yVel = lengthdir_y(walkSpeed, angle);
    dir = angleToDir(angle);
    
    if (global.timer % 30 == 0)
    {
        var maxDist = 64;
        for (i = 0; i &lt; instance_number(objNpc); i++)
        {
            var t = instance_find(objNpc, i);
            if (instance_exists(t) &amp;&amp; t != self &amp;&amp; t.state == INFECTED)
            {
                if (distance_to_object(t) &lt; maxDist)
                {
                    maxDist = distance_to_object(t);
                    fleeFrom = t;
                    state = PANIC;
                }
            }
        }
    }
}

// flee in panic
if (state == PANIC)
{
    xVel = lengthdir_x(runSpeed, angle);
    yVel = lengthdir_y(runSpeed, angle);
    dir = angleToDir(angle);

    walkDist =  max(walkDist - runSpeed, 0);
    
    if (walkDist == 0)
    {
        fleeFrom = noone;
        angle = random(360);
        walkDist = TILE;
        var maxDist = 64;
        for (i = 0; i &lt; instance_number(objNpc); i++)
        {
            var t = instance_find(objNpc, i);
            if (instance_exists(t) &amp;&amp; t != self &amp;&amp; t.state == INFECTED)
            {
                if (distance_to_object(t) &lt; maxDist)
                {
                    maxDist = distance_to_object(t);
                    fleeFrom = t;
                }
            }
        }
        if (fleeFrom != noone &amp;&amp; instance_exists(fleeFrom))
        {
            angle = point_direction(fleeFrom.x, fleeFrom.y, x, y);
        }
    }
}

// chase other npcs
if (state == INFECTED)
{
    dir = angleToDir(angle);
    walkDist =  max(walkDist - huntSpeed, 0);
    xVel = lengthdir_x(huntSpeed, angle);
    yVel = lengthdir_y(huntSpeed, angle);
    
    if (walkDist == 0)
    {
        target = noone;
        walkDist = 2*TILE;
        
        angle = random(360);
    }

    if (target == noone || !instance_exists(target))
    {
        var maxDist = 99999;
        for (i = 0; i &lt; instance_number(objNpc); i++)
        {
            var t = instance_find(objNpc, i);
            if (instance_exists(t) &amp;&amp; t != self &amp;&amp; t.state != INFECTED)
            {
                if (distance_to_object(t) &lt; maxDist)
                {
                    target = t;
                    maxDist = distance_to_object(t);
                }
            }
        }
        if (target != noone)
        {
            //target.fleeFrom = id;
        }
    }
    else
    {        
        angle = point_direction(x, y, target.x, target.y);
                        
        if (place_meeting(x, y, target))
        {
            target.state = INFECTED;
            target = noone;
        }
    }
}

// try to flee
if (state == PANIC)
{

}

if (!place_meeting(x + xVel, y, objSolid) &amp;&amp; in(x + xVel, 0, WIDTH - TILE))
    x += xVel;
else
{
    xVel = 0;
    //angle = (angle + 180) % 360;
    //walkDist += TILE;
    target = noone;
    //walkDist = 0;
}
if (!place_meeting(x, y + yVel, objSolid) &amp;&amp; in(y + yVel, 0, HEIGHT - TILE))
    y += yVel;
else
{
    yVel = 0;
    //angle = (angle + 180) % 360;
    //walkDist += TILE;
    target = noone;    
    //walkDist = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == WALK) c = c_white;
if (state == INFECTED) c = c_red;
if (state == PANIC) c = c_olive;

draw_sprite_ext(mskNpc, -1, x, y, 1, 1, 0, c, 1);

draw_text(x,y-TILE,dir);

if (target != noone)
{
    draw_line(x,y,target.x,target.y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
