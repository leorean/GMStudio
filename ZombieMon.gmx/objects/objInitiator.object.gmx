<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskInitiator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;

spawnx = x;
spawny = y;

z = 0;

dragged = false;
thrown = false;

maxTimer = 2*SEC;
timer = maxTimer;

mx = device_mouse_x(0);
my = device_mouse_y(0);

force = 0;

w = sprite_width;
h = sprite_height;

repeat(30)
{
    var _rx = x - w/2 + random(w);
    var _ry = y - h/2 + random(h);
    var _g = instance_create(_rx, _ry, objEffectGlitter);
    _g.color = make_color_hsv(170+random(30),255,200+random(55));
}

//spawn location
//x = room_width/2;
//y = room_height - h/2;

//scaling factor for gui-to-collision mapping
sx = 1;
sy = 1;

// rotational stuffs:

rotation = 0;
rotspeed = 0;
maxrotspeed = 18;

a1 = 0;
a2 = 0;
mxprev = 0;
myprev = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mx = device_mouse_x(0);
my = device_mouse_y(0);

sx = (room_width / view_wport) * global.zoom;
sy = (room_height / view_hport) * global.zoom;

if (!dragged)
{
    
    if (device_mouse_check_button(0, mb_left) &amp;&amp; in(mx,x-w/2,x+w/2) &amp;&amp; in(my,y-h/2,y+h/2))
    {
        dragged = true;
        xoff = x - mx;
        yoff = y - my;
    }
}

if (dragged &amp;&amp; !thrown)
{

    xVel = (mx - (x - xoff)) / 6;
    yVel = (my - (y - yoff)) / 6;
 
    a1 = point_direction(mx, my, x, y);
    
    if !(device_mouse_check_button_pressed(0, mb_left))
    {
        if (point_distance(mx, my, mxprev, myprev) &gt; 5)
        {
            if (abs(a2 - a1) &gt; 10)
                rotspeed += -sign(a2-a1) * .05 * point_distance(mx, my, mxprev, myprev);
        }
        else
            rotspeed *= .98;
    }
    
    if (!device_mouse_check_button(0, mb_left) &amp;&amp; max(abs(xVel),abs(yVel) &gt;= 0))
        thrown = true;
}
    rotspeed = sign(rotspeed) * min(abs(rotspeed), maxrotspeed);
    rotation += rotspeed;

if (thrown)
{
    timer = max(timer - 1, 0);
    
    if (!timer)
    {
        xVel = 0;
        yVel = 0;
        var count = 0;
        for (i = 0; i &lt; instance_number(objNpc); i++)
        {
            var t = instance_find(objNpc, i);
            if (in(t.x + 8, x - (w/2)*sx, x + (w/2)*sx) 
            &amp;&amp; in (t.y + 8, y - (h/2)*sy, y + (h/2)*sy)
            &amp;&amp; t.state == WALK)
            {
                instance_create(t.x + .5*TILE, t.y+TILE, objLightning);
                t.state = INFECTED;
                t.hp = global.infectedHp;
                global.kills++;
                count++;
            }
        }
        if (count &gt; 0)
            global.flash = true;
        
        var t = instance_create(x, y, objText);
        if (count == 0)
            t.text = "Missed";
        if (count == 1)
            t.text = "1 Hit!";
        if (count &gt; 1)
            t.text = string(count) + " Hits!";
        
        global.state = G_PLAY;
        
        instance_destroy();
    }
}

xVel = sign(xVel) * min(abs(xVel), 16);
yVel = sign(yVel) * min(abs(yVel), 16);

if (in(x + xVel, w/2 * sx, room_width-w/2 * sx))
    x += xVel * (timer / maxTimer);
else
{
    if (thrown)
        xVel = -xVel * .9;
    else
        xVel = 0;
}

if (in(y + yVel, h/2 * sy, room_height-h/2 * sy))
    y += yVel * (timer / maxTimer);
else
{
    if (thrown)
        yVel = -yVel * .9;
    else
        yVel = 0;
}

//store for next step
a2 = a1;
mxprev = mx;
myprev = my;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var _w = display_get_gui_width();
var _h = display_get_gui_height();

xt = (x / room_width) * _w;
yt = (y / room_height) * _h;

var value = max(abs(rotspeed)/(maxrotspeed) - .75, 0);

//show_debug_message(value);

if (rotspeed &lt; 0)
    color = make_colour_hsv(145, 255 * value, 255);
else if (rotspeed &gt; 0)
    color = make_colour_hsv(0, 255 * value, 255);
else
    color = c_white;

draw_sprite_ext(sprInitiator, 2, xt, yt, 1, 1, rotation, c_white,
    .6 * timer/maxTimer);
draw_sprite_ext(sprInitiator, 1, xt, yt, 1, 1, rotation, color, 
    1 * timer/maxTimer);


var fg = c_white;
if (global.timer % 4 == 0 &amp;&amp; timer/maxTimer &lt; .3)
    fg = make_color_hsv(170+random(30), 255, 200+random(55));    

draw_sprite_ext(sprInitiator, 3, xt, yt, 1, 1, rotation/10, fg, 
    .5 - timer/maxTimer);
    
/*
draw_sprite_ext(sprInitiator, 2, xt, yt, 1, 1, rotation, c_white,
    .6 * timer/maxTimer);
draw_sprite_ext(sprInitiator, 1, xt, yt, 1, 1, rotation, color, 
    1 * timer/maxTimer);

var fg = c_white;
if (timer/maxTimer &lt; .5)
{
    if (global.timer % 2 == 0)
        fg = c_white;
    else
        fg = make_color_hsv(170+random(30), 255, 200+random(55));
}

draw_sprite_ext(sprInitiator, 1, xt, yt, 1, 1, rotation/3, c_white,
    .4 - timer/maxTimer);    
if (global.timer % 5 == 0)
    draw_sprite_ext(sprInitiator, 0, xt, yt, 1, 1, -rotation, fg,
        .8 - timer/maxTimer);

if (timer/maxTimer &lt; .3)
{
    var fg = make_color_hsv(170+random(30), 255, 200+random(55));
    if (global.timer % 4 == 0)
    {
        draw_sprite_ext(sprInitiator, 3, xt-8+random(16), yt-8+random(16), 1, 1, random(360), 
            fg, .3);
        draw_sprite_ext(sprInitiator, 3, xt-8+random(16), yt-8+random(16), 1, 1, random(360), 
            c_white, 1);

    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>to hide mask</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
