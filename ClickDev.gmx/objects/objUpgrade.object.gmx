<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskUpgrade</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>index = 0;
name = "&lt;name&gt;";
desc = "&lt;description&gt;";
level = 0;
cps = 0;
price = 0;
levelPrice = 0; //calculated price for a certain level

locked = true;
canBuy = false;

cNormal0 = make_color_rgb(135,19,41);//make_color_rgb(29,67,81);
cNormal1 = make_color_rgb(183,245,49);//make_color_rgb(184,235,239);
cHighlight0 = make_color_rgb(199,61,61);//make_color_rgb(37,96,121);
cHighlight1 = make_color_rgb(211,251,255);

dy = 0;
dragged = false;

maxPressTimer = .25*SEC;
pressTimer = maxPressTimer;
ttAlpha = 0; //tooltip alpha

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
depth = -101-index;

x = 4*TILE;
y = GROUND+3.5*TILE+index*3*TILE-global.u*3*TILE;

//todo: resource-dependant, not upgrade dependant?
//if (index == 0 || (index &gt; 0 &amp;&amp; global.upgrade[index-1].level &gt; 0))
if (index == 0 || (index &gt; 0 &amp;&amp; global.cmax &gt;= 0.5*price))
    locked = false;

if (index &gt;= global.u &amp;&amp; index &lt;= global.u+2)
    visible = true;
else
    visible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++begin++++
if (locked) exit;
draw_set_alpha(1);


//set properties

//levelPrice = floor(price * power(1.2,(0.2)*(level))*(level));    //1.2^​(0.2*​x)*​x
//levelPrice = floor(price + price * exp(level/5)*level);
levelPrice = price * power(1.15,level);

if (global.c &lt; levelPrice)
    canBuy = false;
else
    canBuy = true;

pressed = in(mouse_x,x,x+8*TILE)&amp;&amp;in(mouse_y,y+1,y+3*TILE-1)&amp;&amp;mouse_check_button(mb_left);

var color;
if (!canBuy)
{
    if (!pressed) color = cNormal0 else color = cHighlight0;
}
else
{
    if (!pressed) color = cNormal1 else color = cHighlight1;
    
    /*
    TODO: buy here
    */
    if (in(mouse_x,x,x+9*TILE)&amp;&amp;in(mouse_y,y,y+3*TILE)&amp;&amp;mouse_check_button_released(mb_right))
    {
        global.c -= levelPrice;
        level++;
        var txt = instance_create(x+5*TILE,y,objText);
        txt.text = "Upgrade!";
    }
}

draw_set_color(color);


if (level &gt; 0)
    draw_sprite_part(sprGfx,-1,WIDTH+TILE+pressed*10*TILE,2*TILE,10*TILE,3*TILE,x,y);
else
    draw_sprite_part(sprGfx,-1,WIDTH+21*TILE,2*TILE,10*TILE,3*TILE,x,y);
//    draw_sprite_part_ext(sprGfx,-1,WIDTH+TILE+pressed*10*TILE,2*TILE,10*TILE,3*TILE,x,y,1,1,c_white,.5);

//++++draw icon+++
if (level &gt; 0)
    draw_sprite_part(sprGfx,-1,index*2*TILE,HEIGHT,2*TILE,2*TILE,x,y);
else
    draw_sprite_part_ext(sprGfx,-1,index*2*TILE,HEIGHT,2*TILE,2*TILE,x,y,1,1,c_black,.5);


draw_set_font(fntUpgrade);

//++++draw level++++
draw_set_valign(fa_top);
draw_set_halign(fa_right);

if (level &gt; 0)
    draw_text(x+10*TILE,y+.3*TILE,string(level)+" ");

draw_set_font(global.fntDefault);

//++++name++++
draw_set_halign(fa_left);
if (level &gt; 0)
    draw_text_ext(x+2*TILE+2,y+1,string(name),TILE,5*TILE);
else
{
    draw_text_color(x+2*TILE+2,y+1,string(name),c_black,c_black,c_black,c_black,.5);
}
//draw_text(x+2*TILE+2,y+1,string(name));

//++++price++++

draw_set_font(global.fntDefault);
draw_set_halign(fa_right);
draw_text(x+10*TILE-2,y+2*TILE-1,"" + string(bigNumber(levelPrice))+"@ ");

//+++cps+++++
/*
draw_set_halign(fa_right);
var cpsl = cps*(level+1);
if (cpsl&gt;1000) cpsl = bigNumber(cpsl);
draw_text(x+10*TILE,y+2*TILE-1," @ " + string(cpsl) + "/sec. ");
*/

//++++TOOLTIP++++

if (pressed) pressTimer = max(pressTimer-1,0);
else pressTimer = maxPressTimer;

if (!pressTimer)// &amp;&amp; mouse_check_button(mb_left))
{
    ttAlpha = min(ttAlpha+.04,1);
    var wx = clamp(mouse_x-6.5*TILE,0,WIDTH-13*TILE);
    var wy = clamp(mouse_y-8*TILE,y-7*TILE,y);
    
    draw_sprite_part_ext(sprGfx,-1,WIDTH,5*TILE,13*TILE,7*TILE,wx,wy,1,1,c_white,ttAlpha);
    draw_set_alpha(ttAlpha);
    
    draw_set_font(global.fntDefault);
    
    if (!canBuy) draw_set_color(cNormal0) else draw_set_color(cNormal1);
    draw_set_halign(fa_right);
    draw_text(wx+13*TILE-4,wy+4,string(bigNumber(levelPrice))+"@");
    
    
    draw_set_color(make_color_rgb(137,174,193));
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    //++++name++++
    //var n = "???";
    //if (level &gt; 0) n = name;
    draw_text(wx+4,wy+4," "+string(name));
    
    //++++description++++
    var d = "Double-tap to buy.";
    if (level &gt; 0) d = desc;
    draw_set_halign(fa_left);
    draw_text_ext(wx+4,wy+2*TILE+4," "+string(d),TILE,12*TILE);
    
    draw_set_halign(fa_right);
    //++++lv++++
    draw_text(wx+13*TILE,wy+TILE+4," Lv. "+string(level)+" ");
    
    if (level &gt; 0)
    {
        //++++single cps++++
        draw_text(wx+13*TILE,wy+3.5*TILE,string(bigNumber(cps))+"@ p.s. each ");
        
        //++++overall cps++++
        draw_text(wx+13*TILE,wy+4.5*TILE,string(bigNumber(level*cps))+"@ p.s. total ");
    } 
} else
    ttAlpha = 0;

/*
if (in(mouse_x,x,x+2*TILE)&amp;&amp;in(mouse_y,y,y+3*TILE))
{
    pressed = true;
    
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
