<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
surf = -1;

mask_index = mskPixel;

global.c = 0; //codes, currency, whatever
global.cps = 0.00; //currency per sec
global.cpc = 1; //currency per click
global.combo = 0; //currency per click

global.level = 0;
global.xp = 0;
global.xpMax = 0;

global.timer = 0;

global.fntDefault = font_add_sprite(sprFntDefault,ord(' '),true,1);
global.fntBig = font_add_sprite(sprFntBig,ord(' '),true,1);
global.fntNormal = font_add_sprite(sprFntNormal,ord(' '),true,1);

global.creationDate = date_current_datetime();
global.age = 0; //in days

instance_create(0,0,objBackground);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++debug keys++++
if (keyboard_check_pressed(ord('R')))
    game_restart();

if (keyboard_check(ord('E')))
{
    global.xp += min(global.c*.1,10000);
    global.c += min(global.c*.1,10000);
}
if (keyboard_check(ord('1')))
    global.cps *= 1.1;
if (keyboard_check(ord('2')))
    global.cps = max(global.cps-1,1);

if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace))
{
    game_end();
}

//++++game routine++++

global.age = floor(date_day_span(global.creationDate, date_current_datetime()));

global.timer = (global.timer + 1) % INFINITE;

global.c += ((global.cps) / SEC);

global.cpc = 1+(global.combo div 30);
//global.cpc = global.level;

//++++level up++++
if (global.xp &gt;= global.xpMax || keyboard_check_pressed(ord('T')))
{
    global.xp = 0;
    global.level++;

    var a = global.level+1;
    //1.2^​(0.2*​x)*​x
    global.xpMax = 10*((global.xpMax + 300+(30 * (a div 3) + 2*(a div 15) + 10*power((a+1) div 3,2) + 150*(a-1))) div 10);
    
    if (global.level &gt; 1)
    {
        var txt = instance_create(WIDTH/2,player.y,objText);
        txt.fnt = global.fntBig;
        txt.text = "Level Up!";
        txt.yVel = -.5;
        txt.alpha = 2;
        
        immersion_play_effect(30);
        
    }
}

global.c = min(global.c,999.999*power(1000,4));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//

//instance_create(0,15*TILE,objGround);

player = instance_create(WIDTH/2,13.5*TILE,objPlayer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++SHADER++++
//shader_set(shader0);
draw_clear(c_black);

//--------------------------------------------------

//++++SURFACE++++
if (!surface_exists(surf))
{
    //Create (or recreate) the surface when needed
    //QUALITY:
    var w,h;
    //w = view_wport[0]/2; h = view_hport[0]/2;
    w = view_wview[0]; h = view_hview[0];
    surf = surface_create(w,h);
    surface_set_target(surf);
    
    draw_clear(c_black);
    surface_reset_target();
    //Set the view that you want to draw to the surface
    view_surface_id[0] = surf;
        
}
else
{

    //Disable alpha blending (not needed since we are drawing the whole view)
    draw_enable_alphablend(false);
    //Draw the surface stretched to the GUI layer

    var aspect_x, aspect_y;
    var xoffset, yoffset;
    
    if(os_type == os_windows)
    {
        aspect_x = display_get_gui_width() / surface_get_width(surf);
        aspect_y = display_get_gui_height() / surface_get_height(surf);
        
        display_set_gui_size(surface_get_width(surf),surface_get_height(surf));
        
        xoffset = (surface_get_width(surf)*aspect_x)/2;
        yoffset = (surface_get_height(surf)*aspect_y)/2;
        
        draw_surface_ext(surf,display_get_gui_width()/2-xoffset,display_get_gui_height()/2-yoffset,aspect_x,aspect_y,0,c_white,1);  
    }
    else if (os_type == os_android)
    {
        aspect_x = display_get_width() / surface_get_width(surf);
        aspect_y = display_get_height() / surface_get_height(surf);

        xoffset = (surface_get_width(surf)*aspect_x)/2;
        yoffset = (surface_get_height(surf)*aspect_y)/2;

        draw_surface_ext(surf,window_get_width()/2-xoffset,window_get_height()/2-yoffset,aspect_x,aspect_y,0,c_white,1);
    }    
    
    //Switch on alpha blending again for the next normal draw pass
    draw_enable_alphablend(true);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
