<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
randomize();

surf = -1;

mask_index = mskPixel;

global.c = 0; //codes, currency, whatever
global.cps = 0.00; //currency per sec
global.cpc = 0.1; //currency per click
global.cmax = 0; //maximum currency obtained, ever
global.combo = 0; //currency per click

global.level = 0;
global.xp = 0;
global.xpMax = 0;

global.timer = 0;

global.fntDefault = font_add_sprite(sprFntDefault,ord(' '),true,1);
global.fntBig = font_add_sprite(sprFntBig,ord(' '),true,1);
global.fntNormal = font_add_sprite(sprFntNormal,ord(' '),true,1);

global.creationDate = date_current_datetime();
global.age = 0; //in days

instance_create(0,0,objBackground);

//+++++++++++++++++++++
//++++UPGRADE STUFF++++
//+++++++++++++++++++++

global.u = 0;
global.uMax = 5; //maximum upgrades (all)
global.ulMax = 0; //maximum viewable/unlocked upgrades

global.upgrade[0] = instance_create(0,0,objUpgrade);
global.upgrade[0].index = 0; global.upgrade[0].name = "Wool";
global.upgrade[0].desc = "The more wool, the better!";
global.upgrade[0].price = 1.5; global.upgrade[0].cps = 0.01;

global.upgrade[1] = instance_create(0,0,objUpgrade);
global.upgrade[1].index = 1; global.upgrade[1].name = "Catnip";
global.upgrade[1].desc = "Can't spell cat without catnip!";
global.upgrade[1].price = 10; global.upgrade[1].cps = 0.05;

global.upgrade[2] = instance_create(0,0,objUpgrade);
global.upgrade[2].index = 2; global.upgrade[2].name = "Fluff";
global.upgrade[2].desc = "Fluff. Fluffy fluff. ^-^";
global.upgrade[2].price = 60; global.upgrade[2].cps = 0.3;

global.upgrade[3] = instance_create(0,0,objUpgrade);
global.upgrade[3].index = 3; global.upgrade[3].name = "Better Snacks!";
global.upgrade[3].desc = "Keep that tummy happy!";
global.upgrade[3].price = 350; global.upgrade[3].cps = 1;

global.upgrade[4] = instance_create(0,0,objUpgrade);
global.upgrade[4].index = 4; global.upgrade[4].name = "Purrificator";
global.upgrade[4].desc = "Purr louder than a firetruck. :)";
global.upgrade[4].price = 1200; global.upgrade[4].cps = 3.5;

global.upgrade[5] = instance_create(0,0,objUpgrade);
global.upgrade[5].index = 5; global.upgrade[5].name = "Rubber ducky.";
global.upgrade[5].desc = "For the best bath time ever!";
global.upgrade[5].price = 4500; global.upgrade[5].cps = 10;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++debug keys++++
if (keyboard_check_pressed(ord('R')))
    game_restart();

/*if (keyboard_check(ord('E')))
{
    global.xp += min(global.c*.1,10000);
    global.c += min(global.c*.1,10000);
    global.cmax += min(global.cmax*.1,10000);
}*/

if (keyboard_check(ord('E')))
{
    global.c *= 2;
}

if (keyboard_check_pressed(ord('I')))
    global.level++;
    
show_debug_message(global.c);
    
if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace))
{
    game_end();
}

if (mouse_wheel_down())
    global.u = min(global.u+1,global.ulMax);
if (mouse_wheel_up())
    global.u = max(global.u-1,0);
    
if (keyboard_check_pressed(ord('J')))
{
    var up = collision_point(mouse_x,mouse_y,objUpgrade,false,true);
    if (instance_exists(up))
        global.upgrade[up.index].level++;
}

//++++SET UPGRADE LOCKS++++
for (var i = 0;i&lt;=global.uMax;i++)
{
    if (!global.upgrade[i].locked)
        global.ulMax = max(i,global.ulMax);
        
}
//show_debug_message(global.ulMax);

//++++game routine++++

//global.age = floor(date_day_span(global.creationDate, date_current_datetime()));
if (keyboard_check_pressed(ord('F')))
global.age++;

global.timer = (global.timer + 1) % INFINITE;

//calculate total clicks per second
var cpsi = 0;
for(var i = 0; i &lt;= global.ulMax; i++)
{
    cpsi += global.upgrade[i].level*global.upgrade[i].cps;
}
global.cps = cpsi;

global.c += ((global.cps) / SEC);
global.cmax += ((global.cps) / SEC);

//calculate currency per click, based on player level

global.cpc = 0.1*global.level + .1*power(global.level-1,2);
/*var cpci = .1;
for(var i = 0; i &lt;= global.ulMax-1; i++)
{
    cpci += .1*power(1+i,global.upgrade[i].level);
}
global.cpc = cpci;*/

//++++level up++++
global.xpMax = 25*power(1.9,global.level-1);

if (global.xp &gt;= global.xpMax || keyboard_check_pressed(ord('T')))
{
    global.xp = 0;
    global.level++;

    var a = global.level+1;
    
    if (global.level &gt; 1)
    {
        var txt = instance_create(WIDTH/2,player.y,objText);
        txt.fnt = global.fntBig;
        txt.text = "Level Up!";
        txt.yVel = -.5;
        txt.alpha = 2;
        
        //immersion_play_effect(30);
        
    }
}

//++++end variables++++
global.c = min(global.c,999.999*power(1000,9));
global.cmax = min(global.cmax,999.999*power(1000,9));
mouse_yprev = mouse_y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//

//instance_create(0,15*TILE,objGround);

player = instance_create(WIDTH/2,13.5*TILE,objPlayer);

scrollbar = instance_create(0,0,objScrollBar);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++SHADER++++
//shader_set(shader0);
draw_clear(c_black);

//--------------------------------------------------

//++++SURFACE++++
if (!surface_exists(surf))
{
    //Create (or recreate) the surface when needed
    //QUALITY:
    var w,h;
    //w = view_wport[0]/2; h = view_hport[0]/2;
    w = view_wview[0]; h = view_hview[0];
    surf = surface_create(w,h);
    surface_set_target(surf);
    
    draw_clear(c_black);
    surface_reset_target();
    //Set the view that you want to draw to the surface
    view_surface_id[0] = surf;
        
}
else
{

    //Disable alpha blending (not needed since we are drawing the whole view)
    draw_enable_alphablend(false);
    //Draw the surface stretched to the GUI layer

    var aspect_x, aspect_y;
    var xoffset, yoffset;
    
    if(os_type == os_windows)
    {
        aspect_x = display_get_gui_width() / surface_get_width(surf);
        aspect_y = display_get_gui_height() / surface_get_height(surf);
        
        display_set_gui_size(surface_get_width(surf),surface_get_height(surf));
        
        xoffset = (surface_get_width(surf)*aspect_x)/2;
        yoffset = (surface_get_height(surf)*aspect_y)/2;
        
        draw_surface_ext(surf,display_get_gui_width()/2-xoffset,display_get_gui_height()/2-yoffset,aspect_x,aspect_y,0,c_white,1);  
    }
    else if (os_type == os_android)
    {
        aspect_x = display_get_width() / surface_get_width(surf);
        aspect_y = display_get_height() / surface_get_height(surf);

        xoffset = (surface_get_width(surf)*aspect_x)/2;
        yoffset = (surface_get_height(surf)*aspect_y)/2;

        draw_surface_ext(surf,window_get_width()/2-xoffset,window_get_height()/2-yoffset,aspect_x,aspect_y,0,c_white,1);
    }    
    
    //Switch on alpha blending again for the next normal draw pass
    draw_enable_alphablend(true);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//HUD

draw_set_alpha(1);
draw_sprite_part(sprGfx,-1,0,0,WIDTH,101,0,0);

draw_set_color(c_white);
draw_set_font(global.fntDefault);

draw_set_halign(fa_right);
draw_set_valign(fa_top);

draw_set_halign(fa_center);
draw_set_valign(fa_center);

strc = bigNumber(global.c);

draw_set_font(global.fntNormal);
draw_text(WIDTH/2,1*TILE+4,""+strc+" @");

draw_set_font(global.fntDefault);
draw_text(WIDTH/2,1*TILE+30,""+string(global.cps)+"@ per sec.");

//++++level progress++++
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(global.fntDefault);
draw_sprite_part(sprGfx,-1,WIDTH,0,WIDTH-TILE,.5*TILE,.5*TILE,4.5*TILE);
draw_sprite_part(sprGfx,-1,WIDTH,.5*TILE,(WIDTH-TILE)*(global.xp/global.xpMax),.5*TILE,.5*TILE,4.5*TILE);
draw_text(0,5*TILE,"  "+string(bigNumber(global.xp))+"/"+string(bigNumber(global.xpMax)));
draw_set_halign(fa_right);
draw_text(WIDTH,5*TILE,"Lv."+string(global.level)+"  ");

//++++STATS++++

draw_set_font(global.fntDefault);
draw_set_halign(fa_center);
draw_set_valign(fa_top);

//icon %
//draw_text(2.75*TILE,17.5*TILE,string(round(player.happiness))+"%");
//draw_text(6.25*TILE,17.5*TILE,string(round(player.sleepiness))+"%");
//draw_text(9.75*TILE,17.5*TILE,string(round(player.tidiness))+"%");
//draw_text(13.25*TILE,17.5*TILE,string(round(player.hungriness))+"%");

//happiness
//draw_sprite_part(sprGfx,-1,WIDTH+2*TILE,TILE,2*TILE,TILE,1.75*TILE,16.5*TILE);
draw_sprite_part(sprGfx,-1,WIDTH,TILE,(player.happiness/100)*2*TILE,TILE,1.5*TILE+1,16.5*TILE);

//sleepiness
//draw_sprite_part(sprGfx,-1,WIDTH+2*TILE,TILE,2*TILE,TILE,1.75*TILE,18.5*TILE);
draw_sprite_part(sprGfx,-1,WIDTH,TILE,(player.sleepiness/100)*2*TILE,TILE,1.5*TILE+1,18*TILE);

//tidiness
//draw_sprite_part(sprGfx,-1,WIDTH+2*TILE,TILE,2*TILE,TILE,1.75*TILE,20.5*TILE);
draw_sprite_part(sprGfx,-1,WIDTH,TILE,(player.tidiness/100)*2*TILE,TILE,1.5*TILE+1,19.5*TILE);

//hungriness
//draw_sprite_part(sprGfx,-1,WIDTH+2*TILE,TILE,2*TILE,TILE,1.75*TILE,22.5*TILE);
draw_sprite_part(sprGfx,-1,WIDTH,TILE,(player.hungriness/100)*2*TILE,TILE,1.5*TILE+1,21*TILE);

//age
//draw_set_halign(fa_left);
//draw_text(0,HEIGHT-TILE-1," Age: "+string(global.age)+" Days");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
