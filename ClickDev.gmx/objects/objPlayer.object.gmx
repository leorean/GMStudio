<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-25</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;
yGrav = .07;

dir = RIGHT;

state = IDLE;
stateTimer = 3*SEC;
statePrev = state;

happiness = 50;
tidiness = 50;
sleepiness = 50;
hungriness = 100;

w = abs(bbox_left-bbox_right);
h = abs(bbox_top-bbox_bottom);

fCur = 0;
fMax = 2;
frame = 0;

stateTimer = 0;

onGround = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++begin variables++++
if (statePrev != state) fCur = 0;

//++++state stuff++++

if (hungriness &lt; 30 || tidiness &lt; 30 || sleepiness &lt; 30)
    happiness = max(happiness - .005,0);
    
if (state == WALK)
{
    xVel = sign(dir)*.5;
    if (bbox_left + xVel &lt;= 0 || bbox_right + xVel &gt;= WIDTH)
    {
        xVel = 0;
        dir = -dir;
    }
}

if (state == SLEEP)
{
    //purrr
    //if (global.timer % (1.5*SEC) == 0)
    //    immersion_play_effect(41);
    
    sleepiness = min(sleepiness + .01,100);
} else
{
    sleepiness = max(sleepiness - .01,0);
    if (sleepiness &lt;= 20)
        happiness = max(happiness -.02,0);
}

if (state == EAT)
{
    hungriness = min(hungriness+.1,100);
} else
    hungriness = max(hungriness-.008,0);

if (state == CLEAN)
{
    tidiness = min(tidiness+.05,100);
}

if (state == YAWN)
{
    //after animation, immediately go to state change
    if (fCur &gt;= fMax-fSpeed)
        stateTimer = 0;
}

if (true)
{

    for (i = 0; i &lt; 5; i++)
    if (device_mouse_check_button_pressed(i,mb_any))
        if (collision_circle(device_mouse_x(i),device_mouse_y(i),TILE,objPlayer,true,false))
        {
            if (state != SLEEP)
            {
                if (happiness &lt; 100 &amp;&amp; sleepiness &gt; 30 &amp;&amp; tidiness &gt; 30 &amp;&amp; hungriness &gt; 30)
                {
                    xVel = lengthdir_x(1,point_direction(device_mouse_x(i),device_mouse_y(i),x,y));
                    yVel = min(-1,lengthdir_y(1,point_direction(device_mouse_x(i),device_mouse_y(i),x,y)));
                    
                    global.xp += global.cpc;
                    
                    global.c += global.cpc;
                    
                    var txt = instance_create(device_mouse_x(i)-2+random(4),device_mouse_y(i)-2+random(4)-TILE,objText);
                    txt.text = "+"+string(global.cpc)+"";
                
                    happiness = min(happiness+1,100);
                    hungriness = max(hungriness-.1,0);
                                
                    
                    state = HAPPY;
                                                    
                } else
                {
                    happiness = max(happiness-1,0);
                    
                    //if (onGround)
                    //    yVel = -0;
                    //xVel = lengthdir_x(1,point_direction(device_mouse_x(i),device_mouse_y(i),x,y));
                        
                    state = IDLE;
                }
                
                tidiness = max(tidiness-.5,0);
            
            } else //wake up
                state = IDLE;
            
            stateTimer = 2*SEC;            
            
        }
    
}

//++++state transitions++++

stateTimer = max(stateTimer - 1, 0);

if (!stateTimer)
{
    stateTimer = choose(1,2,3)*SEC;
    
    switch(state)
    {
        case HAPPY:
            //all needs satisfied
            if (happiness &gt; 60 &amp;&amp; sleepiness &gt; 30 &amp;&amp; tidiness &gt; 30 &amp;&amp; hungriness &gt; 30)
                state = HAPPY;
            else
                state = IDLE;         
        break;
        case IDLE:
            state = choose(WALK,IDLE);
            
            if (state == WALK)
                dir = choose(LEFT,RIGHT);
            
            if (tidiness &lt; 50 &amp;&amp; min(hungriness,sleepiness,tidiness) == tidiness)
                state = choose(IDLE,CLEAN);
                
            if (state != WALK &amp;&amp; min(hungriness,sleepiness,tidiness) == sleepiness)
            {
                if (sleepiness &lt; 50)
                    state = choose(IDLE,YAWN);
                if (sleepiness &lt; 25)
                    state = SLEEP;              
            }
            if (hungriness &lt; 30 &amp;&amp; min(hungriness,sleepiness,tidiness) == hungriness)
                state = EAT; //TODO: if food is here
        break;
        case WALK:
            state = choose(WALK,IDLE);
        break;
        case SLEEP:
            if (sleepiness == 100)
                state = choose(SLEEP,IDLE);
            else if (hungriness &lt;= 30 || tidiness &lt;= 30)
                state = IDLE;
        break;
        case CLEAN:
            if (tidiness &gt;= 80)
                state = choose(CLEAN,IDLE);
        break;
        case EAT:
            if (hungriness == 100)
                state = IDLE;
        break;
        case YAWN:
                state = IDLE;
                stateTimer = 1*SEC;
            //if (sleepiness &lt;= 20)
            //    state = choose(YAWN,IDLE);
        break;
        
    }

}



//++++physics+++++

onGround = place_meeting(x,y+1,objGround)&amp;&amp;yVel&gt;=0;

yVel += yGrav;

if (y +yVel &lt; 10.5*TILE)
    yVel = -yVel/4;

if (!place_meeting(x,y+yVel,objGround))
    y += yVel;
else
{
    yVel = 0;
    
    if(state == IDLE || state == HAPPY)
        xVel *= .9;
   
}

if (bbox_left + xVel &gt; 0 &amp;&amp; bbox_right + xVel &lt; WIDTH)
    x += xVel;
else
    xVel = -xVel;
    
//++++end variables++++
statePrev = state;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//var row = 0;
switch(state)
{
    case IDLE:
        row = 1;
        fSpeed = .05;
        fMax = 2;        
    break;
    case HAPPY:
        row = 0;
        fSpeed = .1;
        fMax = 2;
    break;
    case WALK:
        row = 2;
        fSpeed = .15;
        fMax = 4;
    break;    
    case SLEEP:
        row = 3;
        fSpeed = .05;
        fMax = 4;
    break;
    case CLEAN:
        row = 4;
        fSpeed = .1;
        fMax = 4;
    break;
    case EAT:
        row = 5;
        fSpeed = .1;
        fMax = 2;
    break;
    case YAWN:
        row = 6;
        if (frame == 2)
            fSpeed = .03;
        else
            fSpeed = .1;
        fMax = 4;
    break;    
}

if (!onGround &amp;&amp; (state == HAPPY || state == IDLE)) col = 2;
    else col = 0;

fCur = (fCur + fSpeed) % fMax;
frame = floor(fCur);

draw_sprite_part_ext(sprPlayer,-1,frame*3*TILE+col*3*TILE,row*3*TILE,3*TILE,3*TILE,floor(x)+1.5*TILE-3*TILE*(dir==RIGHT),floor(y)-1.5*TILE,sign(dir),1,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
