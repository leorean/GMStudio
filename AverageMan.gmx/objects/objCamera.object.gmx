<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = NONE;
state = IDLE;
spd = 8;

xo = x;
yo = y;

colL=noone;
colR=noone;
colU=noone;
colD=noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview[0] = x;
view_yview[0] = y;

if (state == IDLE)
{
    if (global.state == G_CAMMOVE)
        global.state = G_PLAY;
    
    xo = x;
    yo = y;

    dir = NONE;

    if (global.state != G_START)
    {
        colR = collision_line(x+WIDTH,y+.5*TILE,x+WIDTH,y+HEIGHT-.5*TILE,objCamStop,false,true);
        colL = collision_line(x-TILE,y+.5*TILE,x-TILE,y+HEIGHT-.5*TILE,objCamStop,false,true);
        colU = collision_line(x+.5*TILE,y-TILE,x+WIDTH-.5*TILE,y-TILE,objCamStop,false,true);
        colD = collision_line(x+.5*TILE,y+HEIGHT,x+WIDTH-.5*TILE,y+HEIGHT,objCamStop,false,true);
        
        if (objPlayer.cx &gt; x+WIDTH/2 &amp;&amp; !colR) x = clamp(objPlayer.cx-WIDTH/2,0,room_width-WIDTH);
        if (objPlayer.cx &lt; x+WIDTH/2 &amp;&amp; !colL) x = clamp(objPlayer.cx-WIDTH/2,0,room_width-WIDTH);
        if (objPlayer.cy &gt; y+HEIGHT/2 &amp;&amp; !colD) y = clamp(objPlayer.cy-HEIGHT/2,0,room_height-HEIGHT)
        if (objPlayer.cy &lt; y+HEIGHT/2 &amp;&amp; !colU) y = clamp(objPlayer.cy-HEIGHT/2,0,room_height-HEIGHT);
        
        if (objPlayer.bbox_left &gt; x+WIDTH &amp;&amp; x &lt; room_width-WIDTH)
        {
            dir = RIGHT;
            state = WALK;
        } else if (objPlayer.bbox_right &lt; x &amp;&amp; x &gt; 0)
        {
            dir = LEFT;
            state = WALK;
        } else if (objPlayer.bbox_top &gt; y+HEIGHT &amp;&amp; y &lt; room_height-HEIGHT)
        {
            dir = DOWN;
            state = WALK;
        } else if (objPlayer.bbox_bottom &lt; y &amp;&amp; y &gt; 0)
        {
            dir = UP;
            state = WALK;
        }
    }
    
}
if (state == WALK &amp;&amp; global.state != G_START)
{
    if (global.state == G_PLAY)
        global.state = G_CAMMOVE;

    switch (dir)
    {
        case LEFT:
            objPlayer.x -= 1.5*TILE/WIDTH*spd;
            x -= spd;
            if (x &lt; xo - WIDTH-TILE)
            {
                x = xo - WIDTH-TILE;
                state = IDLE;
            }
        break;
        case RIGHT:
            objPlayer.x += 1.5*TILE/WIDTH*spd;
            x += spd;
            if (x &gt; xo + WIDTH+TILE)
            {
                x = xo + WIDTH+TILE
                state = IDLE;
            }
        break;
        case UP:
            objPlayer.y -= 1.5*TILE/HEIGHT*spd;
            y -= spd;
            if (y &lt; yo -HEIGHT-TILE)
            {
                y = yo - HEIGHT-TILE;
                state = IDLE;
            }
        break;
        case DOWN:
            objPlayer.y += 1.5*TILE/HEIGHT*spd;
            y += spd;
            if (y &gt; yo + HEIGHT+TILE)
            {
                y = yo + HEIGHT+TILE;
                state = IDLE;
            }
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_alpha(1);
//draw_set_color(make_color_rgb(39,151,255));
//draw_rectangle(x,y,x+WIDTH,y+HEIGHT,0);
draw_clear(c_white);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
