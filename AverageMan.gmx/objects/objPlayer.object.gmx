<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
starty = view_yview[0];
//y = view_yview[0]-2*TILE;

cx = x;
cy = y;

dir = RIGHT;
state = SPAWN;
statePrev = state;
xVel = 0;
yVel = 0;
yGrav = .3;

fCur = 0;
fMax = 0;
frame = 0;
fSpeed = 0;

onGround = false;
onLadder = false;
attacking = false;
attackDelay = 0; //cooldown to shoot
jumped = false;
jumpDist = false;

invincible = 0;
maxInvincible = 1*SEC;

maxHp = 30;
hp = maxHp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == G_START)
{
    if (starty &lt; y &amp;&amp; objControl.fade &lt;= 0)
    {
        state = SPAWN;
        starty = clamp(starty+8,view_yview[0]-2*TILE,y);
        fCur = 0;
    }
    if (starty == y)
    {
        if (fCur &gt;= (fMax-fSpeed))
        {
            global.state = G_PLAY;
            state = IDLE;
        }
    }
    
}
if (global.state == G_PLAY)
{
    cx = x;
    cy = y+TILE;
    //++++input++++
    var kLeft = ((keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right))) || (instance_exists(global.dPad) &amp;&amp; global.dPad.kLeft &amp;&amp; global.dPad.forceX &gt;= .3);
    var kRight = ((keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left))) || (instance_exists(global.dPad) &amp;&amp; global.dPad.kRight &amp;&amp; global.dPad.forceX &gt;= .3);
    var kUp = keyboard_check(vk_up) || (instance_exists(global.dPad) &amp;&amp; global.dPad.kUp &amp;&amp; global.dPad.forceY &gt;= .35);
    var kDown = keyboard_check(vk_down) || (instance_exists(global.dPad) &amp;&amp; global.dPad.kDown &amp;&amp; global.dPad.forceY &gt;= .35);
    var kJump = keyboard_check(ord('A')) || (instance_exists(global.btnJump)&amp;&amp; global.btnJump.pressing);
    var kJumpPressed = keyboard_check_pressed(ord('A')) || (instance_exists(global.btnJump)&amp;&amp; global.btnJump.pressed);
    var kAttack = keyboard_check(ord('S')) || (instance_exists(global.btnAttack)&amp;&amp; global.btnAttack.pressing);
    
    var spd = 2;
    if (os_type == os_android) spd = 2*objDPad.forceX;
    
    //++++routine++++
    onGround = (place_meeting(x,y+1,objSolid)||(place_meeting(x,y+1,objLadder) &amp;&amp; !place_meeting(x,y,objLadder))) &amp;&amp; yVel &gt;= 0;
    if (((kUp || kDown) &amp;&amp; !kJump) || state == LADDER || (kJumpPressed &amp;&amp; state != LADDER) &amp;&amp; !invincible)
        &amp;&amp; !(kDown &amp;&amp; collision_point(x,bbox_bottom+1,objSolid,false,true))
            onLadder = collision_point(cx,bbox_bottom-1,objLadder,false,true);
    else
        onLadder = noone;
        
    if (yVel &gt;= 0)
        onPlatform = collision_point(cx,bbox_bottom+1,objPlatform,true,true);
    else
        onPlatform = noone;
    
    if (onPlatform)
    {
        onGround = true;
        y = onPlatform.y - 2*TILE;
    }
    /*
        if ((((kUp || kDown) &amp;&amp; !kJump) || ((state == LADDER) || (kJump &amp;&amp; state != LADDER &amp;&amp; yVel &gt; 0)) &amp;&amp; !(kJump &amp;&amp; kDown)) &amp;&amp; !invincible)
        &amp;&amp; !(kDown &amp;&amp; collision_point(x,bbox_bottom+1,objSolid,false,true))
            onLadder = collision_point(cx,bbox_bottom-1,objLadder,false,true);
    else
        onLadder = noone;
    */
    
    //catch the ladder below
    if (collision_point(x,bbox_bottom+2,objLadder,false,true)
    &amp;&amp; !collision_point(x,bbox_bottom-1,objLadder,false,true)
    &amp;&amp; kDown)
        y++;
    
    enemy = instance_place(x,y,objEnemy);
    
    if (instance_exists(enemy) &amp;&amp; !invincible)
    {
        xVel = -2*sign(dir);
        yVel = -3;
        invincible = maxInvincible;
        hp = max(hp-enemy.dmg,0);
        enemy = noone;
        onPlatform = noone;
    }
    
    invincible = max(invincible - 1, 0);
    if (invincible &gt; .5*maxInvincible)
    {
        kLeft = false; kRight = false; kUp = false; kDown = false; kJump = false; kAttack = false;
    }
    
    
    if (!onLadder &amp;&amp; !onPlatform)
        yVel += yGrav;
    
    attackDelay = max(attackDelay-1,0);
    if (kAttack)
    {
        attacking = true;
        if (!attackDelay)
            switch (global.attackType)
            {
                case 0:
                    var proj = instance_create(x+sign(dir)*TILE,cy,objPlayerProj1);
                    proj.xVel = sign(dir)*5;
                    proj.dir = dir;
                    attackDelay = .5*SEC;
                break;
            }
    }
    else
        attacking = false;
    
    if (kLeft) {dir = LEFT; xVel = -spd}
    if (kRight) {dir = RIGHT; xVel = spd}
    
    if (!kLeft &amp;&amp; !kRight &amp;&amp; (invincible &lt; 30 || onGround)) xVel = 0;
    
    if (onGround || onLadder)
    {
        if (!kJump)
            jumped = false;
        else
            onPlatform = noone;
        
        jumpDist = 0;
        
        if (!invincible)
            yVel = 0;
        if (onGround)
        {
            state = IDLE;
            if (abs(xVel)&gt;0) state = WALK;
        }
        if (onLadder)
        {
            x = onLadder.x+.5*TILE;
            xVel = 0;
            state = LADDER;
            if (kUp || kDown) fCur = (fCur+.1)%2;
            if (kUp)
                yVel = -.75;
            else if (kDown)
                yVel = .75;
            else if (!kJump)
                yVel = 0;
                      
        }
    
    }
    if (!onGround &amp;&amp; !onLadder)
    {
        state = JUMP;
        if (yVel &gt; 0) jumped = true;
    }
    
    var jspd = 3.5; //jump speed
    if ((kJump||kJumpPressed) &amp;&amp; !jumped)
    {
        if (!kDown)
        {
            if (jumpDist &lt; 3*TILE) //max jump height
                yVel = -jspd;
        }    
        jumpDist += jspd;
        if ((!kDown &amp;&amp; onGround) || !onGround)
            state = JUMP;
        
                    
    }
    if (!kJump) jumpDist = 3*TILE;
    
    //++++physics++++
    
    xVel = sign(xVel)*min(abs(xVel),5);
    yVel = sign(yVel)*min(abs(yVel),5);
    
    if (!place_meeting(x+xVel,y,objSolid))
        x += xVel;
    else
        xVel = 0;
    
    repeat(10)
        if (!place_meeting(x,y+.1*yVel,objSolid) &amp;&amp; !(place_meeting(x,y+1,objLadder)&amp;&amp;!place_meeting(x,y,objLadder)&amp;&amp;(!kDown&amp;&amp;!kUp&amp;&amp;!kJump))
            &amp;&amp; !onPlatform)
            y += .1*yVel;
        else
            yVel = 0;
            
    x = clamp(x,0,room_width);
    y = clamp(y,0,room_height+2*TILE);
    if (state != statePrev)
        fCur = 0;
    statePrev = state;
    
    //++++death++++
    if (hp &lt;= 0 || collision_point(x,bbox_top,objHole,false,true))
    {
        state = DEAD;
        effectDead(x,y+TILE);
        
        global.state = G_GAMEOVER;
    }

    deathTimer = 3*SEC;
}//end play
if (global.state == G_GAMEOVER)
{
    deathTimer = max(deathTimer-1,0);
    if (!deathTimer)
    {
        room_restart();
        //instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frame = floor(fCur);

switch (state)
{
    case SPAWN:
        fMax = 4;
        fSpeed = .2;
        row = 4;
    break;
    case IDLE:
        fMax = 2;
        if (frame == 0)
            fSpeed = .01;
        else
            fSpeed = .1;
        row = 0;
    break;
    case WALK:
        fMax = 4;
        fSpeed = .2;
        row = 1;
    break;
    case JUMP:
        fMax = 1;
        fSpeed = 0;
        row = 2;
    break;
    case LADDER:
        fMax = 2;
        fSpeed = 0;
        row = 3;
    break;
}

if (global.state &gt; G_PAUSED)
    fCur = (fCur + fSpeed) % (fMax);

var drawy;
if (state == SPAWN) drawy = starty;
else
    drawy = y;

//draw_self();
if (invincible % 3 == 0 &amp;&amp; state != DEAD)
    draw_sprite_part_ext(sprPlayer,-1,frame*2*TILE+fMax*attacking*2*TILE,row*2*TILE,2*TILE,2*TILE,
    floor(x)-TILE+2*TILE*(dir == LEFT),floor(drawy),sign(dir),1,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
