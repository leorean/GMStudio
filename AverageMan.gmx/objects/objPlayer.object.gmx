<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
dir = RIGHT;
state = IDLE;
xVel = 0;
yVel = 0;
yGrav = .3;

fCur = 0;
fMax = 0;
frame = 0;
fSpeed = 0;

onGround = false;
onLadder = false;
attacking = false;
jumped = false;
jumpDist = false;

invincible = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++input++++
var kLeft = (keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right));
var kRight = (keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left));
var kUp = keyboard_check(vk_up);
var kDown = keyboard_check(vk_down);
var kJump = keyboard_check(ord('A'));
var kJumpPressed = keyboard_check_pressed(ord('A'));
var kJumpReleased = keyboard_check_released(ord('A'));
var kAttack = keyboard_check(ord('S'));

//++++routine++++
onGround = place_meeting(x,y+1,objSolid) &amp;&amp; yVel &gt;= 0;
if (kUp || kDown || state == LADDER)
    onLadder = instance_place(x,y,objLadder);
else
    onLadder = noone;
//onLadder = place_meeting(x,y,objLadder) &amp;&amp; (kUp || kDown || state == LADDER);

enemy = instance_place(x,y,objEnemy);

if (instance_exists(enemy) &amp;&amp; !invincible)
{
    xVel = -2*sign(dir);
    yVel = -3;
    invincible = 60;
    enemy = noone;
}

invincible = max(invincible - 1, 0);
if (invincible &gt; 30)
{
    kLeft = false; kRight = false; kUp = false; kDown = false; kJump = false; kAttack = false;
}


if (!onLadder)
    yVel += yGrav;

if (kAttack)
    attacking = true;
else
    attacking = false;

if (kLeft) {dir = LEFT; xVel = -2}
if (kRight) {dir = RIGHT; xVel = 2}

if (!kLeft &amp;&amp; !kRight &amp;&amp; (invincible &lt; 30 || onGround)) xVel = 0;

if (onGround || onLadder)
{
    jumped = false;
    jumpDist = 0;
    if (!invincible)
        yVel = 0;
    if (onGround)
    {
        state = IDLE;
        if (abs(xVel)&gt;0) state = WALK;
    }
    if (onLadder)
    {
        //x = (x div TILE) * TILE + TILE*.5;
        x = onLadder.x+.5*TILE;
        xVel = 0;
        state = LADDER;
        if (kUp || kDown) fCur = (fCur+.1)%2;
        if (kUp) yVel = -1;
        else if (kDown) yVel = 1;
        else yVel = 0;
    }

}
if (!onGround &amp;&amp; !onLadder)
{
    state = JUMP;
    if (yVel &gt; 0) jumped = true;
}

var jspd = 3.5; //jump speed
if (kJump &amp;&amp; !jumped)
{
    state = JUMP;
    jumpDist += jspd;
    if (jumpDist &lt; 3*TILE) //max jump height
        yVel = -jspd;
}
if (kJumpReleased)
    jumped = true;

//++++physics++++

xVel = sign(xVel)*min(abs(xVel),5);
yVel = sign(yVel)*min(abs(yVel),5);

if (!place_meeting(x+xVel,y,objSolid))
    x += xVel;
else
    xVel = 0;

repeat(10)
    if (!place_meeting(x,y+.1*yVel,objSolid))
        y += .1*yVel;
    else
        yVel = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frame = floor(fCur);

switch (state)
{
    case IDLE:
        fMax = 2;
        if (frame == 0)
            fSpeed = .01;
        else
            fSpeed = .1;
        row = 0;
    break;
    case WALK:
        fMax = 4;
        fSpeed = .2;
        row = 1;
    break;
    case JUMP:
        fMax = 1;
        fSpeed = 0;
        row = 2;
    break;
    case LADDER:
        fMax = 2;
        fSpeed = 0;
        row = 3;
    break;
}

fCur = (fCur + fSpeed) % (fMax);

draw_self();
if (invincible % 3 == 0)
    draw_sprite_part_ext(sprPlayer,-1,frame*2*TILE+fMax*attacking*2*TILE,row*2*TILE,2*TILE,2*TILE,x-TILE+2*TILE*(dir == LEFT),y,sign(dir),1,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
