<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global loading stuff

surf = -1;
aspect_x = 1;
aspect_y = 1;


global.state = G_START;

global.btnAttack = noone;
global.btnJump = noone;
global.dPad = noone;
global.camera = noone;

//++++import levels HERE++++
l0Data = importLevel("L0.tmx");
a=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++debug etc++++

if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace))
    game_end();

if (keyboard_check_pressed(ord('R')))
    room_restart();
if (keyboard_check_pressed(ord('K')))
    objPlayer.hp = 0;
    
if (keyboard_check_pressed(ord('P')))
    if (global.state == G_PLAY)
        global.state = G_PAUSED;
    else if (global.state == G_PAUSED)
        global.state = G_PLAY;

//++++instance management++++
var off = 1*TILE;

instance_deactivate_object(objStatic);
instance_deactivate_object(objCamStop);

instance_activate_region(view_xview[0]-off,view_yview[0]-off,WIDTH+2*off,HEIGHT+2*off,true);

//instance_deactivate_object(objLiving);
//instance_activate_region(view_xview[0],view_yview[0],WIDTH,HEIGHT,true);

//show_debug_message("cs:"+string(instance_number(objCamStop))+",solid:"+string(instance_number(objSolid)));


//++++
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Free Surface
if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(global.btnAttack))
{
    global.btnAttack = instance_create(WIDTH-6*TILE,HEIGHT-3*TILE,objButton);
    global.btnAttack.type = 0;
}
if (!instance_exists(global.btnJump))
{
    global.btnJump = instance_create(WIDTH-3*TILE,HEIGHT-4*TILE,objButton);
    global.btnJump.type = 1;
}
if (!instance_exists(global.dPad))
    global.dPad = instance_create(-100,-100,objDPad);

window_set_size(2*WIDTH,2*HEIGHT);
fade = 1.5; //alpha for black fadeout/fadein

global.timer = 0;
global.state = G_START;

global.attackType = 0; //player type

createRoom(l0Data);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++SHADER++++
//shader_set(shader0);
draw_clear(c_black);

//--------------------------------------------------

//++++SURFACE++++
if (!surface_exists(surf))
{
    //Create (or recreate) the surface when needed
    //QUALITY:
    var w,h;
    w = view_wview[0]; h = view_hview[0];
    surf = surface_create(w,h);
    surface_set_target(surf);
    
    draw_clear(c_black);
    surface_reset_target();
    //Set the view that you want to draw to the surface
    view_surface_id[0] = surf;
        
}
else
{

    //Disable alpha blending (not needed since we are drawing the whole view)
    draw_enable_alphablend(false);
    //Draw the surface stretched to the GUI layer
    
    var aspect_x = display_get_gui_width() / surface_get_width(surf);
    var aspect_y = display_get_gui_height() / surface_get_height(surf);
    
    display_set_gui_size(surface_get_width(surf),surface_get_height(surf));
    
    //draw_surface_ext(surf,0,0,aspect_x,aspect_y,0,c_white,1); //works!!
    //var aspect = min(aspect_x,aspect_y,display_get_width()/display_get_height());
    //draw_surface_ext(surf,0,0,aspect_x,aspect_y,0,c_white,1); //works!!
    //draw_surface_stretched(surf,0,0,surface_get_width(surf),surface_get_height(surf));
    
    //drawSurface(display_get_gui_width()/2,display_get_gui_height()/2,surf,aspect_x,aspect_y);
    var xoffset = (surface_get_width(surf)*aspect_x)/2;
    var yoffset = (surface_get_height(surf)*aspect_y)/2;
    draw_surface_ext(surf,display_get_gui_width()/2-xoffset,display_get_gui_height()/2-yoffset,aspect_x,aspect_y,0,c_white,1);
    
    //draw_text(2*TILE,2*TILE,"ax:"+string(aspect_x)+",ay:"+string(aspect_y)+",a:"+string(aspect));
    
    //Switch on alpha blending again for the next normal draw pass
    draw_enable_alphablend(true);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++DRAW HUD++++
draw_set_halign(fa_left);
draw_set_valign(fa_top);

var vx = view_xview[0];
var vy = view_yview[0];

//++++draw fade effect++++
if (global.state == G_GAMEOVER)
    fade = min(fade + .02,1);
else
    fade = max(fade - .02,-1.5);

if (fade &gt; 0)
{
    draw_set_color(c_black);
    draw_set_alpha(fade);
    draw_rectangle(vx,vy,vx+WIDTH,vy+HEIGHT,0);

}
draw_set_color(c_black);
draw_set_alpha(1);

//player hp
if (instance_exists(objPlayer))
{
    var hp = objPlayer.hp/objPlayer.maxHp;
    draw_sprite_part(sprGfx,-1,0,5*TILE,TILE,3*TILE,vx+TILE,vy+TILE);
    draw_sprite_part(sprGfx,-1,TILE,5*TILE+(1-hp)*3*TILE,TILE,3*TILE*hp,vx+TILE,vy+3*TILE*(1-hp)+TILE);
    if (in(objPlayer.invincible,objPlayer.maxInvincible*.5,objPlayer.maxInvincible) &amp;&amp; ((objPlayer.invincible % 4) == 0))
    {
        draw_sprite_part(sprGfx,-1,2*TILE,5*TILE,TILE,3*TILE,vx+TILE,vy+TILE);
    }
    
}

//fps
draw_text(vx,vy+HEIGHT-TILE,fps);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
