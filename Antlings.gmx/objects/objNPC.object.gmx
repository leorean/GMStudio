<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskNPC</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = WALK;
statePrev = state;
dir = RIGHT;

xVel = 0;
yVel = 0;
xVelMax = 4;
yVelMax = 4;
cx = x+TILE/2;
cy = y+TILE/2;
px = -1;
py = -1;
spd = 2;

yGrav = .15;
jumpSpd = 3.2;
xSpd = 1;

jumped = false;
onGround = false;

//++++drawing++++
fCur = 0;
fMax = 3;
fSpeed = 0;
frame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++local variables++++
cx = x+TILE/2;
cy = y+TILE/2;
//++++++++

//++++input++++
kLeft = keyboard_check(vk_left);
kRight = keyboard_check(vk_right);
kUp = keyboard_check(vk_up);
kDown = keyboard_check(vk_down);
kJump = keyboard_check_pressed(ord('A'));
kAction = keyboard_check_pressed(ord('S'));

xVel = sign(xVel)*min(abs(xVel),xVelMax);
yVel = sign(yVel)*min(abs(yVel),yVelMax);

//++++++++

//px = (cx div TILE) * TILE; py = (cy div TILE) * TILE;
 
//++++++++
yVel += yGrav;

onGround = collision_line(bbox_left,bbox_bottom+1+yVel,bbox_right,bbox_bottom+1+yVel,objSolid,true,true);
if (onGround)
    jumped = false;


if (state == WALK)
{

    if (onGround)
    {
        if (collision_point(cx + sign(dir)*(TILE/2 + 2),cy,objSolid,true,true))
            dir = -dir;

        if (dir == LEFT)
            xVel = max(xVel - .2, -xSpd);
        if (dir == RIGHT)
            xVel = min(xVel + .2, xSpd);
    }
/*    if (dir == RIGHT)
    {
        if (onGround)
            xVel = min(xVel + .2, xSpd);
    }*/
}

/*
if (kJump &amp;&amp; !jumped)
{
    state = JUMP;
    yVel = -jumpSpd;
    jumped = true;
}
*/

if (!place_meeting(x+xVel,y,objSolid) &amp;&amp; in(cx+xVel,0,room_width))
    x += xVel;
else
    xVel = 0;
repeat(ceil(abs(yVel))*10)
    if (!place_meeting(x,y+sign(yVel)*.1,objSolid))
        y += sign(yVel)*.1;
    else
        yVel = 0;

//++++end step stuff++++
if (statePrev != state)
    fCur = 0;
statePrev = state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fCur = (fCur + fSpeed) % (fMax + 1);
switch(state)
{
    case IDLE:
        row = 0;
        fSpeed = .1;
    break;
    case WALK:
        row = 1;
        fSpeed = .3;
    break;
    case JUMP:
        if (yVel &gt;= 0) fCur = 2;
        else fCur = 0;
        row = 2;
        fSpeed = 0;
    break;
    case DRILL:
        row = 3;
        fSpeed = .3;
    break;
}
frame = floor(fCur);

if (dir == LEFT)
    draw_sprite_part_ext(sprNPC,-1,frame*TILE,row*TILE,TILE,TILE,x+TILE,y,-1,1,c_white,1);
if (dir == RIGHT)
    draw_sprite_part_ext(sprNPC,-1,frame*TILE,row*TILE,TILE,TILE,x,y,1,1,c_white,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
