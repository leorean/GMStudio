<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAll</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = 0;
depth = 2;

index = 0;
maxIndex = 3;
showHelp = false;
showHighscore = false;

row = 7;

with(objButton)
    instance_destroy();

btn[0] = instance_create(WIDTH/2,row*TILE,objButton);
btn[0].text = "Start!";
btn[0].index = 0;
btn[0].parent = id;

btn[1] = instance_create(WIDTH/2,row*TILE+1.5*TILE,objButton);
btn[1].text = "Help";
btn[1].index = 1;
btn[1].parent = id;

btn[2] = instance_create(WIDTH/2,row*TILE+3*TILE,objButton);
btn[2].text = "Highscores";
btn[2].index = 2;
btn[2].parent = id;

btn[3] = instance_create(WIDTH/2,row*TILE+4.5*TILE,objButton);
btn[3].text = "Quit";
btn[3].index = 3;
btn[3].parent = id;

draw_set_font(fntMenu); //to set the correct width
textCredits = "=== A game by Peter Sperl Â© 2014 === Audio by Vincent Wagner";
textCreditsX = WIDTH+string_width(textCredits);

page = 0;

t = pi/2;
z = 0;
xx = 0;
yy = 0;

mouse_xprev = mouse_x;
mouse_yprev = mouse_y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//room_goto_next();

var b;
b = 3*TILE;

//ENABLE MOUSE IF MOVED/TOUCHED
if (global.input != INPUT_TOUCH)
    if (mouse_x != mouse_xprev || mouse_y != mouse_yprev)
        global.mouseVisible = true;
//DISABLE MOUSE IF KEYBOARD IS USED
if (global.input == INPUT_TOUCH || keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter))
    global.mouseVisible = false;

if (!showHelp &amp;&amp; !showHighscore)
{
    //touch/mouse
    if (in(mouse_x,WIDTH/2-b,WIDTH/2+b) &amp;&amp; (global.input == INPUT_TOUCH || global.mouseVisible))
    {
    
        for (i = 0; i &lt;= maxIndex; i+=1)
        {
            if (in(mouse_y,btn[i].y,btn[i].y+TILE))
                index = i;
        }
    }
    
    //keyboard
    if(keyboard_check_pressed(vk_down))
    {
        global.mouseVisible = false;
        index = min(index+1,maxIndex);
    }
    
    if(keyboard_check_pressed(vk_up))
    {
        global.mouseVisible = false;
        index = max(index-1,0);
    }

    //page = 0; //reset help page
    objButton.visible = true;
} else
{
    objButton.visible = false;
}

buttonPressed = (global.input == INPUT_TOUCH || global.mouseVisible) &amp;&amp; in(mouse_y,btn[index].y,btn[index].y+TILE);

//BUTTON ACTION
if (keyboard_check_pressed(vk_space) 
    || keyboard_check_pressed(vk_enter) 
    || mouse_check_button_pressed(mb_any))
{

    switch(index)
    {
        case 0: //new game
            if (buttonPressed)
            room_goto_next();
        break;
        case 1: //toggle help
            if (showHelp || buttonPressed)
            {
                if (page == 0 &amp;&amp; !showHelp)
                    showHelp = true;
                else if (page == 1 &amp;&amp; showHelp)
                {
                    showHelp = false;
                    page = 0;
                }
                else
                    page += 1;
            }
        break;
        case 2: //TODO: highscore
            showHighscore = !showHighscore;
        break;
        case 3: //quit
            if (buttonPressed)
                game_end();
        break;
    }
}

mouse_xprev = mouse_x;
mouse_yprev = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.mouseVisible = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
draw_set_font(global.fntBig);
draw_set_color(c_white);
draw_set_alpha(1);
draw_set_halign(fa_center);
draw_set_valign(fa_top);

//hover title
t += .05;
if (t&gt;2*pi)
    t = 0;

z = 2*sin(t);

//background
xx = (xx + 1) mod WIDTH;

draw_sprite_part(spriteTitleMenu,-1,0,0,WIDTH,HEIGHT,xx,yy);
draw_sprite_part(spriteTitleMenu,-1,0,0,WIDTH,HEIGHT,xx-WIDTH,yy);
draw_sprite_part(spriteTitleMenu,-1,0,HEIGHT,WIDTH,HEIGHT,0,0);

/*
if (!showHelp &amp;&amp; !showHighscore)
    draw_text(WIDTH/2,TILE+z,global.gameTitle);
*/
if (!showHelp &amp;&amp; !showHighscore)
    drawBorder(8.5*TILE,6*TILE,8*TILE,8*TILE);
if (showHighscore)
    drawBorder(2*TILE,4*TILE,21*TILE,9*TILE);
//if (showHelp)
//    drawBorder(1*TILE,1*TILE,23*TILE,13*TILE);

//title
if (!showHelp &amp;&amp; !showHighscore)
{
    draw_set_alpha(.5);
    draw_sprite_part_ext(spriteTitleMenu,-1,0,2.5*HEIGHT,WIDTH,HEIGHT*.5,0,-z,1,1,c_white,.5);
    draw_set_alpha(1);
    draw_sprite_part(spriteTitleMenu,-1,0,2*HEIGHT,WIDTH,HEIGHT*.5,0,-z);
}

draw_set_font(global.fntDefault);

if (showHelp || showHighscore)
{
    btn[0].visible = false;
    btn[1].visible = false;
    btn[2].visible = false;
    btn[3].visible = false;
} else
{
    btn[0].visible = true;
    btn[1].visible = true;
    btn[2].visible = true;
    btn[3].visible = true;
    
    textCreditsX -= 1;
    if (textCreditsX &lt; 0)
        textCreditsX = WIDTH + string_width(textCredits);
    draw_set_font(fntMenu);
        draw_set_halign(fa_right);
    draw_text(floor(textCreditsX),HEIGHT-TILE,textCredits);
    draw_set_font(global.fntDefault);
}


//HELP
if (showHelp)
{
    draw_sprite_part(spriteTitleMenu,-1,WIDTH,page*HEIGHT,WIDTH,HEIGHT,0,0);
}

if (showHighscore)
{
    var suffix, row;
    row = 5*TILE;
    draw_set_halign(fa_center);  
    draw_text(WIDTH/2,row-z,"Highscores!");

    for (i = 0; i &lt; global.scoreCount; i+=1)
    {
        if ((i+1) == 1)
            suffix = "&amp;&amp;&amp;&amp;&amp;";
        else if ((i+1) == 2)
            suffix = "&amp;&amp;&amp;&amp;";
        else if ((i+1) == 3)
            suffix = "&amp;&amp;&amp;";
        else if ((i+1) == 4)
            suffix = "&amp;&amp;";
        else if ((i+1) == 5)
            suffix = "&amp;";
        draw_set_halign(fa_left);        
        draw_text(3*TILE,row+1.5*TILE+i*TILE,string(suffix));
        draw_set_halign(fa_right);
        draw_text(WIDTH-3*TILE,row+1.5*TILE+i*TILE,string(global.scores[i]));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
