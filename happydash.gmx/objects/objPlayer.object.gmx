<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAll</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//create
global.player = id;

depth = PLAYERDEPTH;
mask_index = sprPlayerMask;

global.hasControl = false;

////local variables

//pause, camera etc.
onGround = false;
onPlatform = false;

onGroundSoundPlayed = false;

//death variables
alarm[0] = 0;
alarm0 = 90;
enemy = noone;
alive = true;

//attack variables
db = noone;
maxPow = 50;
pow = maxPow;
combo = 0;

//mouse/screen input
onX = -1;
onY = -1;
on = false;
offX = -1;
offY = -1;
off = false;
mouse_xprev = mouse_x;
mouse_yprev = mouse_y;


state = RUN;
statePrev = state;

////physical variables

xO = WIDTH/2;
global.distance = 0;

xVel = 0;
yVel = 0;

cx = x+TILE/2;
cy = y+TILE/2;

xAcc = .02;
xFric = .88;

yGravDefault = .15;
yGrav = yGravDefault;
xVelMax = 1.5;
yVelMax = 5;

jumpVelAcc = .15;
jumpVelMax = 2.7;
jumpVelMin = 1.6;
jumpVel = jumpVelMin;
isJumped = 0;
jumpPerformed = false;

////draw stuff
fCur = 0;
fMax = 4;
fSpeed = .1;

xPrev = x;
yPrev = y;

//tornado effect
tornadoAlpha = 0;

//rainbow variables
dsX = ds_list_create();//x-list
dsY = ds_list_create();//y-list
dsA = ds_list_create();//alpha-list
canDraw = false;
dsD = ds_list_create();//check if drawable
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(dsX);
ds_list_destroy(dsY);
ds_list_destroy(dsA);
ds_list_destroy(dsD);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>die cooldown</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//step
depth = PLAYERDEPTH;

//MUTE/UNMUTE disables other input
pressedMute = (mouse_check_button_pressed(mb_any) &amp;&amp; (in(mouse_x,WIDTH-2*TILE,WIDTH) &amp;&amp; in(mouse_y,0,2*TILE)));

//CONTROLS
if (global.hasControl &amp;&amp; !global.pause &amp;&amp; !pressedMute)
{
    //KEY INPUT (touch AND keys)
    keyUpPressed = keyboard_check_pressed(vk_up) || global.tbJump.pressed;
    keyRightPressed = keyboard_check_pressed(vk_right) || global.tbDash.pressed;
    keyDown = keyboard_check(vk_down) || global.tbStop.pressing;
    
    //MOUSE VISIBILITY
    if (keyUpPressed || keyRightPressed || keyDown)
        global.mouseVisible = false;

    if (global.input != INPUT_TOUCH)
        if (mouse_x != mouse_prevx || mouse_y != mouse_prevy)
            global.mouseVisible = true;
} else
{
    //keyboard
    keyUpPressed = false;
    keyRightPressed = false;
    keyDown = false;

}

pressedMute = false;
if (!global.pause || global.gameOver || state == DEAD)
{
    objPlayerStep();
    //objPlayerStepTest();
}

mouse_prevx = mouse_x;
mouse_prevy = mouse_y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
var xDraw,yDraw,angle,xA,yA,off, frame, row;

frame = floor(fCur);

switch(state)
{
    case RUN:
        row = 0;
        fSpeed = .2;
    break;
    case JUMP:
        row = 1;
        if (yVel &lt;= 0)
            fCur = 0;
        else
            fCur = 2;
        fSpeed = 0;
    break;
    case DEAD:
        row = 2;
        fSpeed = 0;
    break;
    case ATTACK:
        row = 3;
        fSpeed = .4;
    break;
    case IDLE:
        row = 4;
        fSpeed = .15;
    break;
    case HURT:
        row = 5;
        fSpeed = .3;
    break;
}

if (true)//RAINBOWWWW EFFECT
{
    if (global.hasControl)
    {
        if (!global.pause)
        {
            if (ds_list_size(dsX) &lt; 32)
            {
                ds_list_add(dsX,ceil(cx));
                ds_list_add(dsY,ceil(y));
                ds_list_add(dsA,1);
                ds_list_add(dsD,canDraw);
            } else
            {
                ds_list_delete(dsX,0);
                ds_list_delete(dsY,0);
                ds_list_delete(dsA,0);
                ds_list_delete(dsD,0);
            }
        }
        
        for (i = 0; i &lt; ds_list_size(dsX);i+=1)
        {
            ds_list_replace(dsX,i,ds_list_find_value(dsX,i)-global.xSpeed);
            ds_list_replace(dsA,i,max(ds_list_find_value(dsA,i)-.03,0));
            draw_set_alpha(ds_list_find_value(dsA,i));
    
            if (i &gt; 0 &amp;&amp; ds_list_find_value(dsD,i))
            {
    
                for (j = 0; j &lt; TILE; j+=1)
                {
                    draw_set_color(make_color_hsv((j div 2)*22,255,255));
                    if (ds_list_find_value(dsX,i) != ds_list_find_value(dsX,i-1)+global.xSpeed)
                    if (abs(TILE/2-j) &lt; combo)
                    draw_line_width(ds_list_find_value(dsX,i-1)-abs(xVel),ds_list_find_value(dsY,i-1)+j,ds_list_find_value(dsX,i),ds_list_find_value(dsY,i)+j,1);
                }
            }
        }
    }
}

//power up stuff
if (objControl.alarm[1] &amp;&amp; state != DEAD)
{
    //power up bar
    draw_sprite_part(spriteHud,-1,0,8*TILE,2*TILE,6,x-TILE*.5,y-TILE*.5);
    draw_sprite_part(spriteHud,-1,0,8*TILE+6,ceil(2*TILE*objControl.alarm[1]/global.powDuration),6,x-TILE*.5,y-TILE*.5);
}

if (global.powerUp == POW_6) // red rockets
{
    if (global.timer mod 30 == 0 &amp;&amp; !global.pause &amp;&amp; state != DEAD)
        instance_create(cx,cy,objProjectilePlayer3)
}

if (global.powerUp == POW_2) //fly
{
    if (state != ATTACK)
        draw_sprite_part(spriteGfx,-1,2*(floor(global.timer*.2) mod 4)*TILE,9*TILE,2*TILE,TILE,floor(x)-TILE*.5,floor(y));
    else
        draw_sprite_part(spriteGfx,-1,4*TILE+(floor(global.timer*.2) mod 2)*TILE,11*TILE,TILE,2*TILE,floor(x),floor(y-TILE*.5));
}

if (global.powerUp == POW_3) //invincible
    color = make_color_hsv((3*global.timer) mod 130,255,255);
else
    color = c_white;

draw_set_color(color);
if (global.powerUp == POW_NONE)
    draw_sprite_part_ext(spritePlayer,-1,floor(frame*2*TILE),row*2*TILE,2*TILE,2*TILE,floor(x-TILE*.5),floor(y-TILE*.5),1,1,color,1);
else
    draw_sprite_part_ext(spritePlayer,-1,8*TILE+floor(frame*2*TILE),row*2*TILE,2*TILE,2*TILE,floor(x-TILE*.5),floor(y-TILE*.5),1,1,color,1);

//TORNADO EFFECT
if (state == ATTACK)
    tornadoAlpha = min(tornadoAlpha +.03,.8);
else
    tornadoAlpha = max(tornadoAlpha -.1,0);

if (tornadoAlpha &gt; 0)
    draw_sprite_part_ext(spriteGfx,-1,2*floor(frame)*TILE,16*TILE,2*TILE,2*TILE,floor(x-TILE*.5),floor(y-TILE*.5),1,1,color,tornadoAlpha);
    

draw_set_color(c_white);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
