<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAll</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//create
global.player = id;

depth = PLAYERDEPTH;
mask_index = sprPlayerMask;

global.hasControl = false;

////local variables

//pause, camera etc.
onGround = false;
onPlatform = false;

onGroundSoundPlayed = false;

//death variables
alarm[0] = 0;
alarm0 = 90;
enemy = noone;
alive = true;

//attack variables
db = noone;
maxPow = 50;
pow = maxPow;

combo = 0;

//mouse/screen input
onX = -1;
onY = -1;
on = false;
offX = -1;
offY = -1;
off = false;
mouse_xprev = mouse_x;
mouse_yprev = mouse_y;


state = RUN;
statePrev = state;

////physical variables

xO = WIDTH/2;
global.distance = 0;

xVel = 0;
yVel = 0;

cx = x+TILE/2;
cy = y+TILE/2;

xAcc = .02;
xFric = .88;

yGravDefault = .15;
yGrav = yGravDefault;
xVelMax = 1.5;
yVelMax = 5;

jumpVelAcc = .15;
jumpVelMax = 2.7;
jumpVelMin = 1.6;
jumpVel = jumpVelMin;
isJumped = 0;
jumpPerformed = false;

////draw routines
fCur = 0;
fMax = 4;
fSpeed = .1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attack cooldown</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//step
depth = PLAYERDEPTH;

//MUTE/UNMUTE disables other input
pressedMute = (mouse_check_button_pressed(mb_any) &amp;&amp; (in(mouse_x,WIDTH-2*TILE,WIDTH) &amp;&amp; in(mouse_y,0,2*TILE)));

//CONTROLS
if (global.hasControl &amp;&amp; !global.pause &amp;&amp; !pressedMute)
{
    //mouse/touch gestures
    touch = mouse_check_button(mb_left);
    touchPressed = mouse_check_button_pressed(mb_left);        
    touchReleased = mouse_check_button_released(mb_left)
        || mouse_x &lt; 0 || mouse_x &gt; WIDTH
        || mouse_y &lt; 0 || mouse_y &gt; HEIGHT;

    //keyboard
    keyUpPressed = keyboard_check_pressed(vk_up);
    keyRightPressed = keyboard_check_pressed(vk_right);
    keyDown = keyboard_check(vk_left);

    //mouse
    mouseLeftPressed = mouse_check_button_pressed(mb_left) &amp;&amp; !mouse_check_button_pressed(mb_right);
    mouseRightPressed = mouse_check_button_pressed(mb_right) &amp;&amp; !mouse_check_button_pressed(mb_left);
    mouseBoth = mouse_check_button(mb_left) &amp;&amp; mouse_check_button(mb_right);
    mouseAny = mouse_check_button(mb_any);

    //MOUSE VISIBILITY
    if (keyUpPressed || keyRightPressed || keyDown)
        global.mouseVisible = false;

    if (mouseAny || mouse_x != mouse_prevx || mouse_y != mouse_prevy)
        global.mouseVisible = true;

} else
{
    //mouse/touch gestures
    touch = false;
    touchPressed = false;
    touchReleased = false;
    onX = -1;
    onY = -1;
    offX = -1;
    offY = -1;

    //mouse
    mouseLeftPressed = false;
    mouseRightPressed = false;
    mouseBoth = false;
    mouseAny = false;

    //keyboard
    keyUpPressed = false;
    keyRightPressed = false;
    keyDown = false;

}

pressedMute = false;

if (!global.pause &amp;&amp; !global.gameOver)
{
    objPlayerStep();
    //objPlayerStepTest();
}

mouse_prevx = mouse_x;
mouse_prevy = mouse_y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
var xDraw,yDraw,angle,xA,yA,off, frame, row;

frame = floor(fCur);

xDraw = floor(x);//floor(x-xVel);
yDraw = floor(y);//floor(y-yVel);

switch(state)
{
    case RUN:
        row = 0;
        fSpeed = .2;
    break;
    case JUMP:
        row = 1;
        if (yVel &lt;= 0)
            fCur = 0;
        else
            fCur = 2;
        fSpeed = 0;
    break;
    case DEAD:
        row = 2;
        fSpeed = 0;
    break;
    case ATTACK:
        row = 3;
        fSpeed = .4;
    break;
    case IDLE:
        row = 4;
        fSpeed = .15;
    break;
    case HURT:
        row = 5;
        fSpeed = .3;
    break;
}

draw_sprite_part(spritePlayer,-1,frame*2*TILE,row*2*TILE,2*TILE,2*TILE,xDraw-TILE*.5,yDraw-TILE*.5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
