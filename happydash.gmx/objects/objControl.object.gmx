<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprControlMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>objAll</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>POWER UP COOLDOWN</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room starts scrolling</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//PAUSE GAME
if (room != INIT &amp;&amp; !global.gameOver &amp;&amp; !global.pause)
    if (global.player.state != DEAD)
    {
        if (mouse_check_button_pressed(mb_any) &amp;&amp; (in(mouse_x,WIDTH-2*TILE,WIDTH) &amp;&amp; in(mouse_y,HEIGHT-2*TILE,HEIGHT)))
            || keyboard_check_pressed(ord('P'))
            {
                instance_create(0,0,objPauseMenu);
                global.pause = true;
                global.xSpeed = 0;
            }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ENABLE MOUSE IF MOVED/TOUCHED
if (global.input != INPUT_TOUCH)
    if (mouse_x != mouse_xprev || mouse_y != mouse_yprev)
        global.mouseVisible = true;
//DISABLE MOUSE IF KEYBOARD IS USED
if (global.input == INPUT_TOUCH || keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter))
    global.mouseVisible = false;

//ticker for timed obstacles etc.
global.timer = (global.timer + 1) mod INFINITE;

//MUTE/UNMUTE
if (mouse_check_button_pressed(mb_any) &amp;&amp; (in(mouse_x,WIDTH-2*TILE,WIDTH) &amp;&amp; in(mouse_y,0,2*TILE)))
    || keyboard_check_pressed(ord('M'))
    {
        global.mute = !global.mute;
    }


if (room != INIT &amp;&amp; !global.gameOver)
{

    //global routines here
    if (!global.pause)
    {
        /*
        //PAUSE GAME
        if (global.player.state != DEAD)
        {
            if (mouse_check_button_pressed(mb_any) &amp;&amp; (in(mouse_x,WIDTH-2*TILE,WIDTH) &amp;&amp; in(mouse_y,HEIGHT-2*TILE,HEIGHT)))
                || keyboard_check_pressed(ord('P'))
                {
                    instance_create(0,0,objPauseMenu);
                    global.pause = true;
                }
        }*/

        //EXP SYSTEM AND LEVEL UP FORMULA
        global.maxCoins = (32 * ceil(3 + global.level*.2) + ceil(.2 * power(global.level * .5, 2)));
        //global.maxCoins = 18 * floor(2 + global.level * power(0.5, global.level * .0017 ));
            //j = (32 * ceil(3 + i*.2) + ceil(.2 * power(i * .5, 2)));

        if (global.coins&gt;=global.maxCoins || keyboard_check_pressed(ord('G')))
        {
            //global.xSpeedDefault = min(global.xSpeedDefault + .0265, global.xSpeedMax);
            global.level += 1;
            if (global.level mod (5*(global.maxTheme+1)) == 0)
                global.xSpeedDefault = min(global.xSpeedDefault + 1, global.xSpeedMax);
            global.coins = 0;
            t = instance_create(WIDTH/2,HEIGHT/2,objText);
            t.text = "LEVEL "+string(global.level)+"!";
            t.fnt = global.fntBig;
            playSound(sfxLevelUp,1);
            if (global.level mod 5 == 0)
            {
                //while (global.theme == global.themePrev)
                //    global.theme = floor(irandom(global.maxTheme));
                global.theme = (global.theme + 1) mod (global.maxTheme+1);
                playSound(sfxThemeChange,1);
            }

        }
        //the scrolling speed!!
        if (!alarm[0])
        {
            if (!global.startSignal)
            {
                instance_create(0,0,objStartLevel);
                //playSound(sfxStart);
                global.hasControl = true;
                global.startSignal = true;
            }
            //if player dashes, speed is higher.
            //global.xSpeed = global.xSpeedDefault*((3-1.5*(global.player.pow/global.player.maxPow)));
            global.xSpeed = round(global.xSpeedDefault)*.5+((2-1*(global.player.pow/global.player.maxPow)));
        }
        if (objPlayer.state != DEAD)
            global.distance += global.xSpeed;
        else
            global.xSpeed = 0;
            
        global.segX -= global.xSpeed;
        
        global.spawnSegment = (floor(global.segX) &lt; global.xSpeed);
        //SPAWN NEW SEGMENT
        if(global.spawnSegment)
        {
            global.segX = global.xSpeed + global.segX + WIDTH;
            //global.segX += WIDTH;
            if (global.player.state != DEAD)
            {
                //a = 1 + global.segmentsPerTheme*(floor(global.level / global.levelsPerTheme)) + irandom(global.segmentsPerTheme - 1);
                while (global.curSeg == global.prevSeg)                
                    global.curSeg = 1 + global.theme * global.segmentsPerTheme + floor(irandom(global.segmentsPerTheme - 1));
                
                constructSegment(global.segment[
                    min(max(
                        global.curSeg,
                        1),
                        global.maxSegments)
                ],global.segX,0);
                global.prevSeg = global.curSeg;
            }
            global.difficulty += 1;
            show_debug_message("difficulty: " + string(global.difficulty));
        }
        
        if (!global.screenShake)
        {
            shakeTime = 10;
            view_angle[0]=0;
        } else
        {
            view_angle[0] = -2+(random(4));
            shakeTime = max(shakeTime-1,0);
            if (!shakeTime)
                global.screenShake = false;
        }
    }
    else //THIS IS PAUSE MODE!
    {
        global.xSpeed = 0;
    }

}

if (global.gameOver)
    global.pause = false;

//MUSIC HANDLING
if (room == INIT || global.gameOver || global.player.state == DEAD || !global.startSignal)
{
    playMusic(sfxBgm,false);
    playMusic(sfxBgmPow,false);
}
else
{
/*
    if (global.pause)
        audio_pause_all();
    else
        audio_resume_all();    
*/
        
    audio_sound_gain(sfxBgm,(global.powerUp == POW_NONE &amp;&amp; !global.pause),0);
    audio_sound_gain(sfxBgmPow,(global.powerUp != POW_NONE &amp;&amp; !global.pause),0);
    /*
    var e;
    if (global.powDuration &gt; 0 &amp;&amp; global.powerUp != POW_NONE)
        e = min(max((alarm[1]+global.powDuration/4)/global.powDuration,0),1);
    else
        e = (global.powerUp != POW_NONE);
    audio_sound_gain(sfxBgm,1-e,0);
    audio_sound_gain(sfxBgmPow,e,0);
    */
    playMusic(sfxBgm,!global.mute);
    playMusic(sfxBgmPow,!global.mute);
}

if keyboard_check_pressed(vk_escape)
    game_end();

if (global.input == INPUT_TOUCH)
    global.mouseVisible = false;

//debug keys:   
if keyboard_check_pressed(ord('R'))
    room_restart();

if keyboard_check_pressed(ord('Q'))
    room_goto(INIT);

if keyboard_check_pressed(ord('T'))
{
    if (global.input == INPUT_TOUCH)
        global.input = INPUT_KEYBOARD;
    else
        global.input = INPUT_TOUCH;
}

//TODO: REMOVE THIS
if keyboard_check_pressed(ord('E'))
{
    //
    //global.coins = global.maxCoins-1;
    //instance_create(global.player.x+TILE*.5,global.player.y,objCoin);
    with(objPowerUp)
        instance_destroy();
    p = instance_create(global.player.x,global.player.y-TILE,objPowerUp);
    p.type = POW_5;//choose(POW_1,POW_2,POW_3,POW_4,POW_5);
}

if keyboard_check(ord('C'))
{
    with(global.player)
        doCombo();
}

//GAME OVER
if (global.gameOver)
    global.xSpeed = 0;

//MOUSE PREV COORDS
if (global.input != INPUT_TOUCH)
{
    mouse_xprev = mouse_x;
    mouse_yprev = mouse_y;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//room start

view_visible[0] = true;
view_wview[0] = WIDTH;
view_hview[0] = HEIGHT;
view_wport[0] = WIDTH;
view_hport[0] = HEIGHT;

with (objGameOverMenu)
    instance_destroy();

with (objTitleMenu)
    instance_destroy();
    
global.gameOver = false;

if (room == INIT)
{
    instance_create(0,0,objTitleMenu);
    loadProgress();
}
else
{
    time = 0;
    
    global.coinsCollected = 0;
    global.enemiesKilled = 0;
    global.maxCombo = 0;
    global.coins = 0;
    global.curScore = 0;
    global.addScore = 0;
    global.level = 1;
    global.theme = 0;//floor(irandom(global.maxTheme));
    global.themePrev = global.theme;
    objCamera.theme = global.theme * WIDTH;
    
    alarm[0]= alarm0;

    global.startSignal = false;
    global.pause = false;
    
    global.difficulty = 0;
    
    global.powerUp = POW_NONE;
    alarm[1] = 0;
    global.powDuration = 0;
    
    global.curSeg = 0;
    global.prevSeg = 0;
    global.segX = 0;
    global.distance = 0;
    global.xSpeed = 0;
    global.xSpeedDefault = global.xSpeedMin;
    
    //load start segment
    //constructSegment(global.segment[0], global.segX-global.xSpeed, 0);
    constructSegment(global.segment[0], 0, 0);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objAll)
    instance_destroy();

if (surface_exists(global.drawBuffer))
    surface_free(global.drawBuffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for (i = 0; i &lt; 50; i+= 1)
{
    u = 18 * floor(2 + i * power(0.5, i * .0027 ) );
    show_debug_message(string(i)+":"+string(u));
}*/
/* HTML5 "SITELOCK"
var dom;
dom = YoYo_GetDomain();
if (dom != "162.218.235.161")// || dom != "127.0.0.1")
{
    show_message("Illegal Upload! :(");
    //instance_destroy();
}*/   
//show_message("TEST VERSION - DO NOT DISTRIBUTE!");
/*
//TESTING EXP FORMULA
for (i = 0; i &lt; 50; i+=1)
{
    //global.maxCoins = 18 * floor(2 + global.level * power(0.5, global.level * .0017 ));
    j = (32 * ceil(3 + i*.2) + ceil(.2 * power(i * .5, 2)));
    show_debug_message(string(i)+":"+string(j));
}
game_end();*/

depth = HUDDEPTH;
randomize();

//SOUND
global.mute = false;

//INPUT TYPE
global.input = INPUT_KEYBOARD; //INPUT_TOUCH, INPUT_KEYBOARD, INPUT_MOUSE
//global.input = INPUT_TOUCH;

//FONTS
global.fntBig = font_add_sprite(spriteFontBig,ord(' '),true,1);
global.fntDefault = font_add_sprite(spriteFontDefault,ord(' '),true,1);
global.fntCombo = font_add_sprite(spriteFontCombo,ord('0'),true,1);
global.fntScore = font_add_sprite(spriteFontScore,ord('0'),true,1);

//SEGMENTS

global.maxSegments = 80;
global.segment[global.maxSegments] = 0;
for (i = 0; i &lt;= global.maxSegments;i+=1)
    global.segment[i] = importSegment(string(i)+".tmx");
    
global.segmentsPerTheme = 20; //n segments for each theme
global.theme = 0;//background theme
global.themePrev = global.theme;
global.maxTheme = 3; //maximum number of available themes - 1
    
//PLAYER VARIABLE
global.player = noone;
    
//local stuff
alarm0 = FPS;
alarm[0] = alarm0;
mouse_xprev = mouse_x;
mouse_yprev = mouse_y;

//score stuff
global.maxCombo = 0; //highest combo
global.curScore = 0; //main score
global.addScore = 0; //pieces of score due to combos and coins
global.scoreCount = 5;
for (i = 0; i &lt; global.scoreCount; i+=1)
    global.scores[i] = 0;

//global variables/flags
global.pause = false;
global.mouseVisible = false;
global.gameOver = false;

global.coinsCollected = 0;
global.enemiesKilled = 0;

global.coins = 0;
global.maxCoins = 0;
global.level = 1; //difficulty display

global.distMagnet = 0; //distance to catch coins and items
global.distMagnetDefault = 1.5*TILE; //distance to catch coins and items
global.distMagnetLarge = 6*TILE; //distance to catch coins and items

global.hasControl = true;
global.timer = 0;

global.startSignal = false;

global.xSpeed = 0; // every object is moved by this speed
global.xSpeedMin = 1; // speed at each start
global.xSpeedMax = 4; // maximum speed
global.xSpeedDefault = global.xSpeedMin; // storage for the speed. this shall be increased over time/achievement/distance

global.difficulty = 0;//used for randomizing objects within segments

global.distance = 0;
global.xSeg = 0;
global.spawnSegment = false;

global.curSeg = 0;
global.prevSeg = 0;

global.saveFile = 'sv.ini';

global.powerUp = POW_NONE;
alarm[1] = 0;
global.powDuration = 0;

global.screenShake = false;
shakeTime = 0;

time = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//GUI etc
draw_set_font(global.fntDefault);
draw_set_color(c_white);
draw_set_valign(fa_top);
draw_set_alpha(1);

if (room != INIT &amp;&amp; !global.gameOver)
{

    if (!global.pause)
    {
        
        if (global.powerUp == POW_1) //MONEY POWER UP
        {
            draw_sprite_part(spriteGfx,-1,5*TILE,6*TILE,2*TILE,2*TILE,(1-alarm[1]/global.powDuration)*WIDTH,0);
            if (global.timer mod 2 == 0)
            {
                var c;
                c = instance_create((1-alarm[1]/global.powDuration)*WIDTH,TILE,objCoin);
                c.spawn = true;
            }
        }
        
        if (global.powerUp == POW_5) //MAGNET POWERUP
        {
            global.distMagnet = global.distMagnetLarge;
        } else
            global.distMagnet = global.distMagnetDefault;
    
    }
    
    //power up stuff
    if (alarm[1] &amp;&amp; global.player.state != DEAD)
    {
        //current power up
        draw_sprite_part(spriteGfx,-1,5*TILE+global.powerUp*TILE,0,TILE,TILE,WIDTH*.5-TILE*.5,.5*TILE);

    } else
    {
        if (global.powerUp != POW_NONE)
            playSound(sfxPowerDown,1);
        global.powerUp = POW_NONE;
    }

    //power up hud border
    draw_sprite_part(spriteHud,-1,0,9*TILE,2*TILE,2*TILE,WIDTH*.5-TILE,0);
    
    if (global.pause)//this "stops" the alarm
        alarm[1] += 1;
    
    a = 0
    b = 0;

    draw_set_font(global.fntScore);
    
    //SCORE
    draw_set_halign(fa_left);
    draw_text(a,0,":" + string(global.curScore));

    draw_set_font(global.fntDefault);
    
    //COINS    
    draw_set_halign(fa_left);
    draw_text(0,HEIGHT-TILE, " $ " + string(global.coinsCollected));

    //LEVEL    
    draw_sprite_part(spriteHud,-1,4*TILE,2*TILE,4*TILE,TILE*.5,0,2*TILE);
    draw_sprite_part(spriteHud,-1,4*TILE,2.5*TILE,4*TILE*min(global.coins/global.maxCoins,1),TILE*.5,0,2*TILE);
    draw_set_halign(fa_center);
    draw_text(2*TILE,1.5*TILE,"Lv. " + string(global.level));

    //CHARGE BAR
    draw_sprite_part(spriteHud,-1,0,2*TILE,4*TILE,TILE*.5,WIDTH*.5-2*TILE,HEIGHT-.5*TILE);
    draw_sprite_part(spriteHud,-1,0,2.5*TILE,4*TILE*min(max(1-(global.player.pow/global.player.maxPow),0),1),TILE*.5,WIDTH*.5-2*TILE,HEIGHT-.5*TILE);
    
    //PAUSE BUTTON
    draw_sprite_part(spriteHud,-1,2*TILE*global.pause,3*TILE,2*TILE,2*TILE,WIDTH-2*TILE,HEIGHT-2*TILE);
    
    //meters
    draw_set_halign(fa_center);
    draw_text(WIDTH/2,HEIGHT-1.5*TILE,string(floor(global.distance*.1))+"m");
    
    //combo counter
    if (global.player.combo &gt; 0 &amp;&amp; global.player.state != DEAD)
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_set_font(global.fntCombo);
        draw_sprite_part(spriteHud,-1,4*TILE,0,4*TILE,2*TILE,0,2.5*TILE);
        var c;
        c = make_color_hsv(
            max(min(35,35-global.player.combo*2),-150),
            max(min(255,255-global.player.combo*.75),150),
            255);
        draw_set_color(c);
        draw_text(2*TILE,3.5*TILE,":"+string(global.player.combo));
        draw_set_color(c_white);
    }
}
//MUTE BUTTON
draw_sprite_part(spriteHud,-1,4*TILE+global.mute*2*TILE,3*TILE,2*TILE,2*TILE,WIDTH-2*TILE,0);

//MOUSE CURSOR
if (global.mouseVisible)
{
    draw_set_alpha(.3);
    draw_set_color(c_black);
    draw_sprite_part_ext(spriteHud,-1,0+2*TILE*mouse_check_button(mb_left),0,2*TILE,2*TILE,mouse_x-TILE+3,mouse_y-TILE+2,1,1,c_black,.3);
    draw_set_alpha(1);
    draw_set_color(c_white);
    draw_sprite_part(spriteHud,-1,0+2*TILE*mouse_check_button(mb_left),0,2*TILE,2*TILE,mouse_x-TILE,mouse_y-TILE);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
