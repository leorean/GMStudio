<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprControlMask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>objAll</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>application_surface_enable(false);
//window_center();
//window_set_size(ZOOM*WIDTH,ZOOM*HEIGHT);

depth = HUDDEPTH;
randomize();


//SL
fm = "This game has been stolen!";
if (string(url_get_domain()) != "spg.erdbeermil.ch")
{
    show_message(fm);
    instance_destroy();
}


global.playthrough = 0; //for ads

global.version = 110; //IF THIS IS CHANGED, IT DELETES THE SAVESTATE
global.saveVersion = 0;
global.saveFile = 'sv.ini';

enum M //mode
{
    TUTORIALMODE = 0,
    NORMALMODE = 1,
    HARDMODE = 2
}

global.mode = M.TUTORIALMODE;

//SOUND
global.mute = false;
instance_create(0,0,objSoundManager);

//MOUSE CURSOR
instance_create(mouse_x,mouse_y,objMouse);

//DEVICE TYPE/INPUT TYPE
switch(os_type)
{
    case os_browser:
    case os_windows:
    case os_linux:
    case os_macosx:
        global.input = INPUT_KEYBOARD;
    break;
    case os_android:
    case os_winphone:
    case os_ios:
    case os_tizen:
        global.input = INPUT_TOUCH;
    break;
    default:
        global.input = INPUT_KEYBOARD; 
    break;
}

//FONTS
global.fntBig = font_add_sprite(spriteFontBig,ord(' '),true,1);
global.fntDefault = font_add_sprite(spriteFontDefault,ord(' '),true,1);
global.fntCombo = font_add_sprite(spriteFontCombo,ord('0'),true,1);
global.fntScore = font_add_sprite(spriteFontScore,ord('0'),true,1);

//SEGMENTS
maxSegments = 80;

segment = unzip("seg.z",maxSegments);

segTut = importSegment(working_directory + "tut.tmx")

//zip("seg.z",maxSegments);
//game_end();

//for (i = 0; i &lt;= maxSegments;i+=1)
//    segment[i] = importSegment(working_directory + string(i)+".tmx");

curSeg = 0;
prevSeg = 0;
    
segmentsPerTheme = 20; //n segments for each theme
theme = 0;//background theme
themePrev = theme;
maxTheme = 3; //maximum number of available themes - 1

//PLAYER VARIABLE
global.player = noone;
    
//other stuff / local variables

maxStartTimer = FPS;
startTimer = maxStartTimer;
mouse_xprev = mouse_x;
mouse_yprev = mouse_y;

//score stuff
global.maxCombo = 0; //highest combo
global.curScore = 0; //main score
global.addScore = 0; //pieces of score due to combos and coins
global.scoreCount = 5;
for (i = 0; i &lt; global.scoreCount; i+=1)
    global.scores[i] = 0;

//GLOBAL VARIABLES!!!
global.pause = false;

global.mouseVisible = false;
global.gameOver = false;

global.coinsCollected = 0;
global.enemiesKilled = 0;

global.hp = 0;
global.maxJumps = 0;

global.xp = 0;
global.level = 1; //difficulty display
global.xpMax = maxEXP(global.level);

global.distMagnet = 0; //temp distance to catch coins and items
global.distMagnetDefault = 0; //distance to catch coins and items
global.distMagnetLarge = 10*TILE; //distance to catch coins and items with chick magnet

global.hasControl = true;
global.timer = 0;

global.startSignal = false;

global.xSpeed = 0; // every object is moved by this speed
global.xSpeedMin = .5; // speed at each start
global.xSpeedMax = 4; // maximum speed
global.xSpeedDefault = global.xSpeedMin; // storage for the speed. this shall be increased over time/achievement/distance

global.difficulty = 0;//used for randomizing objects within segments

global.distance = 0;
global.xSeg = 0;
global.spawnSegment = false;

for (i = 0; i &lt; POW_SIZE; i+=1)
{
    global.powerUp[i] = false;
    global.powDuration[i] = 0;
    global.maxPowDuration[i] = 0;       
}
    
//alarm[1] = 0;
//global.powDuration = 0;

global.screenShake = false;
shakeTime = 0;
time = 0;

global.maxLevelReached = 0;

//-----------------SHOP AND UPGRADE STUFF-----------------

global.wallet = 0; //this is ALL my money.

enum UPGRADE
{
    upHealth = 0,
    upJump = 1,
    upMagnet = 2,
    upDash = 3,
    upBlockChance = 4,
    upPowerUpTime = 5,
    upComboCooldown = 6,
    upSuperDash = 7,
    upPowerUpNew = 8,
    upBlockNew = 9,
    
    SIZE = 10, //enum size. has to be adjusted if enum list above is changed.
    TIER = 0,
    LOCKED = 1,
    PRICE = 2
    
};

//INIT UPGRADE VARIABLES
for (i = 0; i &lt; UPGRADE.SIZE; i+=1)
{
    global.upgrade[i, UPGRADE.TIER] = 0;
    global.upgrade[i, UPGRADE.LOCKED] = true;
}

setUpgradePrices();

//LOAD PROGRESS
loadProgress();

if (global.saveVersion != global.version)
{
    deleteProgress();
    saveProgress();
    loadProgress();
} else
    saveProgress();

//------------------------------------------------------------

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//PAUSE GAME
if (room == MAIN &amp;&amp; !global.gameOver &amp;&amp; !global.pause &amp;&amp; !global.spawnSegment)
    if (global.player.state != DEAD)
    {
        if ((mouse_check_button_pressed(mb_left) &amp;&amp; (in(mouse_x,WIDTH-2*TILE,WIDTH) &amp;&amp; in(mouse_y,HEIGHT-2*TILE,HEIGHT)))
            || keyboard_check_pressed(ord('P')))
            //|| os_is_paused())
            {
                //with(objButton)
                //    instance_destroy();            
                //with(objPauseMenu)
                //    instance_destroy();

                global.pause = true;
                instance_create(0,0,objPauseMenu);
                
                //correct the x error??
                //with (objEnemy)
                //    x -= global.xSpeed;
            }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ticker for timed obstacles etc.
global.timer = (global.timer + 1) mod INFINITE;

//MUTE/UNMUTE
if (mouse_check_button_pressed(mb_any) &amp;&amp; (in(mouse_x,WIDTH-2*TILE,WIDTH) &amp;&amp; in(mouse_y,0,2*TILE)))
    || keyboard_check_pressed(ord('M'))
    {
        global.mute = !global.mute;
        saveOptions();
    }
    
if (room == MAIN &amp;&amp; !global.gameOver)
{

    //global routines here
    if (!global.pause)
    {
        //COUNT SCORE
        //*0.0625 = 1 / TILE
        if (global.mode != M.TUTORIALMODE)
            global.curScore = 10*floor(global.distance*0.0625) + global.addScore;

        //LEVEL UP!!!
        if (global.xp&gt;=global.xpMax || (debug_mode &amp;&amp; keyboard_check_pressed(ord('G'))))
        {
            instance_create(WIDTH/2,HEIGHT/2,objEffectLevelUp);
            global.level += 1;
            
            //EXP SYSTEM AND LEVEL UP FORMULA
            global.xp = 0;
            global.xpMax = maxEXP(global.level);
            
            playSound(sfxLevelUp,1);
            
            if (global.level mod 5 == 0)
            {
                theme = (theme + 1) mod (maxTheme+1);//+1??
                playSound(sfxThemeChange,1);
            }

        }
        startTimer = max(startTimer -1,0);
        //game starts to scroll and stuff AFTER the startsignal is set
        if (startTimer == 0)
        {
            if (!global.startSignal)
            {
            if (global.mode != M.TUTORIALMODE)
                instance_create(0,0,objStartLevel);
            else
                instance_create(WIDTH-3*TILE,HEIGHT/2,objTutorial);
                global.hasControl = true;
                global.startSignal = true;
            }
            //if player dashes, speed is higher.
            global.xSpeed = global.xSpeedDefault*.5+((1+global.player.dashSpeed));
        }
        if (objPlayer.state != DEAD)
        {
            if (global.mode != M.TUTORIALMODE)
                global.distance += global.xSpeed;
        }
        else
            global.xSpeed = 0;
            
        segX -= global.xSpeed;
        
        global.spawnSegment = (floor(segX) &lt; global.xSpeed);
        //SPAWN NEW SEGMENT
        if(global.spawnSegment)
        {
            segX = global.xSpeed + segX + WIDTH;
            if (global.player.state != DEAD)
            {
                if (global.mode != M.TUTORIALMODE)
                {
                    while (curSeg == prevSeg)                
                        curSeg = 1 + theme * segmentsPerTheme + floor(irandom(segmentsPerTheme - 1));
                    constructSegment(segment[
                        min(max(
                            curSeg,
                            1),
                            maxSegments)
                    ],segX,0);
                    prevSeg = curSeg;
                } else
                {
                    constructSegment(segTut,segX,0);
                }
            }
            if (global.mode != M.TUTORIALMODE)
            {
                global.difficulty += 1;
                global.xSpeedDefault = min(global.xSpeedDefault + .018, global.xSpeedMax);
            }
        }
        
        if (!global.screenShake)
        {
            shakeTime = 10;
            view_angle[0]=0;
        } else
        {
            view_angle[0] = -2+(random(4));
            shakeTime = max(shakeTime-1,0);
            if (!shakeTime)
                global.screenShake = false;
        }
    }
    else //THIS IS PAUSE MODE!
    {
        global.xSpeed = 0;
    }

}
if (global.gameOver)
    global.pause = false;

//GAME OVER
if (global.gameOver)
    global.xSpeed = 0;

if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace))
{
    if (room == MAIN)
    {
        if (!global.pause)
        {
            global.pause = true;
            instance_create(0,0,objPauseMenu);
        } else
        {
            saveRun();
            room_goto(INIT);
        }
    }
    else if (room == INIT)
        game_end();
    else
        room_goto(INIT);
}

////////////////////////////////////////////////////debug keys:   
if (debug_mode)
{

    if keyboard_check_pressed(ord('R'))
        room_restart();
    
    if keyboard_check_pressed(ord('Q'))
        room_goto(INIT);
    
    if keyboard_check_pressed(ord('T'))
    {
        if (global.input == INPUT_TOUCH)
            global.input = INPUT_KEYBOARD;
        else
            global.input = INPUT_TOUCH;
    }
    
    if keyboard_check_pressed(ord('E'))
    {
        with(objPowerUp)
            instance_destroy();
        instance_create(global.player.x,global.player.y-TILE,objPowerUp);
    }
    
    if keyboard_check(ord('C'))
    {
        global.player.combo += 1;
        global.player.alarm[1] = global.player.alarm1;
    //    global.difficulty += 1;
    //    with(global.player)
    //        doCombo();
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DEACTIVATE SELF IF IN SHOP
if (room == SHOP) instance_deactivate_object(objControl);
if (room == SCORE) instance_deactivate_object(objControl);
if (room == HELP) instance_deactivate_object(objControl);

//room start
/*
view_visible[0] = true;
view_wview[0] = WIDTH;
view_hview[0] = HEIGHT;
view_wport[0] = WIDTH;
view_hport[0] = HEIGHT;
*/

global.pause = false;    
global.gameOver = false;

if (room == INIT)
{
    instance_create(0,0,objTitleMenu);
    loadProgress();
}
if (room == MAIN)
{
    instance_create(0,0,objCamera);
    
    //INTEGRATE THE UPGRADE EFFECTS:
    
    global.hp = 1 + global.upgrade[UPGRADE.upHealth, UPGRADE.TIER];
    for (i = 1; i &lt; global.hp; i+=1)
    {
        h = instance_create((i-1)*TILE,2.5*TILE,objEffectFollowHeart);
        h.hp = i;
    }
    
    global.maxJumps = 2 + global.upgrade[UPGRADE.upJump, UPGRADE.TIER];
    global.distMagnetDefault = 1*TILE + .4*global.upgrade[UPGRADE.upMagnet, UPGRADE.TIER]*TILE;
    
    //-------------------
    
    time = 0;
    global.coinsCollected = 0;
    global.enemiesKilled = 0;
    global.maxCombo = 0;
    global.level = 1;
    global.xp = 0;
    global.xpMax = maxEXP(global.level);
    global.curScore = 0;
    global.addScore = 0;
    theme = 0;//floor(irandom(global.maxTheme));
    themePrev = theme;
    objCamera.theme = theme * WIDTH;
    
    startTimer = maxStartTimer;

    global.startSignal = false;
    
    global.difficulty = 0;
    
    for (i = 0; i &lt; POW_SIZE; i+=1)
    {
        global.powerUp[i] = false;
        global.powDuration[i] = 0;
        global.maxPowDuration[i] = 0;   
    }
    
    curSeg = 0;
    prevSeg = 0;
    segX = 0;
    distance = 0;
    global.xSpeed = 0;
    global.xSpeedDefault = global.xSpeedMin;
    
    //load first segment
    constructSegment(segment[0], 0, 0);    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objAll)
    instance_destroy();

if (surface_exists(global.drawBuffer))
    surface_free(global.drawBuffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//GUI etc
draw_set_font(global.fntDefault);
draw_set_color(c_white);
draw_set_valign(fa_top);
draw_set_alpha(1);

/*
if(global.input == INPUT_TOUCH)
{
    draw_set_color(c_red);
    for (i = 0;i &lt; 5; i+= 1)
        if (device_mouse_check_button(i,mb_left))
            draw_circle(device_mouse_x(i),device_mouse_y(i),2,0);
    draw_set_color(c_white);
}
*/  

if (room == MAIN)
{

    //COINS
    draw_sprite_part(spriteHud,-1,3*TILE,5*TILE,TILE,TILE,0,HEIGHT-TILE);
    draw_set_halign(fa_left);
    drawText(TILE+2,HEIGHT-TILE-1, string((global.player.state != DEAD)*global.coinsCollected+global.wallet),c_white,c_black,fntNumbers);

}
    
if (room == MAIN &amp;&amp; !global.gameOver)
{

    if (!global.pause)
    {
        
        if (global.powerUp[POW_1]) //MONEY POWER UP
        {
            draw_sprite_part(spriteGfx,-1,4*TILE,3*TILE,2*TILE,2*TILE,(1-global.powDuration[POW_1]/global.maxPowDuration[POW_1])*WIDTH,0);
            if (global.timer mod 4 == 0)
            {
                var c;
                c = instance_create((1-global.powDuration[POW_1]/global.maxPowDuration[POW_1])*WIDTH,TILE,objCoin);
                c.spawn = true;
            }
        }
        
        if (global.powerUp[POW_5]) //MAGNET POWERUP
            global.distMagnet = global.distMagnetLarge;
        else
            global.distMagnet = global.distMagnetDefault;
    
        //power up stuff
        if (global.powerUp[POW_ANY])
        {
            var j;
            j = 1;
            for (i = 0; i &lt; POW_SIZE; i+=1)
            {
                if (!global.pause)
                    global.powDuration[i] = max(global.powDuration[i]-1,0);
                
                if (global.powDuration[i] &gt; 0)
                {
                    if (i &gt; POW_ANY) //ignore the "any" power up
                    {
                        draw_sprite_part(spriteHud,-1,0,8*TILE,2*TILE,6,global.player.x-TILE*.5,global.player.y-j*TILE*.5);
                        draw_sprite_part(spriteHud,-1,0,8*TILE+6,ceil(2*TILE*global.powDuration[i]/global.maxPowDuration[i]),6,global.player.x-TILE*.5,global.player.y-j*TILE*.5);
                        j += 1;
                    }
                } else
                    global.powerUp[i] = false;
            }
    
            if (global.powDuration[POW_ANY] == 0)
            {
                playSound(sfxPowerDown,1);
                for (i = 0; i &lt; POW_SIZE; i+=1)
                {
                    global.powerUp[i] = false;
                    global.powDuration[i] = 0;
                }
            }
        }
    }
    
    a = 0
    b = 0;

    draw_set_font(global.fntScore);
    
    //SCORE
    draw_set_halign(fa_left);
    draw_text(a,0,":" + string(global.curScore));

    draw_set_font(global.fntDefault);

    //LEVEL
    draw_set_halign(fa_center);
    b = 3;
    draw_sprite_part(spriteHud,-1,4*TILE,0,6*TILE,TILE,WIDTH/2-3*TILE,0);
    draw_sprite_part(spriteHud,-1,4*TILE+b,1*TILE,(6*TILE-2*b)*min(global.xp/global.xpMax,1),TILE,WIDTH/2-3*TILE+b,0);
    draw_set_halign(fa_center);
    //draw_text(2*TILE,1.5*TILE,"Lv. " + string(global.level));
    drawText(WIDTH/2,3,"LVL " + string(global.level),c_white,c_black,fntTiny);

    //CHARGE BAR
    draw_sprite_part(spriteHud,-1,0,2*TILE,4*TILE,TILE*.5,WIDTH*.5-2*TILE,HEIGHT-.5*TILE);
    draw_sprite_part(spriteHud,-1,0,2.5*TILE,4*TILE*min(max(1-(global.player.pow/global.player.maxPow),0),1),TILE*.5,WIDTH*.5-2*TILE,HEIGHT-.5*TILE);
    
    //PAUSE BUTTON
    draw_sprite_part(spriteHud,-1,2*TILE*global.pause,3*TILE,2*TILE,2*TILE,WIDTH-2*TILE,HEIGHT-2*TILE);
    
    //meters
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    drawText(floor(WIDTH/2),TILE+1,string(floor(global.distance*.1))+" m",c_white,c_black,fntTiny);
    draw_set_valign(fa_top);
    
    //combo counter
    if (global.player.state != DEAD)
    {
        draw_set_halign(fa_left);
        draw_set_valign(fa_center);
        //draw_sprite_part(spriteHud,-1,4*TILE,2*TILE,4*TILE,.5*TILE,0,2.5*TILE);
        //draw_sprite_part(spriteHud,-1,4*TILE,2.5*TILE,4*TILE*(global.player.alarm[1]/global.player.alarm1),.5*TILE,0,2.5*TILE);
        c = make_color_hsv(floor((global.player.alarm[1]/global.player.alarm1)*80),255,255);
        draw_sprite_part(spriteHud,-1,4*TILE,2*TILE,4*TILE,TILE,0,1.5*TILE);
        draw_sprite_part_ext(spriteHud,-1,8*TILE,2*TILE,4*TILE*(global.player.alarm[1]/global.player.alarm1),TILE,0,1.5*TILE,1,1,c,1);
        if(global.player.combo &gt; 0)
            drawText(4*TILE,2*TILE," x "+string(global.player.combo),c_white,c_black,fntTiny);
    }
    
    //JUMPS
    wj = global.maxJumps*TILE*.5;
    for (i = 0; i &lt; global.maxJumps; i+=1)
        draw_sprite_part_ext(spriteHud,-1,3*TILE,8*TILE,TILE,TILE,WIDTH/2-wj+i*TILE,HEIGHT-1.5*TILE,1,1,c_white,.5);
    for (i = 0; i &lt; (global.maxJumps - global.player.jumpPerformed); i+=1)
        draw_sprite_part(spriteHud,-1,2*TILE,8*TILE,TILE,TILE,WIDTH/2-wj+i*TILE,HEIGHT-1.5*TILE);
}
//MUTE BUTTON
draw_sprite_part(spriteHud,-1,4*TILE+global.mute*2*TILE,3*TILE,2*TILE,2*TILE,WIDTH-2*TILE,0);

if(room == MAIN &amp;&amp; global.mode != M.TUTORIALMODE &amp;&amp; !global.pause)
    if (os_type == os_android || os_browser != browser_not_a_browser)
    {
        draw_set_alpha(1);
        draw_set_halign(fa_center);
        draw_set_valign(fa_top);
        drawText(WIDTH/2,HEIGHT/2-5*TILE,"Beta Version",c_white,c_none,fntTiny);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
