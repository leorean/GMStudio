<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
w = 22*TILE;
h = 13*TILE;

enemyObj = noone; // real enemy encounter, get stats from.

player = instance_create(x+2*TILE, y+5*TILE, objBattleChar);
enemy = instance_create(x+w-4*TILE, y+5*TILE, objBattleChar);

playerDice = instance_create(x+2*TILE, y+2*TILE, objBattleDice);
enemyDice = instance_create(x+w-4*TILE, y+2*TILE, objBattleDice);

playerJumped = false;
enemyJumped = false;

timer = 0;

roundTimer = 0;
roundOver = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!playerJumped)
{
    if (mouse_check_button_pressed(mb_left)
        || keyboard_check_pressed(vk_space))
    {
        player.yVel = -5;
        playerJumped = true;
    }
    timer = .5*SEC;
}
else
{
    if (!enemyJumped)
    {
        timer = max(timer - 1, 0);
        if (!timer)
        {
            enemy.yVel = -5;        
            enemyJumped = true;
        }
    }
}

if (player.value != -1 &amp;&amp; enemy.value != -1)
{    
    // player attacking the enemy
    if (player.value &gt; enemy.value)
    {
        instance_create(enemy.x, enemy.y, objBattleAttack);
        
        var crit = (player.value &gt; enemy.value + 2);
        if (crit)
            dmg = ceil(playerObj.dmg * playerObj.critDmg) - enemyObj.def;
        else
            dmg = playerObj.dmg - enemyObj.def;
        
        var t = instance_create(enemy.x + TILE, enemy.y + TILE, objText);
        t.text = dmg;
        if (crit) t.color = make_color_hsv(35, 255, 255);
        
        enemyObj.hp = max(enemyObj.hp - dmg, 0);
    }
    // enemy attacking player
    else if (player.value &lt; enemy.value)
    {
        instance_create(player.x, player.y, objBattleAttack);
        
        var crit = (enemy.value &gt; player.value + 2);
        
        if (crit)
            dmg = floor(enemyObj.dmg * enemyObj.critDmg) - playerObj.def;
        else
            dmg = enemyObj.dmg - playerObj.def;
            
        var t = instance_create(player.x + TILE, player.y + TILE, objText);
        t.text = dmg;
        if (crit) t.color = make_color_hsv(35, 255, 255);
        
        playerObj.hp = max(playerObj.hp - dmg, 0); 
    }
    else
    {
        //var t = instance_create(x + w/2, 6 * TILE, objText);
        //t.text = "TIE";
        var t1 = instance_create(player.x + TILE, player.y + TILE, objText);
        var t2 = instance_create(enemy.x + TILE, enemy.y + TILE, objText);
        t1.text = "0"; t2.text = "0";
    }
    
    
    player.value = -1;
    enemy.value = -1;
    roundOver = true;    
}

if (!roundOver)
{
    roundTimer = .5*SEC;
}
else
{
    roundTimer = max(roundTimer - 1, 0);
    if (!roundTimer)
    {
    
        if (enemyObj.hp == 0)
        {            
            global.state = G_PLAY;
            
            spawnCoins(enemyObj.lootValue, enemyObj.x, enemyObj.y);
            
            with(objBattleChar) instance_destroy();
            with (objBattleDice) instance_destroy();
            with (enemyObj) instance_destroy();
            instance_destroy();
        } else if (playerObj.hp == 0)
        {        
            with(objBattleChar) instance_destroy();
            with (objBattleDice) instance_destroy();
            with (enemyObj) instance_destroy();
            instance_destroy();            
            global.state = G_OVER;
        } else
        {
            with(objBattleDice) value = 1;
            player.value = -1;
            enemy.value = -1;
            playerDice.rolling = true;
            enemyDice.rolling = true;
            playerJumped = false;
            enemyJumped = false;
            
            roundOver = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_part(sprBattle, -1, 0, 0, 22*TILE, 13*TILE, x, y);

draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_color(c_white);

// player hp bar
draw_sprite_part(sprBattle, -1, 18*TILE, 15*TILE, 4*TILE, TILE, x + TILE, y + 8*TILE);
draw_sprite_part(sprBattle, -1, 18*TILE, 16*TILE, 4*TILE*(playerObj.hp/playerObj.maxHp), TILE, x + TILE, y + 8*TILE);
draw_text(x + 3*TILE, y + 8*TILE, playerObj.hp);

// player hp bar
draw_sprite_part(sprBattle, -1, 18*TILE, 15*TILE, 4*TILE, TILE, x + w - 5 * TILE, y + 8*TILE);
draw_sprite_part(sprBattle, -1, 18*TILE, 16*TILE, 4*TILE*(enemyObj.hp/enemyObj.maxHp), TILE, x + w - 5 * TILE, y + 8*TILE);
draw_text(x + w - 3*TILE, y + 8*TILE, enemyObj.hp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
