<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// variables
xVel = 0;
yVel = 0;
zVel = 0;
z = 0;
zGrav = .15;

xO = x;
offX = 0;

// mouse input
dev = -1;
goffX = 0;
goffY = 0;        

// assign buttons
with(objButton)
{
    if (type == 1) objPlayer.button1 = id;
    if (type == 0) objPlayer.button2 = id;
}

// weapon
sword = instance_create(x, y, objSword);
attacking = false;

// shadow
shadow = instance_create(x, y, objShadow);
shadow.parent = id;
shadow.offX = .5*TILE;
shadow.offY = 1*TILE - 2;

// graphics
frame = 0;
fCur = 0;
fSpeed = .1;
state = WALK;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != G_PLAY)
    exit;

// interaction
var kLeft = (keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right)) || (objDPad.kLeft);// &amp;&amp; objDPad.forceX &gt;= .3);
var kRight = (keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left)) || (objDPad.kRight);// &amp;&amp; objDPad.forceX &gt;= .3);
var kUp = (keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down)) || (objDPad.kUp);// &amp;&amp; objDPad.forceY &gt;= .35);
var kDown = (keyboard_check(vk_down) &amp;&amp; !keyboard_check(vk_up)) || (objDPad.kDown);// &amp;&amp; objDPad.forceY &gt;= .35);

var jumpPressed = keyboard_check_pressed(ord('A')) || (button1.pressed);
var attackPressed = keyboard_check_pressed(ord('S')) || (button2.pressed);
var attackPressing = keyboard_check(ord('S')) || (button2.pressing);

if (state == WALK || state == JUMP)
{    
    //DPAD MOVE
    var fx = (2.5+(1*z&lt;0))*max(objDPad.forceX, 0);
    var fy = (2.5+(1*z&lt;0))*max(objDPad.forceY, 0);
    
    // more grip when turning around
    if (sign(xVel) != sign(lengthdir_x(1,objDPad.angle))) xVel *= .8;
    if (sign(yVel) != sign(lengthdir_y(1,objDPad.angle))) yVel *= .8;
    
    xVel = lengthdir_x(fx, objDPad.angle) - .5*global.xVel;
    yVel = lengthdir_y(fy, objDPad.angle);
    
    xVel = sign(xVel) * min(abs(xVel), 4);
    yVel = sign(yVel) * min(abs(yVel), 4);
        
    if (!kUp &amp;&amp; !kDown) yVel = sign(yVel) * max(abs(yVel) - .1, 0);
    if (!kLeft &amp;&amp; !kRight) xVel = sign(xVel) * max(abs(xVel) - .1, 0);

    if (jumpPressed &amp;&amp; z == 0)
    {
        zVel = -3;
        state = JUMP;
    }
    
    if (attackPressed &amp;&amp; !attacking)
    {
        sword.angle = 360+90;
        attacking = true;
    }

    if (!attacking)
        sword.angle = point_direction(x, y, x+8+xVel, y+yVel);

}

var enemy = instance_place(x+xVel, y+yVel, objEnemy);
if (instance_exists(enemy))
{
    global.state = G_BATTLE;
    var b = instance_create(view_xview + 5*TILE, view_yview + 2.5*TILE, objBattle);
    b.enemy = enemy;
}

if (attacking)
{
    sword.angle = max(sword.angle - 15, 300);
    
    if (sword.angle == 300)
        attacking = false;
        
    with(sword)
    {
        for (i = 0; i &lt; instance_number(objBlock); i++)
        {
            var b = instance_find(objBlock, i);
            if (place_meeting(x, y, b))
                with(b)
                {
                    spawnCoins(1+irandom(500), b.x, b.y);
                    instance_destroy();
                }
        }
    }
}

zVel += zGrav;

z = min(z + zVel, 0);
if (z == 0) zVel = 0;

if (state == JUMP)
{
    yVel *= .95;
    if (z &gt;= 0) state = WALK;
}

if (x + global.xVel + xVel &lt; view_xview + TILE)
{
    //xVel = 0;
    offX ++;
}

xVel = sign(xVel) * min(abs(xVel), 6);
yVel = sign(yVel) * min(abs(yVel), 5);

xVel += global.xVel;

if (x + xVel &lt; view_xview)
    xVel = max(xVel, global.xVel);
if (x + xVel &gt; view_xview+view_wview - TILE)
    xVel = min(xVel, 0);

// collision
if (!place_meeting(x + xVel, y, objSolid))
    x += xVel;
else
{
    xVel = 0;
}

xVel -= global.xVel;

if (!place_meeting(x, y + yVel, objSolid) &amp;&amp; in(y + yVel, 0, room_height - 2*TILE))
    y += yVel;
else
    yVel = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == G_PLAY)
{
    if (state != JUMP)
        fCur = (fCur + fSpeed) % 4;
    else
        fCur = 0 + 2 * (zVel &gt; 0);
    
    frame = floor(fCur);
        
    switch(state)
    {
        case IDLE: //doesn't exist
            break;
        case WALK:
            fSpeed = .13;
            row = 0;
            break;
        case JUMP:
            fSpeed = 0;
            row = 1;
            break;
        case HURT:
        case DIE:
            fSpeed = 0;
            row = 2;
            break;
    }
}

draw_sprite_part(sprPlayer, -1, frame*2*TILE, row*2*TILE, 2*TILE, 2*TILE, x, y + z);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
