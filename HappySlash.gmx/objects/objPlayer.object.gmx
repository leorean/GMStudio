<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// variables
xVel = 0;
yVel = 0;
zVel = 0;
z = 0;
zGrav = .15;

xO = WIDTH/3;
offX = 0;

// mouse input
dev = -1;
goffX = 0;
goffY = 0;        

// assign buttons
with(objButton)
{
    if (type == 1) objPlayer.button1 = id;
    if (type == 0) objPlayer.button2 = id;
}

// weapon
sword = instance_create(x, y, objSword);
attacking = false;

// shadow
shadow = instance_create(x, y, objShadow);
shadow.parent = id;
shadow.offX = .5*TILE;
shadow.offY = 1*TILE - 2;

// graphics
frame = 0;
fCur = 0;
fSpeed = .1;
state = WALK;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// interaction
var kLeft = (keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right)) || (objDPad.kLeft);// &amp;&amp; objDPad.forceX &gt;= .3);
var kRight = (keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left)) || (objDPad.kRight);// &amp;&amp; objDPad.forceX &gt;= .3);
var kUp = (keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down)) || (objDPad.kUp);// &amp;&amp; objDPad.forceY &gt;= .35);
var kDown = (keyboard_check(vk_down) &amp;&amp; !keyboard_check(vk_up)) || (objDPad.kDown);// &amp;&amp; objDPad.forceY &gt;= .35);

var jumpPressed = keyboard_check_pressed(ord('A')) || (button1.pressed);
var attackPressed = keyboard_check_pressed(ord('S')) || (button2.pressed);

/*
var goX = 0;
var goY = y;
if (dev == -1)
{
    for (i = 0; i &lt; 4; i++)
    {
        if (device_mouse_check_button(i, mb_left))
        {
            dev = i;
            goffX = device_mouse_x_to_gui(dev);
        }
    }
}
if (dev != -1)
{
    //var fd = abs(x - view_xview) / WIDTH;
    goX = 4 * ((device_mouse_x_to_gui(dev) / goffX) - 1);
    goY = view_yview + device_mouse_y_to_gui(dev) - TILE;

    if (distance_to_point(view_xview + device_mouse_x_to_gui(dev), view_yview + device_mouse_y_to_gui(dev)) &lt; 1)
    {
        goffX = device_mouse_x_to_gui(dev);
    }
        
    if (!device_mouse_check_button(dev, mb_left))
    {
        dev = -1;
        goffX = 0;
        goffY = 0;
    }
} else
{               
    xVel = sign(xVel) * max(abs(xVel) - .1, 0);
    yVel = sign(yVel) * max(abs(yVel) - .1, 0);    
}*/

if (state == WALK || state == JUMP)
{    
    /*if (kRight) xVel += fx;
    if (kLeft) xVel -= fx;
    
    //xVel = goX;
    //yVel = (goY - y) / 20;
    
    xVel = clamp(xVel, -global.xVel * 1.5, global.xVel);
    
    if (x &lt; view_xview + 2*TILE)
        xVel += .4;
    if (x + xVel &gt; view_xview + view_wview - 2*TILE)
        xVel = 0;
    
    if (kUp) yVel = max(yVel - fy, -2.5);
    if (kDown) yVel = min(yVel + fy, 2.5);
    */
    
    var _a = -sign(kLeft) + sign(kRight);
    var _b = -sign(kUp) + sign(kDown);
        
    xVel = .1 * objDPad.forceX * _a;
    //yVel = 4 * objDPad.forceY * _b;
    
    yVel = (device_mouse_y_to_gui(0) - TILE - y) / 20;
    
    // more grip when turning around
    if (sign(xVel) != sign(_a)) xVel *= .8;
    if (sign(yVel) != sign(_b)) yVel *= .8;    

    xVel = clamp(xVel, -global.xVel * 1.5, global.xVel);
    //yVel = clamp(yVel, -2.5, 2.5);
    
    if (!kUp &amp;&amp; !kDown) yVel = sign(yVel) * max(abs(yVel) - .1, 0);
    if (!kLeft &amp;&amp; !kRight) xVel = sign(xVel) * max(abs(xVel) - .1, 0);

    if (jumpPressed &amp;&amp; z == 0)
    {
        zVel = -3;
        state = JUMP;
    }
    
    if (attackPressed &amp;&amp; !attacking)
    {
        sword.angle = 360+90;
        attacking = true;
    }

    if (!attacking)
        sword.angle = point_direction(x, y, x+8+xVel, y+yVel);

}

if (attacking)
{
    sword.angle = max(sword.angle - 15, 300);
    
    if (sword.angle == 300)
        attacking = false;
        
    with(sword)
    {
        for (i = 0; i &lt; instance_number(objBlock); i++)
        {
            var b = instance_find(objBlock, i);
            if (place_meeting(x, y, b))
                with(b)
                {
                    spawnCoins(1+irandom(500), b.x, b.y);
                    instance_destroy();
                }
        }
    }
}

zVel += zGrav;

z = min(z + zVel, 0);
if (z == 0) zVel = 0;

if (state == JUMP)
{
    yVel *= .95;
    if (z &gt;= 0) state = WALK;
}

if (x + global.xVel + xVel &lt; view_xview + TILE)
{
    //xVel = 0;
    offX ++;
}

xVel = sign(xVel) * min(abs(xVel), 8);
yVel = sign(yVel) * min(abs(yVel), 6);

// collision
if (!place_meeting(x + global.xVel + xVel, y, objSolid))
    x += global.xVel + xVel;
else
{
    xVel = 0;
}

if (!place_meeting(x, y + yVel, objSolid))
    y += yVel;
else
    yVel = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != JUMP)
    fCur = (fCur + fSpeed) % 4;
else
    fCur = 0 + 2 * (zVel &gt; 0);

frame = floor(fCur);
    
switch(state)
{
    case IDLE: //doesn't exist
        break;
    case WALK:
        fSpeed = .13;
        row = 0;
        break;
    case JUMP:
        fSpeed = 0;
        row = 1;
        break;
    case HURT:
    case DIE:
        fSpeed = 0;
        row = 2;
        break;
}

draw_sprite_part(sprPlayer, -1, frame*2*TILE, row*2*TILE, 2*TILE, 2*TILE, x, y + z);

//draw_line(x, y, view_xview + device_mouse_x_to_gui(0), view_yview + device_mouse_y_to_gui(0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
