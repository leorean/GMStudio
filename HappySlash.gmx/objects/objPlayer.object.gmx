<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// variables
xVel = 0;
yVel = 0;
zVel = 0;
z = 0;

acc = .1;
maxSpd = 2;

// shadow
shadow = instance_create(x, y, objShadow);
shadow.parent = id;
shadow.offX = TILE;
shadow.offY = 1.3*TILE;

// graphics
frame = 0;
fCur = 0;
fSpeed = .1;
state = WALK;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// interaction
var left = keyboard_check(vk_left);
var right = keyboard_check(vk_right);
var up = keyboard_check(vk_up);
var down = keyboard_check(vk_down);

//if (left || right || up || down)

if (left &amp;&amp; !right) xVel = max(xVel - acc, -maxSpd);
if (right &amp;&amp; !left) xVel = min(xVel + acc, maxSpd);
if (up &amp;&amp; !down) yVel = max(yVel - acc, -maxSpd);
if (down &amp;&amp; !up) yVel = min(yVel + acc, maxSpd);

// collision
if (!place_meeting(x + global.xVel + xVel, y, objSolid) &amp;&amp; x + xVel &gt; view_xview)
    x += global.xVel + xVel;
else
    xVel = 0;
if (!place_meeting(x, y + yVel, objSolid))
    y += yVel;
else
    yVel = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != JUMP)
    fCur = (fCur + fSpeed) % 4;
else
    fCur = 0 + 2 * (zVel &gt; 0);

frame = floor(fCur);
    
switch(state)
{
    case IDLE: //doesn't exist
        break;
    case WALK:
        fSpeed = .13;
        row = 0;
        break;
    case JUMP:
        fSpeed = 0;
        row = 1;
        break;
    case HURT:
    case DIE:
        fSpeed = 0;
        row = 2;
        break;
}

draw_sprite_part(sprPlayer, -1, frame*2*TILE, row*2*TILE, 2*TILE, 2*TILE, x, y + z);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
