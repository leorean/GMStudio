<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskTile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
surf = -1; //drawing surface
global.zoom = 3;

randomize();
device_mouse_dbclick_enable(true);
if (os_type == os_windows)
{
    window_set_size(1*WIDTH, 1*HEIGHT);
}

global.fnt = font_add_sprite(sprFont, ord(' '), true, 1);
global.fntSmall = font_add_sprite(sprFontSmall, ord(' '), true, 0);

global.coins = 0;
global.coinRadius = 3*TILE;

global.B1 = ds_grid_create(WIDTH div TILE, (HEIGHT div TILE));
global.B2 = ds_grid_create(WIDTH div TILE, (HEIGHT div TILE));

seg[0] = loadSegment("seg0.tmx");
/*seg[1] = loadSegment("seg1.tmx");
seg[2] = loadSegment("seg2.tmx");
seg[3] = loadSegment("seg3.tmx");
seg[4] = loadSegment("seg4.tmx");*/

// TODO: pool for blocks...
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord('R'))
    || keyboard_check_pressed(vk_backspace)) room_restart();

if (keyboard_check_pressed(ord('Q'))) game_restart();

if (keyboard_check_pressed(ord('I'))) global.invincible = !global.invincible;

if (keyboard_check(ord('C')))
    room_speed = 5;
else
    room_speed = 60;

global.mx = (device_mouse_x(0) / room_width) * view_wview + view_xview;
global.my = (device_mouse_y(0) / room_height) * view_hview + view_yview;

var bl = instance_place(global.mx, global.my, objBlock);
if (instance_exists(bl) &amp;&amp; keyboard_check(vk_space))
    bl.hp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.hp == 0)
{
    bar.hurt = true;
    bar.state = DEAD;
    bar.hp = 0;
            
    if (global.state != G_OVER)
    {
        objBall.yVel = -4;
        objBall.broken = true;
    }
    
    global.state = G_OVER;
}

if (global.state == G_START)
{
    instance_activate_object(objBlock);
    
    if (global.hp &gt; 0)
    {
        // reset everything
        global.timer = 0;
        if (instance_number(objBall) &lt; 1)
        {
            bar.hp = bar.maxHp;
            var ball = instance_create(bar.x, bar.y - TILE, objBall);
        }
        
        if (mouse_check_button_released(mb_left))
        {
            global.state = G_PLAY;
            if (instance_exists(objBall))
            {
                objBall.angle = bar.startAngle;            
                objBall.hold = false;
            }
        }
    }
}
if (global.state == G_PLAY)
{

    instance_activate_object(objBlock);

    if (!blockDelay)
    {       
        var top = noone;
        for (i = 0; i &lt; instance_number(objBlock); i++)
        {
            var b = instance_find(objBlock, i);
            if (!instance_exists(top) || top.y &gt; b.y)
            if (!b.falling &amp;&amp; !b.broken &amp;&amp; !b.marked)
                top = b;
        }
    
        if ((!top || top.y &gt;= 0)
            &amp;&amp; !blockDelay)
        {
            //show_debug_message("spawning segment");
            spawnSegment(seg[0]);
        }
        
        for (i = 0; i &lt; instance_number(objBlock); i++)
        {
            var b = instance_find(objBlock, i);
            if (!b.falling &amp;&amp; !b.broken)
            {
                b.move = true;
                b.yVel = .5;
                b.moveDistance = TILE;
            }            
        }
        
        blockDelay = 3*SEC;
        segCount = max(segCount - 1, 0);
        
        meters++;

    }

    if (global.timer % 30 == 0)
    {
        triggerFallingBlocks();
    }

    blockDelay = max(blockDelay - 1, 0);
      
    /*
    // NOTE: the interval must be big enough that the blocks have moved by then.
    if (!blockDelay)
    {
        
        segCount = max(segCount - 1, 0);
        
        var bottom = noone;
        for (i = 0; i &lt; instance_number(objBlock); i++)
        {
            var b = instance_find(objBlock, i);
            if (!instance_exists(bottom) || bottom.y &lt; b.y)
            if (!b.falling &amp;&amp; !b.broken &amp;&amp; !b.marked)
                bottom = b;
        }
                
        if (segCount == 0)
        {
            var _ind = irandom(max(array_length_1d(seg) - 2, 0));
            show_debug_message("spawning segment #" + string(_ind));
            spawnSegment(seg[_ind]);
            segCount = global.segSize;
        }
        
        with(objBlock)
        {
            if(!falling &amp;&amp; !broken)
            {
                move = true;
                yVel = .5;
                moveDistance = TILE;
            }
        }
        
        if (instance_exists(bottom))
        {
            if (bottom &amp;&amp; bottom.y &lt; 12*TILE)
            {
                with(objBlock)
                {
                    if(!falling &amp;&amp; !broken)
                        yVel = .5;
                }
                blockDelay = 32;
            }
        } else
            blockDelay = maxBlockDelay;
                
        meters++;
        
        //with(objBlock) y = (y div TILE) * TILE;
    }*/
    
    //if (global.timer % 30 == 0)
        
    //instance_deactivate_region(0, - 2 * TILE -global.segSize * TILE, WIDTH, global.segSize*TILE, true, true);

    global.timer = (global.timer + 1) % INFINITE;

    if (instance_number(objBall) &lt; 1)
    {
        if (objBar.hurt == 0)
        {
            global.state = G_START;
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Free Surface
if (surface_exists(surf))
    surface_free(surf);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.timer = 0;
global.state = G_START;

instance_create(0, 0, objCamera);

global.xVel = .5;
global.mx = WIDTH/2;
global.my = HEIGHT/2;

global.invincible = false;
global.hp = 3; // 3 balls

global.segSize = 0;
segCount = 0;

meters = 0;
blockDelay = 0;
maxBlockDelay = 3*SEC;
minBlockDelay = 1*SEC;
yVel = .5;

bar = instance_create(view_wview/2, view_hview - 7.5*TILE, objBar);

spawnOffset = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HUD</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ++++ DRAW GUI HERE ++++

var w = display_get_gui_width();
var h = display_get_gui_height();

draw_set_alpha(1);
draw_set_font(global.fnt);
draw_set_color(c_white);

draw_set_halign(fa_right);
draw_set_valign(fa_top);

draw_text(w, 0, string(meters)+ "m");
draw_text(w, TILE, string(global.coins)+ "$");

draw_set_halign(fa_left);
draw_text(0, 0, "HP x" + string(global.hp));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>SHADER STUFF</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++SHADER++++
shader_set(shader0);
draw_clear(c_black);

//--------------------------------------------------

//++++SURFACE++++
if (!surface_exists(surf))
{
    view_hview = HEIGHT;
    view_wview = WIDTH;
    
    var _w = view_wport;
    var _h = view_hport;

    surf = surface_create(_w, _h);
    surface_set_target(surf);
    
    draw_clear(c_black);
    surface_reset_target();
    
    //Set the view that you want to draw to the surface
    view_surface_id[0] = surf;
        
}
else
{

    //Disable alpha blending (not needed since we are drawing the whole view)
    draw_enable_alphablend(false);
    //Draw the surface stretched to the GUI layer
    
    var aspect_x = display_get_gui_width() / surface_get_width(surf);
    var aspect_y = display_get_gui_height() / surface_get_height(surf);
    
    display_set_gui_size(surface_get_width(surf) / global.zoom, surface_get_height(surf) / global.zoom);
    
    var xoffset = (surface_get_width(surf)*aspect_x) / 2;
    var yoffset = (surface_get_height(surf)*aspect_y) / 2;
    draw_surface_ext(surf,
        display_get_gui_width() / 2 - xoffset,
        display_get_gui_height() / 2 - yoffset, aspect_x, aspect_y, 0, c_white, 1);
    
    //Switch on alpha blending again for the next normal draw pass
    draw_enable_alphablend(true);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>DISABLE MASK VISIBILITY</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
