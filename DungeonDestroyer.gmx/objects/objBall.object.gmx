<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;
yGrav = .1;
hold = true;
broken = false;

w = TILE - 2;
sprite_index = mskBall;

ballSpd = 2.5;
angle = 90;

lastBlock = noone; //for score things

// effect stuff
off = 0;
effectTimer = 0;
maxEffectTimer = 7;

combo = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == G_PAUSE) exit;

off = max(off - .07, 0);
effectTimer = max(effectTimer - 1, 0);

if (!broken)
{
    if (hold)
    {    
        xVel = objBar.xVel;
        yVel = objBar.yVel;
    } else
    {
    
        // collide with other balls .. if they exist?
        /*var c = collision_circle(x, y, w/2, objBall, false, true);
        if (instance_exists(c))
        {        
            c.angle = point_direction(x, y, c.x, c.y);
            angle = point_direction(c.x, c.y, x, y);
            off = .5;
            instance_create(x + xVel, y + yVel, objEffect);
        }*/
    
        collectCoins();
        
        /* collide with blocks */
        instance_deactivate_object(objBlock);
        instance_activate_region(x - w, y - w, 2*w, 2*w, true);
        
        for (i = 0; i &lt; instance_number(objBlock); i++)
        {
            var block = instance_find(objBlock, i);
            
            if (collision_circle(x + xVel, y, w/2, block, false, true))
            {                
                if (block.type != 1) // invincible blocks
                {
                    block.hp = max(block.hp - 1, 0);
                }
                            
                if (!block.falling &amp;&amp; !block.broken &amp;&amp; block.type != 0)
                {
                    angle = point_direction(0, 0, -xVel, yVel);
                    x -= xVel;
                    off = .5;
                    if (!effectTimer)
                    {
                        instance_create(x + xVel, y + yVel, objEffect);
                        effectTimer = maxEffectTimer;
                    }
                    adjustBallSpeed();
                    addComboScore(block);
                    ballSpeedAdjusted = true;
                }                
            }
            
            if (collision_circle(x, y + yVel, w/2, block, false, true))
            {
                if (block.type != 1) // invincible blocks
                {
                    block.hp = max(block.hp - 1, 0);
                }
                                            
                if (!block.falling &amp;&amp; !block.broken &amp;&amp; block.type != 0)
                {
                    angle = point_direction(0, 0, xVel, -yVel);
                    y -= yVel;
                    off = .5;
                    if (!effectTimer)
                    {
                        instance_create(x + xVel, y + yVel, objEffect);
                        effectTimer = maxEffectTimer;
                    }
                    adjustBallSpeed();
                    addComboScore(block);
                    ballSpeedAdjusted = true;
                }
            }
            
            if (collision_circle(x, y, w/2, block, false, true)
                &amp;&amp; block.broken &amp;&amp; lastBlock == noone)
            {
                lastBlock = block;
                
                var t = instance_create(block.x + 8, block.y + 8, objText);
                combo++;
                if (combo == 1)
                    t.text = "5";
                else
                    t.text = "5x" + string(combo);
                
                score += combo * 5;
                
                t.size = 1.5 + min(combo div 10, 4);
            }
        }
        
        if (!instance_exists(lastBlock)) lastBlock = noone;
        else if (!collision_circle(x, y, w/2, lastBlock, false, true)) lastBlock = noone;
        
        ballSpeedAdjusted = false;
        
        instance_activate_object(objBlock);
        
        xVel = lengthdir_x(ballSpd, angle);
        yVel = lengthdir_y(ballSpd, angle);
    }
    
    if (y &gt; room_height + w)
    {
        global.hp = max(global.hp - 1, 0);
        xVel = -1+random(2);
        yVel = -4;
        broken = true;
    }
    
    if (in(x + xVel, BORDER + w/2, room_width - BORDER - w/2))
        x += xVel;
    else
    {
        angle = point_direction(x, y, x - xVel, y + yVel);
        off = .5;
        if (!effectTimer)
        {
            instance_create(x + xVel, y + yVel, objEffect);
            effectTimer = maxEffectTimer;
        }
        adjustBallSpeed();
    }
    
    if (y + yVel &gt; BORDER + w/2 &amp;&amp; (y + yVel &lt; room_height - BORDER - w/2 || !global.invincible))
        y += yVel;
    else
    {
        angle = point_direction(x, y, x + xVel, y - yVel);
        off = .5;
        if (!effectTimer)
        {
            instance_create(x + xVel, y + yVel, objEffect);
            effectTimer = maxEffectTimer;
        }
        adjustBallSpeed();
    }
}
else // broken
{

    objBar.hurt = .5*SEC;

    yVel = min(yVel + yGrav, 6);
    x += xVel;
    y += yVel;
    
    if (y &gt; room_height + 2*w) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite(sprite_index, -1, x, y);
//draw_circle(x, y, w/2, 1);

draw_sprite_ext(mskBall, -1, x, y, 1 - off, 1 + .6*off, 
    point_direction(x, y, xprevious, yprevious), 
    c_white, 1);

var lookDir = point_direction(x, y, x + xVel, y + yVel);

draw_sprite_part(sprBar, -1, 0, TILE, TILE, TILE, x-8, y-8);
draw_sprite_part(sprBar, -1, TILE, TILE, 8, 8,
    x-4 + lengthdir_x(2, lookDir), 
    y-4 + lengthdir_y(2, lookDir));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
