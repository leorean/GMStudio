<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;
hold = true;

w = choose(8, TILE, 2*TILE);

if (w == 8) sprite_index = mskBallSmall;
if (w == TILE) sprite_index = mskBall;
if (w == 2*TILE) sprite_index = mskBallBig;

ballSpd = 4;
angle = 90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != G_PLAY) exit;

var col_up = collision_line(bbox_left, bbox_bottom + yVel, bbox_right, bbox_bottom + yVel,
    objBar, true, true) &amp;&amp; yVel &gt; 0;

if (hold)
{
    if (mouse_check_button_released(mb_left))
        hold = false;
    else
    {
        xVel = objBar.xVel;
        yVel = objBar.yVel;
    }
} else
{

    /* collide with other balls */
    var b = collision_circle(x, y, w/2, objBall, false, true);
    if (instance_exists(b))
    {
        b.angle = point_direction(x, y, b.x, b.y);
        angle = point_direction(b.x, b.y, x, y);
    }    

    xVel = lengthdir_x(ballSpd, angle);
    yVel = lengthdir_y(ballSpd, angle);    
}

if (!place_meeting(x + xVel, y, objSolid) 
    &amp;&amp; in(x + xVel, view_xview + w, view_xview + view_wview - w/2))
    x += xVel;
else
{
    angle = point_direction(x, y, x - xVel, y + yVel);
}
    
if (!place_meeting(x, y + yVel, objSolid) 
    &amp;&amp; in(y + yVel, view_yview + w, view_yview + view_hview - w/2))
    y += yVel;
else
{
    angle = point_direction(x, y, x + xVel, y - yVel);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index, -1, x, y);
draw_circle(x, y, w/2, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
