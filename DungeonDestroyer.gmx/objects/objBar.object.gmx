<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskBar</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;

w = 3*TILE;
h = TILE;

targetX = x;
targetY = y;

color = c_white;
off = 0;
state = IDLE;
hurt = false;
broken = false;
lookLeft = 90;
lookRight = 90;

maxHp = 5;
hp = maxHp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord('U'))) w += 8;
if (global.state == G_PAUSE || global.state == G_START)
{
    xVel = 0;
    yVel = 0;
    exit;
}

if (!broken)
{
    off = sign(off) * max(abs(off) - .5, 0);
    if (state == DEFLECT &amp;&amp; off == 0) state = IDLE;
    
    if(device_mouse_check_button(0, mb_left) &amp;&amp; hp &gt; 0 &amp;&amp; !hurt)
    {
        targetX = global.mx;
        targetY = global.my;
        if (off == 0) state = MOVE;
    }
    
    if (state == MOVE &amp;&amp; abs(xVel) &lt; .2 &amp;&amp; off == 0) state = IDLE;
    
    var th = 4;
    var collideBlock = collision_rectangle(x - w/2 + th, y, x + w/2 - th, y, objBlock, false, true);
    if (collideBlock &amp;&amp; !collideBlock.broken)
    {
        // "just" a falling block. hurts but doesn't kill
        if (collideBlock.falling)
        {
            if (!hurt)
            {
                hp = max(hp - 1, 0);
                hurt = .5*SEC;
                var eff = instance_create(collideBlock.x+8, collideBlock.y+8, objEffect);
                eff.type = 1;
                with(collideBlock) instance_destroy();
            }
        }
        else //uh-oh, you've been CRUSHED.
        {
            hurt = 1*SEC;
            hp = 0;
            global.hp = 0;
        }
    }
    
    hurt = max(hurt - 1, 0);
    if (hurt)
    {
        if(hp &gt; 0)
            state = HURT;
        else
            state = DEAD;
        xVel *= .9;
    }
    else
    {
        xVel = (targetX - x) / 6;
        xVel = sign(xVel) * min(abs(xVel), 8);
    }
    
    if (state == HURT &amp;&amp; hurt == 0) state = IDLE;
    
    /* ball bounce mechanic here: */
    var ball = collision_rectangle(x -w/2 + xVel, y - h/2 + yVel, x + w/2 + xVel, y + h/2 + yVel, objBall, false, true);
    if (ball)
    {
        ball.off = .5;
        with(ball) 
        {
            if (!effectTimer)
            {
                instance_create(x + xVel, y + yVel, objEffect);
                effectTimer = maxEffectTimer;
            }
        }
        
        var bs = abs(x - ball.x) / (w/2);
        var pdir = point_direction(x, y, ball.x, ball.y);
        pdir = point_direction(0, 0, lengthdir_x(1, pdir) * bs, lengthdir_y(1, pdir));
        if (ball.y &lt; y)
            ball.angle = clamp(pdir, 20, 160);
        else
            ball.angle = pdir;
        
        with(ball) move_outside_all(90 + 180 * (y &gt; objBar.y), 8);
        if (ball.y &lt; y)
        {        
            off = 6;
            state = DEFLECT;
        }
    }
    
    collectCoins();
    
    var _cbhor = collision_rectangle(x - w/2 + xVel, y - h/2, x + w/2 + xVel, y + h/2, objBlock, false, true);
    if (in(x + xVel, BORDER + w/2, room_width - BORDER - w/2)
        &amp;&amp; (!_cbhor || _cbhor.falling || hurt))
        x += xVel;
    else
        xVel = 0;
    
    var _cbver = collision_rectangle(x - w/2, y - h/2 + yVel, x + w/2, y + h/2 + yVel, objBlock, false, true);
    if (in(y + yVel, BORDER, room_height - BORDER)
        &amp;&amp; (!_cbver || _cbver.falling || hurt))
        y += yVel;
    else
    {
        yVel = 0;
    }
    
    if (hp == 0)
    {
        yVel = -4;
        //lastX = x;
        broken = true;
    }
}
else
{
    yVel = min(yVel + .13, 6);
    y = min(y + yVel, HEIGHT + TILE);    
    //x = lastX - 1 + random(2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite_ext(sprite_index, -1, x, y, 1, 1, 0, c_red, .2);
//draw_rectangle(x - w/2, y - h/2, x + w/2, y + h/2, 1);
//draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom, 1);

if (global.state == G_START)
{
    if (instance_exists(objBall))
    {
        if (global.my &lt; y)
            startAngle = point_direction(objBall.x, objBall.y, global.mx, global.my);
        else
            startAngle = point_direction(global.mx, global.my, objBall.x, objBall.y);
        startAngle = clamp(startAngle % 360, 30, 180 - 30);
        
        draw_sprite_ext(sprArrow, -1, objBall.x, objBall.y, 1, 1, startAngle, c_white, 1);
    }
}

//draw_text(x, y+2*TILE, hp);

// body
for(i = -w/2 + 8; i &lt; w/2 - 8; i+= 8)
    draw_sprite_part(sprBar, -1, 8, 0, 8, TILE, x + i, y - 8 + off);
// body ends
draw_sprite_part(sprBar, -1, 0, 0, 8, TILE, x - w/2, y - 8 + off);
draw_sprite_part(sprBar, -1, TILE, 0, 8, TILE, x + w/2 - 8, y - 8 + off);

// mouth, eyes
if (state == IDLE) {row = 0; eyeRow = 0;}
if (state == MOVE) {row = 1; eyeRow = 0;}
if (state == DEFLECT) {row = 2; eyeRow = 0;}
if (state == HURT) {row = 3; eyeRow = 1;}
if (state == DEAD) {row = 2; eyeRow = 2;}

draw_sprite_part(sprBar, -1, 24,row*TILE, TILE, TILE, x-8, y-8 + off);

// eye direction
var eyeXLeft = x - w/2 + 7;
var eyeXRight = x + w/2 - 7;
var nearestBall = instance_nearest(x,y, objBall);
if (instance_exists(nearestBall))
{
    if (!hurt)
    {    
        lookLeft = point_direction(eyeXLeft, y, nearestBall.x, nearestBall.y);
        lookRight = point_direction(eyeXRight, y, nearestBall.x, nearestBall.y);
    }
    else
    {
        lookLeft = 0;
        lookRight = 180;
    }
}

//eyeballs
draw_sprite_part(sprBar, -1, 0, TILE + TILE*eyeRow, TILE, TILE, eyeXLeft - 8, y - 9 + off);
draw_sprite_part(sprBar, -1, 0, TILE + TILE*eyeRow, TILE, TILE, eyeXRight - 8, y - 9 + off);

var exl = lengthdir_x(2, lookLeft);
var eyl = lengthdir_y(2, lookLeft);
var exr = lengthdir_x(2, lookRight);
var eyr = lengthdir_y(2, lookRight);

//pupils
draw_sprite_part(sprBar, -1, TILE, TILE + 8*eyeRow, 8, 8, eyeXLeft - 4 + exl, y - 5 + eyl + off);
draw_sprite_part(sprBar, -1, TILE, TILE + 8*eyeRow, 8, 8, eyeXRight - 4 + exr, y - 5 + eyr + off);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
