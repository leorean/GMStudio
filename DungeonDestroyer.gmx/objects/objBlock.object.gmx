<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskBlock</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>15</depth>
  <persistent>0</persistent>
  <parentName>objSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>type = 0;
subType = 0;
isCascade = 0;

hp = 1;

move = true;
movey = y;

yGrav = .1;
yVel = .5;
yVelMax = 3;


marked = false;
markedTimer = 1*SEC;
falling = false;
canFall = false;

initialized = false;

broken = false;
frame = 0;
fCur = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!initialized)
{

    switch(type)
    {
        case 0: //GRASS
            hp = 1;
            subType = 0;            
            isCascade = false; //choose(0, 0, 0, 1);
            canFall = false;
        break;
        case 1: //INVINCIBLE        
            hp = 1;
            subType = 0;            
            isCascade = false;
            canFall = true;
        break;
        case 2: //TOUGH
            hp = 3;
            subType = 0;
            isCascade = true;
            canFall = false;
        break;
        case 3: // color/dirt blocks
            hp = 1;
            subType = choose( 0, 1, 2);
            isCascade = true;
            canFall = false;
        break;
    }

    initialized = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>INIT</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!falling)
{

    if (move)
    {
        y = min(y + yVel, movey + TILE);
        if (y == movey + TILE)
            move = false;
    }
    else
    {
        movey = y;
    }

    if (marked)
    {
        markedTimer = max(markedTimer - 1, 0);
        if (!markedTimer)
        {
            if (canFall)
                falling = true;
            else
            {
                broken = true;/*var eff = instance_create(x, y, objBlockEffect);
                eff.type = type;
                instance_destroy();*/
            }
        }
    }
} else
{
    hasAnchor = false;
    yVel = min(yVel + yGrav, yVelMax);
    y += yVel;
}

if(hp == 0)
{
    if (isCascade)
    {
        var bl = instance_place(x - TILE, y, objBlock);
        var br = instance_place(x + TILE, y, objBlock);
        var bu = instance_place(x, y - TILE, objBlock);
        var bd = instance_place(x, y + TILE, objBlock);
        
        if (instance_exists(bl) &amp;&amp; bl.type == type &amp;&amp; bl.subType == subType &amp;&amp; !bl.falling &amp;&amp; !bl.broken) {bl.isCascade = true; bl.hp = 0;}
        if (instance_exists(br) &amp;&amp; br.type == type &amp;&amp; br.subType == subType &amp;&amp; !br.falling &amp;&amp; !br.broken) {br.isCascade = true; br.hp = 0;}
        if (instance_exists(bu) &amp;&amp; bu.type == type &amp;&amp; bu.subType == subType &amp;&amp; !bu.falling &amp;&amp; !bu.broken) {bu.isCascade = true; bu.hp = 0;}
        if (instance_exists(bd) &amp;&amp; bd.type == type &amp;&amp; bd.subType == subType &amp;&amp; !bd.falling &amp;&amp; !bd.broken) {bd.isCascade = true; bd.hp = 0;}
    }
    
    //var eff = instance_create(x, y, objBlockEffect);
    //eff.type = type;
    //instance_destroy();
    broken = true;
}

if (!broken) depth = 15; else depth = -5;
if (y &gt;= room_height) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite_ext(mskBlock, -1, x, y, 1, 1, 0, c_white, .3);
if (!broken)
{
    switch(type)
    {
        case 0:
            row = 0;
            col = 0;        
            break;
        case 1:
            row = 1;
            col = 0;
            break;
        case 2:
            row = 2;
            col = 3 - hp;
            break;
        case 3:
            row = 3 + subType;
            col = getDrawMask();
            break;
    }
    
    var _ox = 0;
    if (marked &amp;&amp; !falling)
    {
        _ox = -1+random(2);
    }
    
    draw_sprite_part(sprBlock, -1, col*TILE, row*TILE, TILE, TILE, x + _ox, y);
}
else
{
    fCur = min(fCur + .25, 6.9);
    frame = floor(fCur);
    
    if (fCur == 6.9) instance_destroy();
    draw_sprite_part(sprBlock, -1, 16*TILE + frame*TILE, type*TILE, TILE, TILE, x, y);
}

if (falling)
{
    _fr = floor(global.timer * .2) % 4;
    draw_sprite_part(sprMisc, -1, _fr*TILE, 0, TILE, TILE, x, y);
}
//if (isCascade) draw_sprite_ext(mskBall, -1, x + 8, y + 8, 1, 1, 0, c_white, .5);


/*if (marked) 
    draw_sprite_ext(mskBlock, -1, x, y, 1, 1, 0, c_black, 1);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
