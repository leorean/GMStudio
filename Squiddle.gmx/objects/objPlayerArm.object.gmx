<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayerArm</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>device = -1;

margin = 3*TILE;

angle = 0;

xVel = 0;
yVel = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (device &lt; 0)
{
    if (distance_to_point(objPlayer.tx,objPlayer.ty) &gt; 7*TILE)
    {
        xVel = (objPlayer.x-x)/80;
        yVel = (objPlayer.y-y)/80;
        
    } else
    {
        xVel *= .9;
        yVel *= .9;
    }
    
    //device = -1;
    for(i = 0; i &lt; 5; i++)
    {
        if (in(device_mouse_x(i),bbox_left-margin,bbox_right+margin)
            &amp;&amp; in(device_mouse_y(i),bbox_top-margin,bbox_bottom+margin)
            &amp;&amp; objPlayer.arm[0].device != i
            &amp;&amp; objPlayer.arm[1].device != i
            &amp;&amp; objPlayer.arm[2].device != i
            &amp;&amp; objPlayer.arm[3].device != i
            &amp;&amp; id == instance_nearest(device_mouse_x(i),device_mouse_y(i),objPlayerArm))
        {
            if (device_mouse_check_button(i,mb_any))
            {
                immersion_play_effect(2);
                device = i;
            }
        } 
    }
} else
{
    xVel = (device_mouse_x(device)-x)/5;
    yVel = (device_mouse_y(device)-y)/5;
    
    if (!device_mouse_check_button(device,mb_any))
    {
        device = -1;
    }

    //x = device_mouse_x(device);
    //y = device_mouse_y(device);
    //xVel = 0;
    //yVel = 0;
}

angle = point_direction(x,y,objPlayer.x,objPlayer.y);

/*
    || !in(device_mouse_x(device),bbox_left-margin,bbox_right+margin)
    || !in(device_mouse_y(device),bbox_top-margin,bbox_bottom+margin))
*/

//colX = instance_place(x,y,objPlayerArm);
//colY = instance_place(x,y,objPlayerArm);
/*
if (!instance_exists(colX))
    x += xVel;
else
{
    move_outside_solid(point_direction(colX.x,colX.y,x,y),1);
    xVel = 0;
    x -= lengthdir_x(1,point_direction(x,y,colX.x,colX.y));            
}
if (!instance_exists(colY))
    y += yVel;
else
{
    move_outside_solid(point_direction(colY.x,colY.y,x,y),1);
    yVel = 0;    
    y -= lengthdir_x(1,point_direction(x,y,colY.x,colY.y));            
}
*/

repeat(abs(xVel))
{
    if (!place_meeting(x+sign(xVel),y,objPlayerArm))
        x += sign(xVel);
    else
    {
        colX = instance_place(x+sign(xVel),y,objPlayerArm);
        if (instance_exists(colX))
            colX.x-=sign(x-colX.x)*abs(xVel);
        xVel = 0;
    }
}
repeat(abs(yVel))
{
    if (!place_meeting(x,y+sign(yVel),objPlayerArm))
        y += sign(yVel);
    else
    {
        colY = instance_place(x,y+sign(yVel),objPlayerArm);
        if (instance_exists(colY))
            colY.y-=sign(y-colY.y)*abs(yVel);
        yVel = 0;
    }
}

/*
if (!instance_exists(colX))// &amp;&amp; !place_meeting(x+xVel,y,objPlayer))
    x += xVel;
else
{
    x -= sign(xVel);
    colX.xVel -= sign(x-colX.y)*abs(xVel);
    xVel = 0;
}
if (!instance_exists(colY))// &amp;&amp; !place_meeting(x,y+yVel,objPlayer))
    y += yVel;
else
{
    y -= sign(yVel);
    colY.yVel -= sign(y-colY.y)*abs(yVel);
    yVel = 0;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprPlayerArm,0,x,y,1,1,angle,c_white,1);

//draw_text(x,y,device);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
