<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>angle = 0;
ta = 0;

arm[0] = instance_create(2*TILE,2*TILE,objPlayerArm);
arm[1] = instance_create(WIDTH-2*TILE,2*TILE,objPlayerArm);
arm[2] = instance_create(2*TILE,HEIGHT-2*TILE,objPlayerArm);
arm[3] = instance_create(WIDTH-2*TILE,HEIGHT-2*TILE,objPlayerArm);

xVel = 0;
yVel = 0;

tx = x;
ty = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == STATE_PLAY)
{

    tx = (arm[0].x+arm[1].x+arm[2].x+arm[3].x)/4;
    ty = (arm[0].y+arm[1].y+arm[2].y+arm[3].y)/4;
    
    xVel = (tx-x)/2;
    yVel = (ty-y)/2;    
    
    angle = (point_direction(x,y,arm[0].x,arm[0].y)
        + point_direction(x,y,arm[1].x,arm[1].y)
        + point_direction(x,y,arm[2].x,arm[2].y)
        + point_direction(x,y,arm[3].x,arm[3].y))/4;
    //angle = (arm[0].angle+arm[1].angle+arm[2].angle+arm[3].angle)/4;

//    if (xprevious != x || yprevious != y)
//    angle = point_direction(xprevious,yprevious,x,y);
    
        
}

x += xVel;
y += yVel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite(sprPlayerProjectile,-1,x,y);
//draw_sprite(sprPlayer,-1,px,py);

with(objPlayerArm)
{
    //n = n = sqrt(power(abs(x-objPlayer.x),2)+power(abs(y-objPlayer.y),2)) div (1.5*TILE);
    var n = 10, fx = 0, fy = 0;
    for (var i = 1; i &lt; n; i++)
    {
        fx = (objPlayer.x-x)/n * i + x;
        fy = (objPlayer.y-y)/n * i + y;
        draw_sprite_ext(sprPlayerArm,2,fx,fy,1,1,angle,c_white,1);
    }

    var n = 4, fx = 0, fy = 0;
    for (var i = 1; i &lt; n; i++)
    {
        fx = (objPlayer.x-x)/n * i + x;
        fy = (objPlayer.y-y)/n * i + y;
        draw_sprite_ext(sprPlayerArm,1,fx,fy,1,1,angle,c_white,1);
    }
}
draw_sprite_ext(sprPlayer,-1,x,y,1,1,angle,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
