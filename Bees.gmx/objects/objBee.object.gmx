<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskBee</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objFriendly</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;
velMax = 1.5;

state = FOLLOW;

sinoff = random(1); //offset for sinus motion

free = false; //if free, behave autonomous

dust = 0;
maxDust = 10;

flower = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.paused)
{
    cx = x + TILE/2;
    cy = y + TILE/2;
    
    bee = instance_place(x+xVel,y+yVel,objFriendly);
    if (instance_exists(bee))
    {
        xVel -= lengthdir_x(.2,point_direction(cx,cy,bee.cx,bee.cy));
        yVel -= lengthdir_y(.2,point_direction(cx,cy,bee.cx,bee.cy));            
    }
    
    if (state == FOLLOW)
    {
        tx = objPlayer.cx;
        ty = objPlayer.cy;
        
        angle = point_direction(cx,cy,tx,ty);
        if (abs(tx-cx)&gt;abs(lengthdir_x(3*TILE,angle))
        || abs(ty-cy)&gt;abs(lengthdir_y(3*TILE,angle)))
        //if (abs(tx-cx)&gt;3*TILE || abs(ty-cy)&gt;3*TILE)
        {
            xVel += sign(tx-cx)*.1;
            yVel += sign(ty-cy)*.1;
            
        } else
        {
            state = IDLE;
            sinoff = random(1);
        }
    }

    /*
        just wait in the air for the next command
    */
    if (state == IDLE)
    {
        xVel *= .9;
        yVel = 1*sin(global.timer*.1+sinoff);
        tx = cx;
        ty = cy;
        if (objPlayer.state == FLY)
            state = FOLLOW;
    }
    /*
        select a flower and gather dust, watching out for fellow worker-bees
    */
    if (state == GATHER)
    {
        if (flower == noone || (instance_exists(flower) &amp;&amp; (dust &gt;= maxDust) || (flower.bee != noone &amp;&amp; flower.bee != id)))
        {
            if (dust &gt;= maxDust)
            {
                if (instance_exists(flower) &amp;&amp; (flower.bee == id || dust &gt;= maxDust))
                    flower.bee = noone;
                state = TRANSPORT;
            }
            else
            {
                var n = instance_number(objFlower);
                for(var i = 0; i &lt;= n; i++)//find nearest flower that has dust
                {
                    flower = instance_nearest(x,y,objFlower);
                    if (instance_exists(flower))
                    {
                        if(flower.dust &gt; 0 &amp;&amp; (flower.bee == noone || flower.bee == id))
                        {
                            flower.bee = id;
                            break;
                        }
                        else
                        {
                            instance_deactivate_object(flower);
                            show_debug_message("i:"+string(i)+",n:"+string(n));
                        }
                    }
                }
                instance_activate_object(objFlower);
                if (instance_exists(flower) &amp;&amp; ((flower.bee != id &amp;&amp; flower.bee != noone) || flower.dust &lt;= 0))
                    flower = noone;
            }
        }
        if (instance_exists(flower))
        {
            tx = flower.cx;
            ty = flower.cy;
            if (abs(tx-cx)&gt;TILE || abs(ty-cy)&gt;TILE)
            {
                xVel += sign(tx-cx)*.3;
                yVel += sign(ty-cy)*.3;
            } else
            {
                xVel *= .9;
                yVel *= .9;
                
                if (place_meeting(x+xVel,y+yVel,flower))
                {
                    if (flower.dust &gt; 0 &amp;&amp; dust &lt; maxDust)
                    {
                        flower.bee = id;
                        flower.dust = max(flower.dust-1,0);
                        dust = min(dust+1,maxDust);
                    } else
                    {
                        flower.bee = noone;
                        flower = noone;
                    }
                }
            }
        } else
            state = TRANSPORT;
    } else
    {
        if (instance_exists(flower) &amp;&amp; flower.bee == id)
            flower.bee = noone;
        flower = noone;
    }
        
    /*
        bring dust to the hive
    */
    if (state == TRANSPORT)
    {
        hive = instance_nearest(cx,cy,objHive);
        if (instance_exists(hive))
        {
            tx = hive.cx;
            ty = hive.cy;
            if (abs(tx-cx)&gt;TILE || abs(ty-cy)&gt;TILE)
            {
                xVel += sign(tx-cx)*.1;
                yVel += sign(ty-cy)*.1;
            } else
            {
                xVel *= .9;
                yVel *= .9;
            }
            if (place_meeting(x+xVel,y+yVel,hive) &amp;&amp; dust &gt; 0)
            {
                dust = max(dust-1,0);
                hive.honey += 1;
            }
        }
        if (dust &lt;= 0)
        {
            state = FOLLOW;
        }
    }
    
    if (state == IDLE || state == FOLLOW || state == GATHER)
        velMax = 2;
    else
        velMax = 1;
    xVel = sign(xVel)*min(abs(xVel),velMax);
    yVel = sign(yVel)*min(abs(yVel),velMax);

    if (!place_meeting(x+xVel,y,objBlock))
        x += xVel;
    else
        xVel = -xVel;
    if (!place_meeting(x,y+yVel,objBlock))
        y += yVel;
    else
        yVel = -yVel;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == IDLE) c = c_white;
if (state == FOLLOW) c = c_green;
if (state == GATHER) c = c_yellow;
if (state == TRANSPORT) c = c_maroon;
if (state == ATTACK) c = c_red;

draw_sprite_ext(mskBee,-1,x,y,1,1,0,c,1);
draw_text(x,y-TILE,dust);

if (instance_exists(flower))
draw_line(cx,cy,flower.cx,flower.cy);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
