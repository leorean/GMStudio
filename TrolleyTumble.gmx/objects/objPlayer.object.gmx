<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>balance = 0;
maxBalance = 4;

fCur = 0;
fMax = 2;
fSpeed = .3;

dir = NONE;

xVel = 0;
yVel = 0;

z = 0;
zVel = 0;
zGrav = .12;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++steer++++
if (keyboard_check(vk_left)) dir = LEFT;
else if (keyboard_check(vk_right)) dir = RIGHT;
else dir = NONE;
//++++jump++++
if (keyboard_check(vk_up) &amp;&amp; z == 0) zVel = -2;

if (dir == LEFT) balance = max(balance - .4, -maxBalance);
else if (dir == RIGHT) balance = min(balance + .4, maxBalance);
else if (dir == NONE) balance = sign(balance) * max(abs(balance) - .4, 0);

//x
xVel = 1*balance/maxBalance;
if (in(x+xVel,TILE,WIDTH-TILE))
{
    x += xVel;
}
else
{
    xVel = 0;
}

//z
zVel += zGrav;
z = min(max(z + zVel, -TILE), 0);
if (z &gt;= 0) z = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var row = round(abs(balance/maxBalance) * 3);

fCur = (fCur + fSpeed) % fMax;
var frame = floor(fCur);

if (balance &lt; 0)
{
    draw_sprite_part_ext(sprAssets,-1,row*3*TILE,fMax*4*TILE,3*TILE,4*TILE,x-1.5*TILE,y-2*TILE,1,1,c_white,.5);
    draw_sprite_part_ext(sprAssets,-1,row*3*TILE,frame*4*TILE,3*TILE,4*TILE,x-1.5*TILE,y-2*TILE+z,1,1,c_white,1);
}
else
{
    draw_sprite_part_ext(sprAssets,-1,row*3*TILE,fMax*4*TILE,3*TILE,4*TILE,x-1.5*TILE+3*TILE,y-2*TILE,-1,1,c_white,.5);
    draw_sprite_part_ext(sprAssets,-1,row*3*TILE,frame*4*TILE,3*TILE,4*TILE,x-1.5*TILE+3*TILE,y-2*TILE+z,-1,1,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
