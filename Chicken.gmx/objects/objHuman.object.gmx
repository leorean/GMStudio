<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHuman</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objLiving</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;
zVel = 0;
zGrav = .1;
z = 0;

angle = 270; //down

state = S.WAIT;
timer = 20*irandom(3);

spd = .3;
spdPanic = .9;
steer = 5;

dieTimer = 60;

maxStamina = 300;
stamina = maxStamina;
knockback = 0;

onStreet = false;

shadow = instance_create(x,y,objShadow);
shadow.parent = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.paused)
{
    depth = (z &gt;= 0) * (D.LIVING + (room_height - y));

    if (in(x,view_xview[0]-TILE,view_xview[0]+view_wview[0]+TILE)
    &amp;&amp; in(y,view_yview[0]-TILE,view_yview[0]+view_hview[0]+TILE))
        visible = true;
    else
        visible = false;
        
    timer = max(timer - 1,0);
    
    if (state == S.WALK || state == S.WAIT)
        spread = choose(true,false);
    
    switch (state)
    {
        case S.WAIT:
            xVel = 0;
            yVel = 0;
            if (timer == 0)
            {
                angle = random(360);
                timer = irandom(5)*20;
                state = S.WALK;
            }
        break;
        case S.WALK:
            xVel = lengthdir_x(spd+onStreet*spd,angle);
            yVel = lengthdir_y(spd+onStreet*spd,angle);
            if (timer == 0 &amp;&amp; !onStreet)
            {
                //angle = random(360);
                timer = irandom(3)*30;
                state = S.WAIT;
            }
        break;
        case S.PANIC:
            xVel = lengthdir_x(spdPanic*(stamina/maxStamina),angle);
            yVel = lengthdir_y(spdPanic*(stamina/maxStamina),angle);
            angle = (angle - steer + random(2*steer)) mod 360;
            
            stamina = max(stamina - 1,0);
            if (stamina == 0)
            {
                state = S.WALK;
                stamina = maxStamina;
            }
        break;
        case S.DIE:
            xVel *= .95;
            yVel *= .95;
            if (abs(xVel) == 0 &amp;&amp; abs(yVel) == 0)
            {
                instance_destroy();
            }
        break;
    }
    
    if (state != S.DIE)
    {
        //watch out for street
        tile = tile_layer_find(D.TILES,x+xVel,y+yVel);
        if (tile != -1)
        {
            if (tile_get_top(tile) == 1*TILE)
            {
                if (state == S.PANIC)
                    onStreet = true;                
                if (state != S.PANIC &amp;&amp; !onStreet)
                {
                    x -= xVel;
                    y -= yVel;
                    xVel = -xVel;
                    yVel = -yVel;
                    angle = point_direction(x,y,x+xVel,y+yVel);
                    timer += irandom(2)*20;
                }
                stamina = min(stamina + 1, maxStamina);                
            } else
                onStreet = false;
        }
        //spread panic
        victim = instance_place(x,y,objHuman);
        if (instance_exists(victim))
            if (victim.state == S.DIE)
                victim = noone;
        if (state == S.PANIC &amp;&amp; spread &amp;&amp; instance_exists(victim))
        {
            victim.angle = point_direction(x,y,victim.x,victim.y);
            victim.state = S.PANIC;
        }
    }
        
    //++++collisions++++
    zVel += zGrav;
    z = min(z + zVel, 2);
    
    if (z &gt; 0)
    {
        z = 0;
        zVel = 0;
    }
    if (place_free(x+xVel,y) &amp;&amp; x+xVel &gt; 0 &amp;&amp; x+xVel &lt; room_width)
        x += xVel;
    else
    {
        if (!place_free(x+xVel+sign(xVel),y))
            x -= sign(xVel);
            
        xVel = -xVel;
        angle = point_direction(x,y,x+xVel,y+yVel);
        if (state == S.DIE)
            xVel = 0;

        timer = 0;
    }
    if (place_free(x,y+yVel) &amp;&amp; y+yVel &gt; 0 &amp;&amp; y+yVel &lt; room_height)
        y += yVel;
    else
    {
        if (!place_free(x,y+yVel+sign(yVel)))
            y -= sign(yVel);

        yVel = -yVel;
        angle = point_direction(x,y,x+xVel,y+yVel);
        if (state == S.DIE)
            yVel = 0;

        timer = 0;        
    }
    if (x &lt; 0) x++;
    if (x &gt; room_width)x--;
    if (y &lt; 0) y++;
    if (y &gt; room_height)y--;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var c;
c = c_white;
if (state == S.PANIC)
    c = c_yellow;
if (state == S.DIE)
    c = c_red;

draw_sprite_ext(sprHuman,-1,x,y+z,1,1,angle,c,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
