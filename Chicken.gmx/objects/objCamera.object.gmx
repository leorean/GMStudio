<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
window_set_size(ZOOM*400,ZOOM*240);
window_center();

view_xview[1] = 0;
view_yview[1] = -400;

depth = D.HUD;

automatic = true;

wheelTimer = 0;
pressTimer = 0;
diameter = 0;
lastDiameter = 0;

zoom = 1;
xP = x;
yP = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_wview[0] = WIDTH*zoom;
view_hview[0] = HEIGHT*zoom;

//check if the mouse is in the game view or in the HUD view
if (in(mouse_x,view_xview[0],view_xview[0]+view_wview[0]) &amp;&amp; 
    in(mouse_y,view_yview[0],view_yview[0]+view_hview[0]))
    global.inGame = true;
else if (mouse_check_button(mb_any))
    global.inGame = false;    

//++++adjust camera to player if playing
if (global.mode == M.PLAY)
    automatic = true;
    
//++++wheel gesture++++++++++++++++++
wheelGesture = NONE;

if (global.inGame)
{
    fingerCount = 0;
    for (i = 0; i &lt; 5; i++)
        if (device_mouse_check_button(i,mb_left))
                fingerCount++;
    
    xW[0] = 0; yW[0] = 0; xW[1] = 0; yW[1] = 0;
    
    if (device_mouse_check_button(0,mb_left))
    {
        xW[0] = device_mouse_x_to_gui(0);
        yW[0] = device_mouse_y_to_gui(0);
    }
    if (device_mouse_check_button(1,mb_left))
    {
        xW[1] = device_mouse_x_to_gui(1);
        yW[1] = device_mouse_y_to_gui(1);
    }
    
    if (fingerCount == 2) //2 fingers used
    {
        x = (xW[0] + xW[1]) / 2;
        y = (yW[0] + yW[1]) / 2;
        
        diameter = sqrt( power(abs(xW[0]  - xW[1]), 2) + power(abs(yW[0]  - yW[1]), 2));
        show_debug_message("diameter: " + string(diameter));
        
        if ((diameter - lastDiameter) &gt; 5)
            wheelGesture = UP;
        if ((diameter - lastDiameter) &lt; -5)
            wheelGesture = DOWN;
            
        lastDiameter = diameter; //stored for comparison
    }
}
//+++++++++++++++++++++++++++++++++++


//++++ move the mouse by dragging++++
if (global.inGame)
{
    if (global.mode != M.AIM)
    {
        if (mouse_check_button_pressed(mb_left) &amp;&amp; fingerCount == 1)
        {
            xP = device_mouse_x_to_gui(0);
            yP = device_mouse_y_to_gui(0);
            //x = xP;
            //y = yP;
            
        }
        if (mouse_check_button(mb_left) &amp;&amp; fingerCount == 1)
        {
            x = mouse_x;
            y = mouse_y;
            view_hspeed[0] = ceil(1 + zoom);
            view_vspeed[0] = ceil(1 + zoom);
        } else
        {
            view_hspeed[0] = 4;
            view_vspeed[0] = 4;
        }
    }
}
//+++++++++++++++++++++++++++++++++++
if (mouse_check_button(mb_any) || mouse_wheel_up() || mouse_wheel_down() || wheelGesture != NONE)
{
    wheelTimer = 60;
} else
    wheelTimer = max(wheelTimer - 1, 0);


if (mouse_wheel_up() || wheelGesture == UP)
    zoom = max(zoom - .02, .5);
else if (mouse_wheel_down() || wheelGesture == DOWN)
    zoom = min(zoom + .02, min(room_height/HEIGHT, room_width/WIDTH));
else if (automatic &amp;&amp; global.inGame)
{
    var xMin,yMin,xMax,yMax;
    xMin = 0; yMin = 0; xMax = 0; yMax = 0;
    for(i = 0; i &lt;= instance_number(objLiving); i++)
    {
        var l;
        l = instance_find(objLiving,i);
        xMin = min(xMin, l.x);
        yMin = min(yMin, l.y);
        xMax = max(xMax, l.x);
        yMax = max(yMax, l.y);
    }
    
    var w,h;
    w = abs(xMax - xMin)/room_width;
    h = abs(yMax - yMin)/room_height;
    
    if (global.mode == M.SPECTATE)
    {
        zoomAim = 2.5*max(w,h);
        if (!instance_exists(global.player) || mouse_check_button(mb_left))
            view_object[0] = objCamera;
        else
            view_object[0] = objPlayer;
    }
    else if (global.mode == M.PLAY || global.mode == M.AIM)
    {
        zoomAim = max(.5,2.5*(objPlayer.stamina / objPlayer.maxStamina));
        view_object[0] = objPlayer;
    }
    else if (global.mode == M.GAMEOVER)
    {
        zoomAim = min(room_height/HEIGHT, room_width/WIDTH);
        view_object[0] = objCamera;
    }
    
    
    if (wheelTimer == 0)
    {
        if (global.mode == M.SPECTATE)
        {
            x = (xMin + xMax)/2;
            y = (yMin + yMax)/2;
        } else
        {
            x = objPlayer.x;
            y = objPlayer.y;
        }
    }
    
    if (wheelTimer == 0)
    {
        if (zoom &gt; zoomAim)
            zoom = max(zoom - .001, .5);
        if (zoom &lt; zoomAim)
            zoom = min(zoom + .001, min(room_height/HEIGHT, room_width/WIDTH));
    }

    
}

x = min(max(0 + view_wview[0]/2, x) , room_width - view_wview[0]/2);
y = min(max(0 + view_hview[0]/2, y) , room_height - view_hview[0]/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++DRAW IN HUD VIEW
if (view_current == 1)
{
    var a,b,c,d;
    a = view_xview[1]; b = view_yview[1]; c = view_wview[1]; d = view_hview[1];
    
    draw_set_color(c_black);
    draw_set_alpha(1);
    draw_rectangle(a,b,a+c,b+d,0);

    draw_set_color(c_red);
    draw_rectangle(a,b,a+2*TILE,b+2*TILE,0);

    if (in(mouse_x,a,a+2*TILE) &amp;&amp; in(mouse_y,b,b+2*TILE) &amp;&amp; mouse_check_button_released(mb_left))
        global.menu = !global.menu;
}

/*
draw_set_color(c_black);
draw_set_alpha(1);
draw_rectangle(view_xview[1],view_yview[1],view_xview[1]+view_wview[1],view_yview[1]+view_hview[1],0);

draw_set_color(c_red);
draw_rectangle(view_xview[1],view_yview[1],view_xview[1]+2*TILE,view_yview[1]+2*TILE,0);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
