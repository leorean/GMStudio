<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
window_set_size(3*WIDTH,3*HEIGHT);
window_center();

wheelTimer = 0;
pressTimer = 0;
diameter = 0;
lastDiameter = 0;

zoom = 1;
xP = x;
yP = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_wview[0] = WIDTH*zoom;
view_hview[0] = HEIGHT*zoom;

//++++wheel gesture++++++++++++++++++
wheelGesture = NONE;
fingerCount = 0;
for (i = 0; i &lt; 5; i++)
    if (device_mouse_check_button(i,mb_left))
            fingerCount++;

xW[0] = 0; yW[0] = 0; xW[1] = 0; yW[1] = 0;
        
if (device_mouse_check_button(0,mb_left))
{
    xW[0] = device_mouse_x_to_gui(0);
    yW[0] = device_mouse_y_to_gui(0);
}
if (device_mouse_check_button(1,mb_left))
{
    xW[1] = device_mouse_x_to_gui(1);
    yW[1] = device_mouse_y_to_gui(1);
}

if (fingerCount == 2) //2 fingers used
{
    diameter = sqrt( power(abs(xW[0]  - xW[1]), 2) + power(abs(yW[0]  - yW[1]), 2));
    show_debug_message("diameter: " + string(diameter));
    
    if ((diameter - lastDiameter) &gt; 5)
        wheelGesture = UP;
    if ((diameter - lastDiameter) &lt; -5)
        wheelGesture = DOWN;
        
    lastDiameter = diameter; //stored for comparison
}
//+++++++++++++++++++++++++++++++++++


//++++ move the mouse by dragging++++
if (mouse_check_button_pressed(mb_left))
{
    xP = device_mouse_x_to_gui(0);
    yP = device_mouse_y_to_gui(0);
    x = xP;
    y = yP;
    
}
if (mouse_check_button(mb_left))
{
    x = mouse_x;
    y = mouse_y;
}

//+++++++++++++++++++++++++++++++++++

if (mouse_check_button(mb_any) || mouse_wheel_up() || mouse_wheel_down() || wheelGesture != NONE)
{
    wheelTimer = 120;
} else
    wheelTimer = max(wheelTimer - 1, 0);


if (mouse_wheel_up() || wheelGesture == UP)
{
    zoom = max(zoom - .02, .5);
}
else if (mouse_wheel_down() || wheelGesture == DOWN)
{
    zoom = min(zoom + .02, min(room_height/HEIGHT, room_width/WIDTH));
}
else
{
    var xMin,yMin,xMax,yMax;
    xMin = 0; yMin = 0; xMax = 0; yMax = 0;
    for(i = 0; i &lt;= instance_number(objLiving); i++)
    {
        var l;
        l = instance_find(objLiving,i);
        xMin = min(xMin, l.x);
        yMin = min(yMin, l.y);
        xMax = max(xMax, l.x);
        yMax = max(yMax, l.y);
    }
    
    var w,h;
    w = abs(xMax - xMin)/room_width;
    h = abs(yMax - yMin)/room_height;
    
    if (wheelTimer == 0)
    {
        zoomAim = 2.2*max(w,h);
        x = (xMin + xMax)/2;
        y = (yMin + yMax)/2;
        
        if (zoom &gt; zoomAim)
            zoom = max(zoom - .02, .5);
        if (zoom &lt; zoomAim)
            zoom = min(zoom + .02, min(room_height/HEIGHT, room_width/WIDTH));
    }
        
}

x = min(max(0 + view_wview[0]/2, x) , room_width - view_wview[0]/2);
y = min(max(0 + view_hview[0]/2, y) , room_height - view_hview[0]/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(TILE,TILE,"TEST");
//draw_text(3*WIDTH - TILE, 3*HEIGHT - TILE,"BLUB");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red);
draw_point(x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
