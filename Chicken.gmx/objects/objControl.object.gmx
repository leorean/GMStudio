<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum M //playmode
{
    SPECTATE = 0,
    PLAY = 1,
    GAMEOVER = 2,
    AIM = 3
}
enum S //states
{
    WAIT = 0,
    WALK = 1,
    PANIC = 2,
    DIE = 3
}
enum D //depth
{
    HUD = -100,
    TILES = 1000000,
    LIVING = -1,
    PLAYER = -10
}
mask_index = sprChicken;

instance_create(room_width/2,room_height/2,objCamera);
device_mouse_dbclick_enable(true);

mask_index = sprHuman; //should be a mask larger than the humans
randomize();

depth = D.HUD;

//++++important globals
global.paused = false;
global.timer = 0;
global.inGame = true; //mouse check.. if true, ingame actions enabled, else: HUD/camera actions enabled.
global.mode = M.SPECTATE;

global.player = noone;
global.turns = 5;

force = 0;
minForce = TILE;
maxForce = 4*TILE;

//++++menu stuff
global.menu = false;
vs = 8;
vhp = 48;
vyp = 192;
vhw = 48;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.timer = (global.timer + 1) mod INFINITE;

//if (!in(device_mouse_raw_x(0),0,window_get_width()) || !in(device_mouse_raw_y(0),0,window_get_height()))
//    mouse_clear(mb_any);

if (global.inGame)
{
}

if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace))
    game_end();

//menu slider
if (global.menu)
{
    vhp = min(vhp + vs, 240);
    vyp = max(vyp - vs, 0);
    vhw = min(vhw + vs , 240);
    global.paused = true;
} else
{
    vhp = max(vhp - vs, 48);
    vyp = min(vyp + vs, 192);
    vhw = max(vhw - vs, 48);
    if (vyp == 192) 
        global.paused = false;
}
view_hport[1] = vhp;
view_yport[1] = vyp;
view_hview[1] = vhw;

//++++DEBUG KEYS+++++++++++++++++++++++++++
if (keyboard_check_pressed(ord('D')))
    global.menu = !global.menu;

if (keyboard_check_pressed(ord('P')))
    with(objChicken)
        state = S.PANIC;

if (keyboard_check_pressed(ord('Q')))
    game_restart();
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.player = noone;

//initiate map:
for (i = 0; i &lt; room_width; i+= TILE)
for (j = 0; j &lt; room_height; j+= TILE)
{
    tile = tile_layer_find(D.TILES,i,j);
    if (tile != -1)
        if (tile_get_top(tile) &gt;= 2*TILE)
        {
            instance_create(i,j,objBlock);
        }
}

//spawn humans:
repeat(100)
{
    var i;
    i = 0;
    while (i = 0)
    {
        rx = TILE + TILE*random(room_width/TILE - 2) + TILE/2;
        ry = TILE + TILE*random(room_height/TILE - 2) + TILE/2;
        tile = tile_layer_find(D.TILES,rx,ry);

        //no spawning on the street
        if (tile != -1)
            if (tile_get_top(tile) == 1*TILE) tile = -1;
            
        if (place_free(rx,ry) &amp;&amp; tile != -1)
        {
            instance_create(rx,ry,objHuman);
             i++;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_set_color(c_white);

if (!global.paused)
{

    if (global.inGame &amp;&amp; global.mode != M.GAMEOVER)
    {
        if (global.mode == M.SPECTATE)
        {
            //++++ show where player can be placed++++
            tile = tile_layer_find(D.TILES,mouse_x,mouse_y);
            if (tile != -1)
                canPlace = (tile_get_top(tile) == 0*TILE);
            else
                canPlace = false;
            
            if (!canPlace &amp;&amp; !instance_exists(global.player))
                draw_sprite_part(sprMisc,-1,0,0,TILE,TILE,(mouse_x div TILE)*TILE, (mouse_y div TILE)*TILE);
            
            if (mouse_check_button_pressed(mb_right) &amp;&amp; canPlace)
                if (!instance_exists(global.player))
                    global.player = instance_create(mouse_x,mouse_y, objPlayer);
            
            if (mouse_check_button_pressed(mb_left))
            {
                p = instance_place(mouse_x,mouse_y,objPlayer);
                if (instance_exists(p))
                {
                    global.player = p;
                    sX = global.player.x;
                    sY = global.player.y;
                    global.mode = M.AIM;
                }
            }
        }
        if (global.mode == M.AIM)
        {
            if (mouse_check_button(mb_left))
            {
                force = max(min(sqrt(power(abs(mouse_x - sX),2) + power(abs(mouse_y - sY),2)), maxForce), minForce);
                angle = point_direction(sX,sY,mouse_x,mouse_y);
                global.player.angle = angle;
                global.player.spd = force / TILE;
                
                //drawCircle(sX,sY,force,1);
                //drawCircle(sX,sY,maxForce,1);
                draw_sprite_ext(sprAim,-1,sX,sY,force/TILE/2,force/TILE/2,angle,c_white,1);
            }
            if (mouse_check_button_released(mb_left))
            {
                global.player.state = S.PANIC;
                global.mode = M.PLAY;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
