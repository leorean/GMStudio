<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objLiving</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;
zVel = 0;
zGrav = .1;
z = 0;

angle = 270; //down

state = S.WAIT;

spd = 1;

maxStamina = 600;
stamina = maxStamina;

shadow = instance_create(x,y,objShadow);
shadow.parent = id;

fCur = 0;
fSpeed = 0;
fMax = 4;
sx = 1;
row = 0;
col = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.paused)
{
    depth = (z &gt;= 0) * (D.PLAYER + (room_height - y));
    
    switch (state)
    {
        case S.WAIT:
            xVel = 0;
            yVel = 0;
        break;
        case S.PANIC:
            xVel = lengthdir_x(spd*(stamina/maxStamina)*(1- .5*(z != 0)),angle);
            yVel = lengthdir_y(spd*(stamina/maxStamina)*(1- .5*(z != 0)),angle);
            
            if (keyboard_check(vk_left))
                angle = (angle + 3) % 360;
            if (keyboard_check(vk_right))
                angle = (angle - 3) % 360;
            
            stamina = max(stamina - 1,0);
            if (stamina == 0)
            {
                stamina = maxStamina;
                state = S.WAIT;
                with (objHuman)
                    if (state != S.DIE) state = choose(S.WAIT,S.WALK);
                
                if (global.turns == 0)
                    global.mode = M.GAMEOVER;
                else
                {
                    global.turns = max(global.turns - 1, 0);
                    global.mode = M.SPECTATE;
                }
                //instance_destroy();
            }
            
            //spread panic (chicken and humans)
            victim = instance_place(x+xVel,y+yVel,objChicken);
            if (!instance_exists(victim))
            victim = instance_place(x+xVel,y+yVel,objHuman);
            if (instance_exists(victim))
                if (victim.state != S.DIE)
                {
                    victim.state = S.PANIC;
                    victim.angle = point_direction(x,y,victim.x,victim.y);
                    victim.xVel = lengthdir_x(3*spd,victim.angle);
                    victim.yVel = lengthdir_y(3*spd,victim.angle);
                    victim.stamina = victim.maxStamina;
                    
                    stamina *= .99;
                    //angle = point_direction(victim.x,victim.y,x,y);
                    
                    if (place_free(victim.x + victim.xVel + xVel, victim.y + victim.yVel + xVel))
                    {
                        victim.x += xVel;
                        victim.y += yVel;
                    }
                    victim = noone;
                }
            //car interaction
            victim = instance_place(x-xVel,y-yVel,objCar);
            if (instance_exists(victim))
            {
                if (z == victim.z)
                {
                    angle = point_direction(victim.x,victim.y,x,y);
                    zVel = -2;
                }
            }
            
        
        break;
        case S.DIE:
            xVel *= .95;
            yVel *= .95;
            if (abs(xVel) == 0 &amp;&amp; abs(yVel) == 0)
            {
                instance_destroy();
            }
        break;
    }
        
    //collisions
    zVel += zGrav;
    z = min(z + zVel, 2);
    
    if (z &gt; 0)
    {
        z = 0;
        zVel = 0;
    }
    
    if (place_free(x+xVel,y) &amp;&amp; x+xVel &gt; 0 &amp;&amp; x+xVel &lt; room_width)
        x += xVel;
    else
    {
        xVel = -xVel;
        angle = point_direction(x,y,x+xVel,y+yVel);
    }
    if (place_free(x,y+yVel) &amp;&amp; y+yVel &gt; 0 &amp;&amp; y+yVel &lt; room_height)
        y += yVel;
    else
    {
        yVel = -yVel;
        angle = point_direction(x,y,x+xVel,y+yVel);
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>c = c_white;
if (state == S.PANIC)
    c = c_yellow;
if (state == S.DIE)
    c = c_red;

switch(state)
{
    case S.WAIT:
        fSpeed = .01;
        col = 0;
    break;
    case S.PANIC:
        fSpeed = .03;
        col = 1;
    break;
    case S.DIE:
        fSpeed = .01;
        col = 2;
    break;

}

drawAngle = point_direction(xprevious,yprevious,x,y);
if (in(drawAngle,315,360) || in(drawAngle,0,45))
    {row = 0;sx = 1}
if (in(drawAngle,90+45,180+45))
    {row = 0;sx = -1}
if (in(drawAngle,45,45+90))
    {row = 2;sx = 1}
if (in(drawAngle,270-45,270+45))
    {row = 1;sx = 1}
        
    
fCur = (fCur + fSpeed) % fMax;
frame = floor(fCur);

draw_sprite_part_ext(sprPlayer,-1,frame*TILE+(fMax*col*TILE),row*TILE,TILE,TILE,floor(x-TILE/2+(sx == -1)*TILE),floor(y-TILE/2) + z,sx,1,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
