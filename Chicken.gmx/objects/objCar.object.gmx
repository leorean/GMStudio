<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = S.WALK;
xVel = 0;
yVel = 0;
angle = 0;
spd = .4;

dir = RIGHT;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.paused)
{
    depth = D.LIVING + (room_height - y);
    
    switch (state)
    {
        case S.WALK:
        
            xVel = lengthdir_x(spd,angle);
            yVel = lengthdir_y(spd,angle);
            
            tile = tile_layer_find(D.TILES,x-xVel,y-yVel);
            
            if (tile != -1)// &amp;&amp; ((x % TILE) == (TILE/2)))// &amp;&amp; ((y % TILE) == (TILE/2)))
            {
                if ((dir == LEFT || dir == RIGHT) &amp;&amp; ((round(y) % TILE) == (TILE/2))
                || (dir == UP || dir == DOWN)  &amp;&amp; ((round(y) % TILE) == (TILE/2)))
                if (tile_get_top(tile) == 1*TILE)
                {
                    var col;
                    col = tile_get_left(tile) / TILE;
                    switch (col)
                    {
                        case 0:
                            if (dir == RIGHT) angle = 0;
                            else angle = 180;
                        break;
                        case 1:
                            if (dir == DOWN) angle = 270;
                            else angle = 90;
                        break;
                        case 2:
                            if (dir == UP) {dir = RIGHT}
                            if (dir == LEFT) {dir = DOWN}
                        break;
                        case 3:
                            if (dir == RIGHT) {dir = DOWN}
                            if (dir == UP) {dir = LEFT}
                        break;
                        case 4:
                            if (dir == DOWN) {dir = LEFT}
                            if (dir == RIGHT) {dir = UP}
                        break;
                        case 5:
                            if (dir == LEFT) {dir = UP}
                            if (dir == DOWN) {dir = RIGHT}
                        break;
                        
                    }
                    if (dir == LEFT) angle = 180;
                    if (dir == RIGHT) angle = 0;
                    if (dir == UP) angle = 90;
                    if (dir == DOWN) angle = 270;
                    
                }
            }
            
            
        break;
        case S.PANIC:
        /*
            xVel = lengthdir_x(spdPanic*(stamina/maxStamina),angle);
            yVel = lengthdir_y(spdPanic*(stamina/maxStamina),angle);
            angle = (angle - 20 + random(40)) mod 360;
            
            stamina = max(stamina - choose(0,1,2),0);
            
            if (stamina == 0)
            {
                stamina = maxStamina;
                state = S.WAIT;
                //instance_destroy();
            }*/
        break;
    }
        
    //collisions
    if (place_free(x+xVel,y))// &amp;&amp; x+xVel &gt; 0 &amp;&amp; x+xVel &lt; room_width)
        x += xVel;
    else
    {
        xVel = 0;
        //angle = (angle + 180) mod 360;
    }
    if (place_free(x,y+yVel))// &amp;&amp; y+yVel &gt; 0 &amp;&amp; y+yVel &lt; room_height)
        y += yVel;
    else
    {
        yVel = 0;
        //angle = (angle + 180) mod 360;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != S.PANIC)
    c = c_white;
else
    c = c_red;


draw_sprite_ext(sprCar,-1,x,y,1,1,angle,c,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
