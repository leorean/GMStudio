<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objLiving</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = S.WALK;
xVel = 0;
yVel = 0;
zVel = 0;
zGrav = .1;
z = 0;

angle = 0;

spd = .5; //between .5 and 2, no problem
rot = spd*10; //has to be 10 times the speed because of reasons

spdPanic = 3*spd;

steer = 0; //panic steering / also used for locking turns

dir = NONE; //has to be set by spawner
next = NONE; //for maneuvers, decision for next direction

shadow = instance_create(x,y,objShadow);
shadow.parent = id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!global.paused)
{
    depth = (z &gt;= 0) * (D.LIVING + (room_height - y));
    
    if (in(x,view_xview[0]-TILE,view_xview[0]+view_wview[0]+TILE)
    &amp;&amp; in(y,view_yview[0]-TILE,view_yview[0]+view_hview[0]+TILE))
        visible = true;
    else
        visible = false;
        
    switch (state)
    {
        case S.WALK:
        
            xVel = lengthdir_x(spd,angle);
            yVel = lengthdir_y(spd,angle);
            
            tile = tile_layer_find(D.TILES,x-xVel,y-yVel);
            if (tile != -1)
            {
                if (tile_get_top(tile) == 1*TILE)
                {
                    var col;
                    col = tile_get_left(tile) / TILE;
                    switch (col)
                    {
                        case 0:
                        case 1:
                            if (angle == 0) dir = RIGHT;
                            if (angle == 90) dir = UP;
                            if (angle == 180) dir = LEFT;
                            if (angle == 270) dir = DOWN;
                            steer = 0; next = NONE;
                        break;
                        case 2:
                            if (dir == UP) angle = max(angle - rot, 0);
                            if (dir == LEFT) angle = min(angle + rot, 270);
                        break;
                        case 3:
                            if (angle == 0) angle = 360;
                            if (dir == RIGHT) angle = max(angle - rot, 270);
                            if (dir == UP) angle = min(angle + rot, 180);
                        break;
                        case 4:
                            if (dir == RIGHT) angle = min(angle + rot, 90);
                            if (dir == DOWN) angle = max(angle - rot, 180);
                        break;
                        case 5:
                            if (dir == LEFT) angle = max(angle - rot, 90);
                            if (dir == DOWN) angle = min(angle + rot, 360);
                            if (angle == 360) angle = 0;
                        break;
                        case 8:
                            if (steer == 0)
                            {
                                if (dir == RIGHT)
                                    next = choose(UP,RIGHT);
                                else if (dir == LEFT)
                                    next = choose(UP,LEFT);
                                else if (dir == DOWN)
                                    next = choose(LEFT,RIGHT);
                                steer = 1;
                            }
                        break;
                    }
                    //TODO: all intersections!!
                    
                    //steering at intersections:
                    if (steer == 1)
                    {
                        if (dir == RIGHT)
                        {
                            if (next == UP) angle = min(angle + rot, 90);
                            if (next == DOWN) angle = min(angle + 360 - rot, 270);
                        }
                    }
                }
            }
        break;
        case S.PANIC:
            spd = min(spd + .01,spdPanic);
            xVel = lengthdir_x(spd,angle);
            yVel = lengthdir_y(spd,angle);
            angle = (angle + steer) mod 360;
        break;
        case S.DIE:
            xVel *= .9;
            yVel *= .9;
            if (xVel == 0 &amp;&amp; yVel == 0)
                instance_destroy();
        break;
    }
    
    if (state != S.DIE)
    {
        //human crash
        var victim;
        victim = instance_place(x+xVel,y+yVel,objHuman);
        if (instance_exists(victim))
        {
            victim.state = S.DIE;
            victim.angle = point_direction(x,y,victim.x,victim.y);
            victim.xVel = lengthdir_x(3*spd,victim.angle);
            victim.yVel = lengthdir_y(3*spd,victim.angle);
        }
        
        //player interaction
        if (!instance_exists(victim))
            victim = instance_place(x+xVel,y+yVel,objPlayer);
        if (instance_exists(victim))
        {
            if (victim.z != z)
                victim = noone;
            else
            {
                state = S.PANIC;
                steer = choose(-2,-1,0,1,2);
            }
        }
        
        //carcrash:
        var car;
        car = instance_place(x+xVel,y+yVel,objCar);
        if (instance_exists(car))
        {
            state = S.DIE;
            angle = point_direction(car.x,car.y,x,y);
            xVel = lengthdir_x(3*spd,angle);
            yVel = lengthdir_y(3*spd,angle);
            
            car.state = S.DIE;
            car.angle = point_direction(x,y,car.x,car.y);
            car.xVel = lengthdir_x(3*car.spd,car.angle);
            car.yVel = lengthdir_y(3*car.spd,car.angle);
                        
        }
    }

    
    //++++collisions++++
    zVel += zGrav;
    z = min(z + zVel, 2);
    
    if (z &gt; 0)
    {
        z = 0;
        zVel = 0;
    }
    if (place_free(x+xVel,y) &amp;&amp; x+xVel &gt; 0 &amp;&amp; x+xVel &lt; room_width)
        x += xVel;
    else
    {
        xVel = 0;
        yVel = 0;
        state = S.DIE;//angle = (angle + 180) mod 360;
    }
    if (place_free(x,y+yVel) &amp;&amp; y+yVel &gt; 0 &amp;&amp; y+yVel &lt; room_height)
        y += yVel;
    else
    {
        xVel = 0;
        yVel = 0;
        state = S.DIE;
        //angle = (angle + 180) mod 360;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var c;
c = c_white;
if (state == S.PANIC)
    c = c_yellow;
if (state == S.DIE)
    c = c_red;

draw_sprite_ext(sprCar,-1,x,y,1,1,angle,c,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
