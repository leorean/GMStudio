<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frame = 0;
fCur = 0;
fMax = 3;
fSpeed = .1;
dir = DOWN;

wspd = 2;

xVel = 0;
yVel = 0;

state = IDLE;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(ord('R')))
    game_restart();

var kLeft = keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right);
var kRight = keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left);
var kUp = keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down);
var kDown = keyboard_check(vk_down) &amp;&amp; !keyboard_check(vk_up);

var kAny = kLeft || kRight || kUp || kDown;

//++++move

if (state == IDLE)
{
    xVel = 0;
    yVel = 0;
    if (kAny)
        state = WALK;
}
if (state == WALK)
{
    if (!kLeft &amp;&amp; !kRight) xVel = 0;
    if (!kUp &amp;&amp; !kDown) yVel = 0;

    if (!kAny)
        state = IDLE;
}

if (kLeft) {dir = LEFT; xVel = -wspd}
if (kRight) {dir = RIGHT; xVel = wspd}
if (kUp) {dir = UP; yVel = -wspd}
if (kDown) {dir = DOWN; yVel = wspd}
    
//++++physics++++

xVel = sign(xVel)*min(abs(xVel),5);
yVel = sign(yVel)*min(abs(yVel),5);

if (!place_meeting(x+xVel,y,objSolid))
    x += xVel;
else
    xVel = 0;
if (!place_meeting(x,y+yVel,objSolid))
    y += yVel;
else
    yVel = 0;

        
x = clamp(x,0,room_width+2*TILE);
y = clamp(y,0,room_height-3*TILE);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var row = 0;

switch (dir)
{
    case DOWN:
        row = 0;
    break;
    case UP:
        row = 1;
    break;
    case LEFT:
        row = 2;
    break;
    case RIGHT:
        row = 3;
    break;
}

switch (state)
{
    case IDLE:
        fCur = 0;
        fMax = 0;
        fSpeed = 0;
    break;
    case WALK:
        fMax = 3;
        fSpeed = .15;
        fCur = (fCur + fSpeed) % (fMax+1);
    break;
}

frame = floor(fCur);
/*
draw_sprite_part_ext(sprPlayer,-1,frame*2*TILE,row*3*TILE,2*TILE,3*TILE,round(x)-1,round(y),1,1,c_black,1);
draw_sprite_part_ext(sprPlayer,-1,frame*2*TILE,row*3*TILE,2*TILE,3*TILE,round(x)+1,round(y),1,1,c_black,1);
draw_sprite_part_ext(sprPlayer,-1,frame*2*TILE,row*3*TILE,2*TILE,3*TILE,round(x),round(y)-1,1,1,c_black,1);
draw_sprite_part_ext(sprPlayer,-1,frame*2*TILE,row*3*TILE,2*TILE,3*TILE,round(x),round(y)+1,1,1,c_black,1);
*/
draw_sprite_part(sprPlayer,-1,frame*2*TILE,row*3*TILE,2*TILE,3*TILE,round(x),round(y));


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
