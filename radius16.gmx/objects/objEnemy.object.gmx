<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = .5;
maxHp = 16;
hp = maxHp;
lvl = 1;
kb = 1.5;
loot = 3; //amount of coins

dmgTaken = 0;

chain = 0;
hurt = false;

onGround = false;

xVel = 0;
yVel = 0;
yGrav = .08;

dir = RIGHT;
state = IDLE;
statePrev = state;

pattern = P_WALK; //behaviour
type = 0; //looks

invincible = 0;
maxInvincible = 45;

deathTimer = 0;

frame = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state != PAUSE)
{

    if (global.state == GAMEOVER)
    {
        invincible = 0;
        state = WIN;
        xVel *= .9;
    }

    invincible = max(invincible-1,0);

    onGround = place_meeting(x,y+1,objSolid)&amp;&amp;yVel&gt;=0;
    var proj = instance_place(x,y,objPlayerProjectile);
    
    if (hp &lt;= 0 &amp;&amp; global.state != GAMEOVER)
        state = DIE;

    if (state == DIE)
    {
        //death-impulse
        if (statePrev != DIE)
        {
//            spawnCoins(x,y,loot);
            deathTimer = 60;
        }
        
        deathTimer = max(deathTimer-1,0);
        
        if (!deathTimer)
            instance_destroy();
        
        if (onGround)
            xVel *= .95;
        
    }
        
    if (hp &gt; 0)
    {
        if (hurt)
        {
            invincible = true;
            
            //hurt self
            dmgTaken = hurt;
            hp = max(hp - hurt, 0);
            invincible = maxInvincible;
            state = HURT;            
            hurt = false;
        }
        
        if (x &gt; room_width)
        {
/*            if (instance_exists(objPlayer) &amp;&amp; !objPlayer.invincible)
            {
                global.hp = max(global.hp-1,0);
                objPlayer.invincible = objPlayer.maxInvincible;
                
                global.shake = true;
            }*/
            
            instance_destroy();
        }
    }
    
    if (state == IDLE)
    {
        switch(pattern)
        {
            case P_WALK:
                if (onGround)
                    xVel = sign(dir)* min(abs(xVel)+.05,spd);
            break;
        }
    }
    
    if (state == HURT || (state == DIE &amp;&amp; !onGround))
    {
        if (max(abs(xVel),abs(yVel))&gt;1 &amp;&amp; chain&gt;0)
        {
            var e = instance_place(x,y,objEnemy);
            if (instance_exists(e) &amp;&amp; e.state != DIE)
            {
                //hurt others - chain effect
                
                var angle = point_direction(x,y,e.x,e.y);
                var pow = .9*max(abs(xVel),abs(yVel));
                
                e.xVel = -abs(lengthdir_x(pow, angle));
                e.yVel = lengthdir_y(pow, angle)-.5;
                e.hp = max(e.hp-floor(dmgTaken*.3),0);
                e.invincible = e.maxInvincible;
                e.state = HURT;

                e.chain = max(chain-1,0);
                chain = 0;
                
            }
        }
        if (onGround)
            xVel *= .95;

        if (!invincible)
        {
            state = IDLE;
        }
    }
    
    //++++moving++++
    yVel += yGrav;
    if (!place_meeting(x+xVel,y,objSolid))    
        x += xVel;
    else
        xVel = 0;
    if (!place_meeting(x,y+yVel,objSolid))
    {
        y += yVel;
    }
    else
        yVel = 0;
        
    //++++end variables++++
    statePrev = state;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (invincible%3==0)
    draw_self();

    
draw_set_font(global.fntDefault);
draw_set_halign(fa_center);
draw_set_valign(fa_top);

if (hp &lt; maxHp)
    draw_text(x, y-TILE, string((hp / maxHp) * 100) + "%");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
