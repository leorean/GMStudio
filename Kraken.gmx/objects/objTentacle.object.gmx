<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTentacle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dragged = false;

xO = x;
yO = y;
/*
xVel = 0;
yVel = 0;
yGrav = 0;
fric = .99;
angle = 0;

segCount = 10;
*/

canAttack = true;
impulse = 80;
force = 150;

maxJoint = 10;
segDist = 6;
jointLength = 1;
jointFreq = 8;
jointDamp = .2;

seg[0] = instance_create(x-segDist,y,objTentacleSegment);

//joint[0] = physics_joint_rope_create(id,seg[0],x,y,seg[0].x,seg[0].y,segDist,false);
joint[0] = physics_joint_distance_create(id,seg[0],x,y,seg[0].x,seg[0].y,true);
physics_joint_set_value(joint[0],phy_joint_damping_ratio,jointDamp);
physics_joint_set_value(joint[0],phy_joint_frequency,jointFreq);
physics_joint_set_value(joint[0],phy_joint_max_length,jointLength);


for (var i = 1; i &lt; maxJoint; i++)
{
    seg[i] = instance_create(x-(i+1)*segDist,y,objTentacleSegment);
    //joint[i] = physics_joint_rope_create(seg[i-1],seg[i],seg[i-1].x,seg[i-1].y,seg[i].x,seg[i].y,segDist,false);
    joint[i] = physics_joint_distance_create(seg[i-1],seg[i],seg[i-1].x,seg[i-1].y,seg[i].x,seg[i].y,false);
    physics_joint_set_value(joint[i],phy_joint_damping_ratio,jointDamp);
    physics_joint_set_value(joint[i],phy_joint_frequency,jointFreq);
    physics_joint_set_value(joint[i],phy_joint_max_length,jointLength);
}
seg[maxJoint] = instance_create(x-(maxJoint+1)*segDist,y,objTentacleAnchor);

joint[i] = physics_joint_revolute_create(seg[maxJoint-1],seg[maxJoint],seg[maxJoint].x,seg[maxJoint].y,0,360,false,0,0,false,true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++input++++
if (mouse_check_button(mb_left) &amp;&amp; canAttack)
{
    var xf,yf;
    xf = (mouse_x-x)*force;
    yf = (mouse_y-y)*force;
    
    //physics_apply_impulse(x,y,xf,yf);
    physics_apply_force(x,y,xf,yf);
    //canAttack = false;
}

if (phy_angular_velocity &lt; 10)
canAttack = true;

/*if (mouse_x &gt; bbox_left &amp;&amp; mouse_x &lt; bbox_right
    &amp;&amp; mouse_y &gt; bbox_top &amp;&amp; mouse_y &lt; bbox_bottom
    &amp;&amp; mouse_check_button(mb_left))
{
    dragged = true;
}*/

angle = point_direction(xO,yO,x,y);

//if (mouse_check_button_released(mb_left))
//    dragged = false;
/*
if (dragged)
{
    //xVel = (x-xprevious);
    //yVel = (y-yprevious);
    //x = mouse_x;
    //y = mouse_y;
    phy_position_x = mouse_x;
    phy_position_y = mouse_y;
}*/
/* else
{
    xVel += (xO-x)/80;
    yVel += (yO-y)/80;
    xVel = sign(xVel)*min(abs(xVel),10);
    yVel = sign(yVel)*min(abs(yVel),10);
    xVel *= fric;
    yVel *= fric;
    
}

x += xVel;
y += yVel;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
/*
draw_set_alpha(1);

draw_set_color(c_red);
draw_circle(xO,yO,TILE,1);
*/
/*
angle = (angle + spd) mod 360;
rad_angle = ((angle / 180) * pi);
for (i = 0; i &lt;= countSeg; i+=1)
{
    r = radius/countSeg;
    tx[i] = (cos(rad_angle)) * r*i;
    ty[i] = -(sin(rad_angle)) * r*i;
    xx[i] = (xO+TILE/2) - tx[i];
    yy[i] = (yO+TILE/2) - ty[i];*/
/*
for (i = 0; i &lt; segCount; i++)
{
    var rad_angle = ((angle/180) * pi);
    
    tx = (xO-x)/segCount * i + x;
    ty = (yO-y)/segCount * i + y - abs((i-.5*segCount))*2;
    
    draw_set_color(c_white);
    draw_circle(tx,ty,TILE,1);
}

draw_set_color(c_blue);
draw_circle(x,y,TILE,1);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>5</PhysicsObjectRestitution>
  <PhysicsObjectGroup>1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>2</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,24</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
