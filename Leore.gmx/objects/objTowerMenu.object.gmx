<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
image_speed = 0;
depth = HUDDEPTH+1;

cursor = 0;
maxCursor = 3;

target = noone; //the tower that exists at the players position
price = 0;
sellPrice = 0;

keyboard_clear(vk_up);
keyboard_clear(vk_down);
keyboard_clear(vk_left);
keyboard_clear(vk_right);

keyU = false;
keyD = false;
keyL = false;
keyR = false;

buyMode = 0; //0 = buy, 1 = upgrade, 2 = cant afford, 3 = done

x = floor(view_xview[0]);
y = floor(view_yview[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview[0];
y = view_yview[0];

keyUPressed = keyboard_check_pressed(vk_up);
keyDPressed = keyboard_check_pressed(vk_down);
keyLPressed = keyboard_check_pressed(vk_left);
keyRPressed = keyboard_check_pressed(vk_right);
keyU = keyboard_check(vk_up);
keyD = keyboard_check(vk_down);
keyL = keyboard_check(vk_left);
keyR = keyboard_check(vk_right);

target = global.player.target;

if (instance_exists(target))
    cursor = target.type;

if (!instance_exists(target))
{
    if (keyLPressed)
        cursor = (cursor + maxCursor) % (maxCursor + 1);
    if (keyRPressed)
        cursor = (cursor + 1) % (maxCursor + 1);
}

if (!instance_exists(target))
{
    price = get(global.tower[cursor,T.COST],0);
    sellPrice = 0;
}
else
{
    if (target.level &lt; global.tower[cursor,T.MAXLVL])
        price = get(global.tower[cursor,T.COST],(target.level + 1));
    else
        price = 0;
    sellPrice = floor(get(global.tower[cursor,T.COST],target.level) * .25);
}

buyMode = 3;
if (!instance_exists(target))
    buyMode = 0;
if (instance_exists(target))
{
    if (target.level &lt; global.tower[cursor,T.MAXLVL])
        buyMode = 1;
    else
        buyMode = 3;
}

if (global.wallet &lt;= price &amp;&amp; buyMode != 3)
    buyMode = 2;
        

if (keyUPressed &amp;&amp; (buyMode == 0 || buyMode == 1))
{
    if (price &lt;= global.wallet)
    {
        if (!instance_exists(target))
        {
            var tower;
            tower = instance_create(ceil(global.player.x), ceil(global.player.y),objTower);
            
            tower.type = cursor;
            tower.name = global.tower[cursor,T.NAME];
            tower.dmg = get(global.tower[cursor,T.DMG],0);
            tower.cd = get(global.tower[cursor,T.CD],0);
            tower.rng = get(global.tower[cursor,T.RNG],0);
            tower.maxenemies = global.tower[cursor,T.MAXENEMIES];
            tower.buildTimer = tower.maxBuildTimer;
            
            global.wallet -= price;
            
            target = tower;
        } else
        {
            if (target.level &lt; global.tower[cursor,T.MAXLVL])
            {
                target.level += 1;
                target.dmg = get(global.tower[cursor,T.DMG],target.level);
                target.cd = get(global.tower[cursor,T.CD],target.level);
                target.rng = get(global.tower[cursor,T.RNG],target.level);
                target.buildTimer = target.maxBuildTimer;
            
                global.wallet -= price;
            }
        }
    }
}

if (keyDPressed)
{
    if (instance_exists(target))
    {
        //give back 25% of the cost of that tower
        global.wallet += sellPrice;
        with(target) instance_destroy();
    }
}

if (!global.keyAction || global.player.hurt)
{
    global.hasControl = true;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.hasControl = false;

draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_alpha(1);


//arrows
if (!instance_exists(target))
{
    draw_sprite_part(sprHud,-1,2*TILE,(keyL*2*TILE),2*TILE,2*TILE,x + WIDTH/2 - 5*TILE,y + 4*TILE);
    draw_sprite_part(sprHud,-1,4*TILE,(keyR*2*TILE),2*TILE,2*TILE,x + WIDTH/2 + 3*TILE,y + 4*TILE);
}

//buy/upgrade
if (buyMode == 0) actionText = "Create for $" + string(price);
if (buyMode == 1) actionText = "Upgrade for $" + string(price);
if (buyMode &gt; 1) actionText = "";

if (buyMode == 2)
    c = c_red;
else
    c = c_white;

if (buyMode != 3)
{
    drawText(x + WIDTH/2,y + 1.5*TILE,actionText,c,c_black,fntDefault);
    draw_sprite_part(sprHud,-1,6*TILE,(keyU*2*TILE),2*TILE,2*TILE,x + WIDTH/2 - 1*TILE,y + 2*TILE);
}

//name
drawText(x + WIDTH/2,y + 0.5*TILE,global.tower[cursor,T.NAME],c_white,c_black,fntDefault);


if (instance_exists(target))
{
    //sell
    drawText(x + WIDTH/2,y + 7.5*TILE,"Sell for $" + string(sellPrice),c_white,c_black,fntDefault);
    draw_sprite_part(sprHud,-1,8*TILE,(keyD*2*TILE),2*TILE,2*TILE,x + WIDTH/2 - 1*TILE,y + 6*TILE);
    
    draw_sprite_part(sprHud,-1,0,0,2*TILE,2*TILE,target.x -TILE, target.y -TILE);
}

//cursor
draw_sprite_part(sprHud,-1,0,0,2*TILE,2*TILE,x + WIDTH/2 - 1*TILE,y + 4*TILE);


if (!instance_exists(target))
    drawRadius(ceil(global.player.x), ceil(global.player.y),2*get(global.tower[cursor,T.RNG],0),c_white);

//icons
if (!instance_exists(target))
{
    draw_sprite_part(sprHud,-1,0, 4*TILE + ((cursor + maxCursor) % (maxCursor + 1)) *2*TILE,2*TILE,2*TILE,x + WIDTH/2 - 3*TILE,y + 4*TILE);
    draw_sprite_part(sprHud,-1,0, 4*TILE + ((cursor + 1) % (maxCursor + 1))*2*TILE,2*TILE,2*TILE,x + WIDTH/2 + 1*TILE,y + 4*TILE);
}

draw_sprite_part(sprHud,-1,0, 4*TILE + cursor*2*TILE,2*TILE,2*TILE,x + WIDTH/2 - 1*TILE,y + 4*TILE);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
