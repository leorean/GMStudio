<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_rotation = 0;
phy_fixed_rotation = true;

image_speed = 0;

global.player = id;

isJumped = false;

rope = noone;
ropeEnd = noone;
ropeNew = noone;

state = IDLE;
statePrev = state;

//+++animation
dir = RIGHT;

frame = 0;
row = 0;
fSpeed = 0;
fMax = 3;
fCur = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++input
if (global.hasControl)
{
    keyL = keyboard_check(vk_left);
    keyR = keyboard_check(vk_right);
    keyU = keyboard_check(vk_up);
    keyD = keyboard_check(vk_down);
    keyUPressed = keyboard_check_pressed(vk_up);
    keyActionPressed = keyboard_check_pressed(ord('A'));
    keyActionReleased = keyboard_check_released(ord('A'));
}
else
{
    keyL = false;
    keyR = false;
    keyU = false;
    keyD = false;
    keyActionPressed = false;
    keyActionReleased = false;

}

//++++flag control
//collision_line(x-TILE/2+2,y+TILE/2,x+TILE/2-2,y+TILE/2,objCollider,true,true)
onGround = (phy_speed_y &gt;= 0
    &amp;&amp; collision_line(x-TILE/2+2,y+TILE/2,x+TILE/2-2,y+TILE/2,objCollider,true,true))

    
if (onGround)
    isJumped = false;

//++++movement
if (state == IDLE || state == JUMP || state == RUN)
{
    if (keyL &amp;&amp; !keyR  &amp;&amp; phy_speed_x &gt; -2)
    {
        physics_apply_force(x,y,-300,-100);
        if (onGround) state = RUN;
    }
    
    if (keyR &amp;&amp; !keyL &amp;&amp; phy_speed_x &lt; 2)
    {
        physics_apply_force(x,y,300,-100);
        if (onGround) state = RUN;
    }

    if (keyL &amp;&amp; phy_speed_x &lt; 0)
        dir = LEFT;
    if (keyR &amp;&amp; phy_speed_x &gt; 0)
        dir = RIGHT;

    if ((keyL || keyR) &amp;&amp; onGround)
        state = RUN;
            
        
    if (!keyL &amp;&amp; phy_speed_x &lt; 0)
        phy_speed_x = min(phy_speed_x + .1, 0);
    if (!keyR &amp;&amp; phy_speed_x &gt; 0)
        phy_speed_x = max(phy_speed_x - .1, 0);
        
    if (!keyL &amp;&amp; !keyR &amp;&amp; abs(ceil(phy_speed_x)) &lt;= 1 &amp;&amp; onGround)
    {
        state = IDLE;
        
    }
}

//++++jumping
if (state != ATTACK)
{
    if (keyUPressed)
    {
        if (!isJumped)
        {
            physics_apply_impulse(x,y,0,-240);
            //phy_speed_y = -3.5;
            isJumped = true;
            state = JUMP;
        }
    }
}

//ATTACKING
if (keyActionPressed)
{

}

if (keyActionReleased)
{
}

//++++ end routine
if (state != statePrev)
    fCur = 0;
statePrev = state;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fCur = (fCur + fSpeed) mod (fMax + 1);
frame = floor(fCur);

switch(state)
{
    case IDLE:
        fSpeed = .1;
        row = 0;
    break;
    case RUN:
        fSpeed = .2;
        row = 1;
    break;
    case JUMP:
        fSpeed = .1;
        row = 2;
    break;
    case DIE:
        
    break;
    case ATTACK:
        
    break;
    case HURT:
        
    break;
    
}

if (dir == RIGHT)
    draw_sprite_part(global.sprPlayer,-1,frame*TILE,row*TILE,TILE,TILE,(x-TILE/2),(y-TILE/2));
if (dir == LEFT)
    draw_sprite_part_ext(global.sprPlayer,-1,frame*TILE,row*TILE,TILE,TILE,(x+TILE/2),(y-TILE/2),-1,1,c_white,1);
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>6</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>1</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>2,2</point>
    <point>14,2</point>
    <point>14,15</point>
    <point>2,15</point>
  </PhysicsShapePoints>
</object>
