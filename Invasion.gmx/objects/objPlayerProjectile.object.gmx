<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayerProjectile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//x(t) = x0 + v0 * t + 0.5g * t^2
t = 0;
x0 = x;
y0 = y;
vx0 = 0;
vy0 = 0;
g = 0;

dead = false;
chain = 3;
hold = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state &gt; STATE_PAUSED)
{

    if (!hold)
    {
        t++;
        x = x0 + vx0 * t;
        y = y0 + vy0 * t + 0.5*g * t*t;
    }

    /*if (abs(x-ox)&lt;abs(tx-ox) &amp;&amp; t &lt; 2*pi)
    {
        t = abs((x-ox)/(tx-ox))*2*pi;
        y = (y + yVel) - 3*sin(t);
        show_debug_message(string(sin(t))+":"+string(t));
        //yGrav = -(y-yprevious);
    }
    else
    {
        yVel += yGrav;
        y += yVel;
    }*/
    /*
    yVel += yGrav;
    
    xVel = sign(xVel)*min(abs(xVel),velMax);
    yVel = sign(yVel)*min(abs(yVel),velMax);

    x += xVel;
    y += yVel;
    */
    
    if (place_meeting(x,y,objGround) || dead)
    {
        var eff = instance_create(x,y,objEffect);
        eff.type = 1;
        instance_destroy();
    }
        
    if (!in(x,-2*TILE,WIDTH+2*TILE) || y &gt; HEIGHT)
        instance_destroy();
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!hold)
    draw_sprite_part(sprGfx,-1,12*TILE,0,TILE,TILE,x-.5*TILE,y-.5*TILE);

for (var tt = 0; tt &lt; 100;tt += 5)
{
    xx = x0 + vx0 * tt;
    yy = y0 + vy0 * tt + 0.5*g * tt*tt;
    if (tt &gt; t)
    {
        draw_set_blend_mode(bm_add);
        draw_sprite_part_ext(sprGfx,-1,14*TILE,0,TILE,TILE,xx-.5*TILE,yy-.5*TILE,1,1,c_white,.2);
        draw_set_blend_mode(bm_normal);        
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
