<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayerProjectile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tx = 0;
ty = 0;
xVel = 0;
yVel = 0;
yGrav = .08;
velMax = 100;

dead = false;

chain = 3;

//WURZEL(-B1*(B4-B2)^2/(2*(B5-B3)*COS(B7)^2-SIN(2*B7)*(B4-B2)))
//b1 =g, b2 = x, b3 = y, b4 = tx, b5 = ty, b6 = angle, b7 = rad_angle, b8 = v0
//v0 = sqrt (-yGrav*power(tx - x,2)/(2*(ty-y)*power(cos(degtorad(angle)),2)-sin(2*degtorad(angle))*(tx-x)));
v0 = -9999;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state &gt; STATE_PAUSED)
{
    if (v0 == -9999)
    {
        //angle = point_direction(x,y,tx,ty);
        //v0 = sqrt(abs(-yGrav*power(tx - x,2)/(2*(ty-y)*power(cos(degtorad(angle)),2)-sin(2*degtorad(angle))*(tx-x))));
        //xVel = lengthdir_x(v0,angle);
        //yVel = lengthdir_y(v0,angle);        
    }
        
    yVel += yGrav;
    
    xVel = sign(xVel)*min(abs(xVel),velMax);
    yVel = sign(yVel)*min(abs(yVel),velMax);
    x += xVel;
    y += yVel;
    
    if (place_meeting(x,y,objGround) || dead)
    {
        var eff = instance_create(x,y,objEffect);
        eff.type = 1;
        instance_destroy();
    }
        
    if (!in(x,-2*TILE,WIDTH+2*TILE))
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_part(sprGfx,-1,12*TILE,0,TILE,TILE,x-.5*TILE,y-.5*TILE);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
