<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPixel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dx = 0;

sprTrack = -1;

r = array(244,173,173,187,187,151,151,246,051,051,059,059,172,244);
g = array(194,215,215,246,246,185,185,066,071,071,051,051,050,194);
b = array(164,255,255,255,255,253,253,113,089,089,089,089,050,164);

color = c_white;

daytime = 0; //0 ... 100;

day_angle = 0;
night_angle = 0;

radius = HEIGHT+TILE;
sun_x = 0; sun_y = 0;
moon_x = 0; moon_y = 0;
offx = WIDTH/2;
offy = HEIGHT + 3*TILE;


surf = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_exists(sprTrack))
    sprite_delete(sprTrack);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++SHADER++++
shader_set(shader0);
draw_clear_alpha(c_black,0);

//++++TRACK GENERATION++++
//generate tracks from path points, once per level, and save it to a sprite
if (sprTrack == -1)
{
    var size = 6;
    
    var tmpSurf,p;
    p = global.path;
    tmpSurf = surface_create(global.w,global.h);
    surface_set_target(tmpSurf);
    view_surface_id[0] = tmpSurf;
    draw_clear_alpha(c_black, 0);
    
    var px = WIDTH/2;
    var py = HEIGHT/2;
    
    var prec = 300;
    var dPrec = 1000;
    
    var prevPillarX = 0;
    
    draw_sprite(sprConstruct,-1,0,0);
    var j = 0; var s = 6;
    repeat(4)
    {
        for (i = 0; i &lt; dPrec;i++)
        {
            
            px = floor(path_get_x(p,i/dPrec));
            py = floor(path_get_y(p,i/dPrec));
            
            if (j == 0)
            {
                mpy[i] = HEIGHT;
                if (i &gt;= WIDTH) break;
            }
            if (j == 1)
                mpy[px] = HEIGHT;
            if (j == 2)
            mpy[px] = min(py,mpy[px]);
            if (j == 3)
            {
                draw_sprite(sprConstructDelete,0,i,mpy[i]);
                if (i &gt;= WIDTH) break;
            }
        }
        j++;
    }
    for (i = 1; i &lt; WIDTH-1;i++)
    {
        if ((abs(mpy[i-1] - mpy[i]) &gt; 5*s)
        || (abs(mpy[i+1] - mpy[i]) &gt; 5*s))
        {
            for (k = mpy[i];k&lt;HEIGHT;k+=s)
            {
                if (k == mpy[i])
                    draw_sprite_ext(sprSeg,2,i,k,1,1,0,c_white,1);        
                else
                    draw_sprite_ext(sprSeg,3,i,k,1,1,0,c_white,1);  
            }
        }
    }
    
    //draw rails
    for(i = 0;i&lt;prec;i++)
    {
        px = path_get_x(p,i/prec);
        py = path_get_y(p,i/prec);
        var segAng = point_direction(
            px,py,
            path_get_x(p,max(i-1,0)/prec),path_get_y(p,max(i-1,0)/prec));
        
        draw_sprite_ext(sprSeg,0,px,py,1,1,segAng,c_white,1);

        if (i % 5  &lt; 2)
            draw_sprite_ext(sprSeg,1,px,py,1,1,segAng,c_white,1);
    }
            
    //++++generate final image++++
    
    draw_surface(tmpSurf,0,0);
    sprTrack = sprite_create_from_surface(tmpSurf,0,0,global.w,global.h,true,false,0,0);
    
    surface_reset_target();
    surface_free(tmpSurf);
}

//++++DAYTIME EFFECTS++++

if (global.state == STATE_PLAY)
    daytime = (daytime + .006) % 100;

color = make_color_rgb(
    bspline3(daytime/100,array_length_1d(r),r),
    bspline3(daytime/100,array_length_1d(g),g),
    bspline3(daytime/100,array_length_1d(b),b)
);
    
//bg sky
draw_sprite_part_ext(sprBackground,-1,WIDTH,0,WIDTH,HEIGHT,0,0,1,1,color,1);

//stars
var sa = .6*max(sin(2*pi*(daytime+50)/100),0);
draw_set_blend_mode(bm_add);
draw_sprite_part_ext(sprBackground,-1,3*WIDTH,192,WIDTH,HEIGHT,0,0,1,1,color,sa);
draw_set_blend_mode(bm_normal);


//++++sun and moon++++
if (keyboard_check(ord('1'))) daytime=(daytime+1)%100;
if (keyboard_check(ord('2'))) daytime=abs((daytime+100-1)%100);

day_angle = 180 - 35 - clamp(daytime/200,0,1)*360;
night_angle = - clamp((-30+daytime)/60,0,1)*360;

var rad_day_angle = (day_angle/180)*pi;
var rad_night_angle = (night_angle/180)*pi;

sun_x = offx + (cos(rad_day_angle) * radius);
sun_y = offy + (-sin(rad_day_angle) * radius);

moon_x = offx + (cos(rad_night_angle) * radius);
moon_y = offy + (-sin(rad_night_angle) * radius);

drawShine(sun_x,sun_y,1);
draw_sprite_part(sprGfx,-1,12*TILE,TILE,3*TILE,3*TILE,sun_x-1.5*TILE,sun_y-1.5*TILE);

drawShine(moon_x,moon_y,.8);
draw_sprite_part(sprGfx,-1,12*TILE,4*TILE,3*TILE,3*TILE,moon_x-1.5*TILE,moon_y-1.5*TILE);

//++++

if (global.state &gt; STATE_PAUSED)
{
    dx = (dx - .25) % WIDTH;
}

//bg moving clouds
draw_set_blend_mode(bm_add);

draw_sprite_part_ext(sprBackground,-1,3*WIDTH,0,WIDTH,HEIGHT,dx,0,1,1,c_white,.1);
draw_sprite_part_ext(sprBackground,-1,3*WIDTH,0,WIDTH,HEIGHT,dx+WIDTH,0,1,1,c_white,.1);

draw_set_blend_mode(bm_normal);
//bg scenery
draw_sprite_part_ext(sprBackground,-1,2*WIDTH,0,WIDTH,HEIGHT,0,0,1,1,color,1);

draw_set_blend_mode(bm_add);
//draw_sprite_part_ext(sprBackground,-1,2*WIDTH,192,WIDTH,HEIGHT,0,0,1,1,c_white,sa);
//draw_sprite_part_ext(sprBackground,-1,2*WIDTH,192,WIDTH,HEIGHT,0,0,1,1,c_white,min(sa,.3));
draw_set_blend_mode(bm_normal);

//track
if (sprite_exists(sprTrack))
{
    //could also use bm_zero
    draw_sprite_ext(sprTrack,-1,0,.5*TILE,1,1,0,color,1);
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(sprTrack,-1,0,.5*TILE,1,1,0,c_white,.3);
    draw_set_blend_mode(bm_normal);
    
}

//fg floor
draw_sprite_part(sprBackground,-1,0,192 * (global.timer % 40 &gt; 20),WIDTH,HEIGHT,0,0);

//draw_text(0,TILE,daytime);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
