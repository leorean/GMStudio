<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++global variables (upgradeable etc.)++++
global.hp = 5;
global.dmg = 10;
global.chain = 3;
global.knockback = 2;
global.magnet = 2*TILE;
global.attackSpeed = 40;

surf = -1; //drawing surface

global.shake = false;

//++++private variables (routine etc.)++++
spawnTimer = 0;
maxSpawnTimer = 2*FPS;

shakeTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++debug keys++++

if (keyboard_check_pressed(ord('Q')))
    game_restart();

if (keyboard_check_pressed(ord('R'))|| (global.state == STATE_GAMEOVER &amp;&amp; mouse_check_button_pressed(mb_left)))
    room_restart();

if (keyboard_check_pressed(ord('G')) &amp;&amp; !player.invincible)
    player.hp = max(player.hp-1,0);
    //global.state = STATE_GAMEOVER;

if (keyboard_check_pressed(ord('P')))
{
    if (global.state == STATE_PLAY || global.state == STATE_PAUSED)
        global.state = -global.state;
}
if (keyboard_check_pressed(vk_escape) || keyboard_check_pressed(vk_backspace))
    game_end();
    
//++++game states++++
if (global.state == STATE_START)
{
    if (mouse_check_button_pressed(mb_left))
        global.state = STATE_PLAY;
}

if (global.state &gt; STATE_PAUSED)
{
    global.timer = (global.timer+1) % INFINITE;
}

if (global.state == STATE_PLAY)
{
    spawnTimer = max(spawnTimer-1,0);
    if (!spawnTimer)
    {
        instance_create(2*TILE,HEIGHT-20-2*TILE,objEnemy);
        spawnTimer = maxSpawnTimer;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Free Surface
if (surface_exists(surf))
    surface_free(surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_size(3*WIDTH,3*HEIGHT);
global.timer = 0;

global.state = STATE_START;
global.path = p0;

background = instance_create(0,0,objBackground);

instance_create(0,HEIGHT-20,objGround);
instance_create(-WIDTH,HEIGHT-20,objGround);
instance_create(WIDTH,HEIGHT-20,objGround);

player = instance_create(
    path_get_point_x(0,global.path), path_get_point_y(0,global.path),
    objPlayer);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++SHADER++++
shader_set(shader0);
draw_clear(c_black);

//++++SURFACE++++
if !surface_exists(surf)
{
    //Create (or recreate) the surface when needed
    surf = surface_create(view_wview[0], view_hview[0]);
    surface_set_target(surf);
    draw_clear(c_black);
    surface_reset_target();
    //Set the view that you want to draw to the surface
    view_surface_id[0] = surf;
}
else
{
    //TODO: CALCULATE OFFSET
    var d_offx = 0; var d_offy = 0;
    //d_offx = -abs(display_get_gui_width() - view_wport[0]);
    //d_offy = -abs(display_get_gui_height() - view_hport[0]);
    
    //Disable alpha blending (not needed since we are drawing the whole view)
    draw_enable_alphablend(false);
    //Draw the surface stretched to the GUI layer
    draw_surface_stretched(surf, d_offx, d_offy, display_get_gui_width(), display_get_gui_height());
    //draw_surface_stretched(surf, 0, 0, display_get_width(), display_get_height());
    //Switch on alpha blending again for the next normal draw pass
    draw_enable_alphablend(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++
draw_set_color(c_black);
draw_set_alpha(1);
draw_set_font(fntHUD);

draw_set_halign(fa_left);
draw_set_valign(fa_top);

if (instance_exists(player))
    draw_text(0,0,string(player.hp)+"/"+string(global.hp));
    
draw_text(0,HEIGHT-TILE,fps);


//++++SHAKE SCREEN++++
if (global.shake)
{
    immersion_play_effect(2);
    shakeTimer = 5;
    global.shake = false;
}
if (shakeTimer)
{
    shakeTimer = max(shakeTimer-1,0);
    view_xview[0] = -1+random(2);
    view_yview[0] = -1+random(2);
} else
{
    view_xview[0] = 0;
    view_yview[0] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
