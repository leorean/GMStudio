<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>objAny</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpVel = 60000;//10000;
torque = 9000;//12000;

image_speed = .1;
dir = RIGHT;
jumped = false;
onGround = false;
inObject = false;
inWater = false;
waterRotation = phy_rotation;

dev = -1;
kJump = false;
kJumpPressing = false;
kLeft = false;
kRight = false;
kVel = 0;
mx = 0;
my = 0;

fCur = 0;
fMin = 0;
fMax = 0;
fSpeed = 0;
frame = 0;
state = IDLE;

attachedObject = noone;
colX = 0;
colY = 0;
//accessory = instance_create(phy_position_x, phy_position_y, objPlayerAccessory);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (attachedObject != noone)
{
    if (!kLeft &amp;&amp; !kRight)
        phy_position_x = attachedObject.phy_position_x + colX;
    if (!kJumpPressing)
        phy_position_y = attachedObject.phy_position_y + colY;
}

if (kLeft || kRight || kJump)
    attachedObject = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerInput();

// PLATFORMS
with(objPlatform) phy_active = false;
instance_deactivate_object(objPlatform);
instance_activate_region(phy_position_x - 20, phy_position_y + 10, 40, 30, true);
inObject = physics_test_overlap(phy_position_x, phy_position_y - 2, phy_rotation, objPlatform);
if (phy_speed_y &gt;= -4)
{
    with(objPlatform)
    {
        if(true)
        {
            if (!objPlayer.inObject)
            {
                phy_active = true;
                
                if (physics_test_overlap(phy_position_x, phy_position_y - 2, phy_rotation, objPlayer))
                 //&amp;&amp; !physics_test_overlap(phy_position_x, phy_position_y, 0, objPlayer))
                {
                    objPlayer.onGround = true;
                }
            }
        }
    }
}
instance_activate_object(objPlatform);

var sides = (!physics_test_overlap(phy_position_x - 2, phy_position_y - 2, phy_rotation, objBlock)
        || physics_test_overlap(phy_position_x + 2, phy_position_y + 4, phy_rotation, objSolid))
     &amp;&amp; (!physics_test_overlap(phy_position_x + 2, phy_position_y - 2, phy_rotation, objBlock)
        || physics_test_overlap(phy_position_x - 2, phy_position_y + 4, phy_rotation, objSolid));

if (!onGround)
    onGround = physics_test_overlap(phy_position_x, phy_position_y + 2, phy_rotation, objSolid)
     &amp;&amp; sides &amp;&amp; (phy_speed_y &gt;= -2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_rotation = phy_rotation % 360;

instance_deactivate_object(objEnemy);
instance_activate_region(bbox_left - 16, bbox_top - 16, abs(bbox_left-bbox_right) + 16, abs(bbox_top-bbox_bottom) + 16, true);
for(var i = 0; i &lt; instance_number(objEnemy); i++)
{
    var o = instance_find(objEnemy, i);
    // jumping on top of vulnerable enemies
    if (object_is_ancestor(o.object_index, objEnemyVulnerable))
    {
        if (physics_test_overlap(phy_position_x, phy_position_y, phy_rotation, o)
            &amp;&amp; bbox_bottom &lt; o.bbox_bottom &amp;&amp; phy_speed_y &gt; 0
            &amp;&amp; o.state != DEAD &amp;&amp; state != DEAD)
        {
        createEffect(1,(phy_position_x + o.phy_position_x)/2,(phy_position_y + o.phy_position_y)/2);
            phy_speed_y = -5;
            o.state = DEAD;
        }
    }
    if (object_is_ancestor(o.object_index, objEnemy))
    {
        // dieing from all enemies
        if (physics_test_overlap(phy_position_x, phy_position_y, phy_rotation, o))
        {
            if (state != DEAD &amp;&amp; state != WON)
            {
                if (o.state != DEAD &amp;&amp; o.phy_active)
                {
                    phy_linear_velocity_x = 0;
                    phy_linear_velocity_y = -200;
                    physics_apply_angular_impulse(999);
                    state = DEAD;
                }
            }
        }
    }
}
instance_activate_object(objEnemy);

// check if outside room
if (x &lt; 20)
    phy_position_x = max(phy_position_x, 20);
if (x &gt; room_width - 20)
    phy_position_x = min(phy_position_x, room_width - 20);
if (y &gt; room_height + 80)
{
    phy_linear_velocity_y = 0;
    phy_position_y = room_height + 80;
}

if (state != DEAD &amp;&amp; state != WON)
{
    if (y &gt; room_height)
    {
        phy_linear_velocity_x = 0;
        phy_linear_velocity_y = -200;
        physics_apply_angular_impulse(999);
        state = DEAD;
    }
}

// max jump vel check
phy_linear_velocity_y = max(phy_linear_velocity_y, -450);

// WATER
if (physics_test_overlap(phy_position_x, phy_position_y - 16, phy_rotation, objWater))
{
    inWater = true;
    jumped = true;
    onGround = false;
    physics_apply_force(phy_position_x, phy_position_y, 0, -2400);
    phy_linear_velocity_x = sign(phy_linear_velocity_x) * min(abs(phy_linear_velocity_x), 100);
    phy_linear_velocity_y = sign(phy_linear_velocity_y) * min(abs(phy_linear_velocity_y), 100);
}
if (inWater)
{
    phy_linear_velocity_x *= .99;
    phy_linear_velocity_y *= .99;
}

if (!physics_test_overlap(phy_position_x, phy_position_y, phy_rotation, objWater))
    inWater = false;

// WON
if (state == WON)
{
    depth = -101;
    if (global.state != G_WON)
    {
        phy_rotation = 0;
        instance_create(x, y, objWinScreen);
        global.state = G_WON;
    }
    phy_linear_velocity_x = 0;
    
    if (onGround)
    {
        phy_linear_velocity_y = 0;
        if (abs(phy_rotation) &gt; 5) phy_rotation -= (sign(phy_rotation))*2;
    }
}
 
// LOST   
if (state == DEAD)
{
    kLeft = false;
    kRight = false;
    kJump = false;
    if (global.state != G_OVER)
    {
        global.state = G_OVER;
    }
}

if (kLeft)
{
    if (phy_linear_velocity_x &lt; -20)
        dir = LEFT;
    if (!inWater)
        physics_apply_torque(-torque);
    else
    {
        physics_apply_torque(-.6*torque);
        waterRotation -= 3;
    }
    if (!inWater &amp;&amp; !onGround &amp;&amp; jumped &amp;&amp; !physics_test_overlap(phy_position_x - 2, phy_position_y, phy_rotation, objBlock))
        phy_linear_velocity_x = max(phy_linear_velocity_x - 5, -200);
}
if (kRight)
{
    if (phy_linear_velocity_x &gt; 20)
        dir = RIGHT;
    if (!inWater)
        physics_apply_torque(torque);
    else
    {
        physics_apply_torque(.6*torque);
        waterRotation += 3;
    }
    if (!inWater &amp;&amp; !onGround &amp;&amp; jumped &amp;&amp; !physics_test_overlap(phy_position_x + 2, phy_position_y, phy_rotation, objBlock))
        phy_linear_velocity_x = min(phy_linear_velocity_x + 5, 200);
}

if (abs(phy_position_y - phy_position_yprevious) &gt;= 4)
{
    onGround = false;
    jumped = true;
    if (state == IDLE) state = JUMP;    
}

// reset jump
if (onGround)
{
    jumped = false;
    if (state == JUMP) state = IDLE;
}

if (kJump)
{
    if (!inWater)
    {
        if (!jumped)
        {        
            phy_linear_velocity_y = min(phy_linear_velocity_y, 0);
            
            var jx = 0;
            if (kLeft) jx = -120;
            if (kRight) jx = 120;
            
            var rot = point_direction(phy_position_x, phy_position_y, phy_position_x + jx, phy_position_y - 400);
            rot = -min(max(rot, 60), 150);
            var jv = 1200;
            var jumpXvel = lengthdir_x(jv, rot);
            var jumpYvel = lengthdir_y(-jv, rot);
            
            physics_apply_impulse(phy_position_x, phy_position_y, jumpXvel, jumpYvel);
    
            jumped = true;
            if (state == IDLE) state = JUMP;
        }        
    }
}

if (!inWater) waterRotation = phy_rotation;
if(inWater)
{
    phy_rotation = waterRotation;
    
    if (kJumpPressing)
    {
        phy_linear_velocity_x = 0;
        phy_linear_velocity_y = 0;
        
        var rot = -waterRotation+90;
        var jv = 700;//500;
        var jumpXvel = lengthdir_x(jv, rot);
        var jumpYvel = lengthdir_y(jv, rot);
        
        physics_apply_impulse(phy_position_x, phy_position_y, jumpXvel, jumpYvel);
    
        // bubble effect    
        for (var i = -1; i &lt; 2; i++)
        {
            var r = irandom(20);
            if (r == 2)
            {
                var b = instance_create(phy_position_x + lengthdir_x(-20, rot), phy_position_y + lengthdir_y(-20, rot), objBubble);
                b.phy_linear_velocity_x = lengthdir_x(-70, rot + i*10);
                b.phy_linear_velocity_y = lengthdir_y(-70, rot + i*10);
            }
        }
    }   
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objMovingPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (attachedObject == noone)
{
    attachedObject = other;
    colX = phy_position_x - attachedObject.phy_position_x;
    colY = phy_position_y - attachedObject.phy_position_y;
}*/

phy_position_x += (other.phy_position_x - other.xprev);
phy_position_y += (other.phy_position_y - other.yprev);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFlag">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.state == G_PLAY)
{
    if (state != DEAD)
    {
        state = WON;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlatform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
{
    case IDLE:
        fMin = 0;
        fMax = 4;
        fSpeed = .1;
    break;
    case JUMP:
        fMin = 4;
        fMax = 4;
        fSpeed = .1;
    break;
    case WON:
        fMin = 8;
        fMax = 4;
        fSpeed = .1;
    break;
    case DEAD:
        fMin = 12;
        fMax = 4;
        fSpeed = 0;
    break;
}

fCur = (fCur + fSpeed) % fMax;
frame = floor(fCur) + fMin;

var z = 1;
if (frame % 4 == 0) z = 0;

var angle = -phy_rotation + 180*(dir == LEFT);
var accAngle = -phy_rotation - 90;

draw_sprite_ext(sprPlayer, frame, x, y, image_xscale, image_yscale * dir, angle, c_white, 1);
draw_sprite_ext(sprAccessoires, global.accessory, x + lengthdir_x(z, accAngle), y + lengthdir_y(z, accAngle), image_xscale, image_yscale * dir, -phy_rotation + 180*(dir == LEFT), c_white, 1);

if (inWater)
    draw_sprite_ext(sprScuba, 0, x + lengthdir_x(z, accAngle), y + lengthdir_y(z, accAngle), image_xscale, image_yscale * dir, angle, c_white, 1);

/*draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,1);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>2.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.00999999977648258</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>10</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>10</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>18,12</point>
    <point>28,6</point>
    <point>44,8</point>
    <point>50,30</point>
    <point>50,50</point>
    <point>40,56</point>
    <point>20,56</point>
    <point>12,36</point>
  </PhysicsShapePoints>
</object>
