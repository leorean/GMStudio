<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpVel = 60000;//10000;
torque = 12000;//700;

image_speed = .1;
dir = RIGHT;
jumped = false;

attached = ds_list_create();

dev = -1;
kJump = false;
kLeft = false;
kRight = false;
kVel = 0;
mx = 0;
my = 0;

fCur = 0;
fMin = 0;
fMax = 0;
fSpeed = 0;
frame = 0;
state = IDLE;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerInput();

/*kLeft = false;
kRight = false;
kJump = false;*/

/*kLeft = false;
kRight = false;
kJump = false;

for (i = 0; i &lt; 5; i ++)
{
    if (dev == -1)
    {
        if (device_mouse_check_button(i, mb_left))
            dev = i;
    }
    
    if (dev != -1)
    {        
        if (device_mouse_check_button(dev, mb_left))
        {
            kLeft = (device_mouse_x_to_gui(dev) &lt; view_wview *.3);
            kRight = (device_mouse_x_to_gui(dev) &gt; view_wview *.6)
        }
        
        if (device_mouse_check_button_released(dev, mb_left))
        {
            dev = -1;
        }
    }
    else
    {
        kVel = 0;        
    }   
    if (device_mouse_check_button_pressed(i, mb_right))
        kJump = true;

    if (i &gt; 0 &amp;&amp; device_mouse_check_button_pressed(i, mb_left))
        kJump = true;
        
}

if (mouse_check_button_pressed(mb_right))
    kJump = true;
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_rotation = phy_rotation % 360;

onGround = physics_test_overlap(phy_position_x, phy_position_y + 2, phy_rotation, objSolid)
 &amp;&amp; ((phy_position_y - phy_position_yprevious) &gt;= -2);
 
// check if outside room
if (x &lt; 20)
{
    /*phy_linear_velocity_x = max(phy_linear_velocity_x, 0);
    physics_apply_local_force(0, 0, 100, 0);*/
    phy_position_x = max(phy_position_x, 20);
}
if (x &gt; room_width - 20)
{
    phy_linear_velocity_x = min(phy_linear_velocity_x, 0);
    phy_position_x = min(phy_position_x, room_width - 20);
}

if (state == DEAD)
{
    kLeft = false;
    kRight = false;
    kJump = false;
}

if (kLeft)
{
    if (phy_linear_velocity_x &lt; -20)
        dir = LEFT;
    physics_apply_torque(-torque);
}
if (kRight)
{
    if (phy_linear_velocity_x &gt; 20)
        dir = RIGHT;
    physics_apply_torque(torque);
}

// reset jump
if (onGround)
{
    jumped = false;
    if (state == JUMP) state = IDLE;
}

if (kJump)
{
    if (!jumped)
    {        
        phy_linear_velocity_y = min(phy_linear_velocity_y, 0);
        
        var jx = 0;
        if (kLeft) jx = -120;
        if (kRight) jx = 120;
        
        var rot = point_direction(phy_position_x, phy_position_y, phy_position_x + jx, phy_position_y - 400);
        rot = -min(max(rot, 60), 150);
        var jv = 1200;
        var jumpXvel = lengthdir_x(jv, rot);
        var jumpYvel = lengthdir_y(-jv, rot);
        
        physics_apply_impulse(phy_position_x, phy_position_y, jumpXvel, jumpYvel);

        jumped = true;
        if (state == IDLE) state = JUMP;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSpike">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != DEAD)
{
    phy_linear_velocity_x = 0;
    phy_linear_velocity_y = -200;
    
    //physics_apply_local_force(0, 0, 0, -8000);
    physics_apply_angular_impulse(999);
    state = DEAD;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
{
    case IDLE:
        fMin = 0;
        fMax = 4;
        fSpeed = .1;
    break;
    case JUMP:
        fMin = 4;
        fMax = 4;
        fSpeed = .1;
    break;
    case WON:
        fMin = 8;
        fMax = 4;
        fSpeed = .1;
    break;
    case DEAD:
        fMin = 12;
        fMax = 4;
        fSpeed = 0;
    break;
}

fCur = (fCur + fSpeed) % fMax;
frame = floor(fCur) + fMin;

draw_sprite_ext(sprPlayer, frame, x, y, image_xscale, image_yscale * dir, -phy_rotation + 180*(dir == LEFT), c_white, 1);

/*
draw_set_color(c_green);
var rot = point_direction(x, y, x + phy_linear_velocity_x, y + min(phy_linear_velocity_y, 0) - 150);
var l1 = lengthdir_x(50, rot);
var l2 = lengthdir_y(50, rot)
draw_line(x, y, x + l1 , y +l2);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>2.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.00999999977648258</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>10</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>26,6</point>
    <point>42,8</point>
    <point>48,18</point>
    <point>50,46</point>
    <point>42,56</point>
    <point>22,56</point>
    <point>12,42</point>
    <point>14,18</point>
  </PhysicsShapePoints>
</object>
