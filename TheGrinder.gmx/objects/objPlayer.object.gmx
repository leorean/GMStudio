<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-15</depth>
  <persistent>0</persistent>
  <parentName>objAny</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xVel = 0;
yVel = 0;
yGrav = .15;
dir = RIGHT;
state = IDLE;
jump = false;
hp = 1;

// input vars
mx = mouse_x;
my = mouse_y;
kVel = 0; // walk velocity (0 - 1)
kLeft = false;
kRight = false;
kJump = false;
dev = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state != DEAD)
{
    // input
    for (i = 0; i &lt; 5; i ++)
    {
        if (dev == -1)
        {
            mx = device_mouse_x(i);
            my = device_mouse_y(i);
            
            if (device_mouse_check_button(i, mb_left))
                dev = i;
        }
        
        if (dev != -1)
        {
            kLeft = (mx - device_mouse_x(dev)) &gt; 10;
            kRight = (mx - device_mouse_x(dev)) &lt; 10;
            
            kVel = min(abs(mx - device_mouse_x(dev)) / 40, 1);
            
            if (abs(mx - device_mouse_x(dev)) &lt; 10)
            {
                kLeft = false;
                kRight = false;
            }
    
            kJump = (my - device_mouse_y(dev)) &gt; 40;
                    
            if (device_mouse_check_button_released(dev, mb_left))
            {
                dev = -1;
            }
        }
        else
        {
            kVel = 0;
            kLeft = false;
            kRight = false;
            kJump = false;
        }
    }
    
    // flags
    
    // platforms
    onPlatform = collision_line(bbox_left, bbox_bottom + max(1, yVel + global.yVel), bbox_right, bbox_bottom + max(1, yVel + global.yVel), objPlatform, false, true);
    if (onPlatform)
    {
        y = onPlatform.y;
        yVel = 0;
    }
    onGround = onPlatform || collision_line(bbox_left,bbox_bottom + max(yVel + global.yVel, 1), bbox_right, bbox_bottom + max(yVel + global.yVel, 1), objSolid, false, true) &amp;&amp; yVel &gt;= 0;
    
    // trampoline jump
    if (place_meeting(x, y, objTrampoline) &amp;&amp; yVel &gt;= 0)
    {
        yVel = -6;
        state = JUMP;
    }
        
    // control/state
    if (kLeft || kRight)
    {
        if (onGround) state = WALK;
    }
    
    if (kLeft) 
    {
        state = WALK;
        xVel = -2 * kVel;
        dir = LEFT;
    }
    else if (kRight) 
    {
        state = WALK;
        xVel = 2 * kVel;
        dir = RIGHT;
    }
    else
    {
        if (onGround)
            xVel *= .8;
        if (onGround) state = IDLE;
    }
    
    if (!onGround) state = JUMP;
    
    if (state == JUMP &amp;&amp; yVel &lt; 0)
    {
        instance_deactivate_object(objBlock);
        instance_activate_region(x - TILE, y - TILE, 2* TILE, 2* TILE, true);
        for (i = 0; i &lt; instance_number(objBlock); i++)
        {    
            var block = instance_find(objBlock, i);
            
            if (place_meeting(x, y + yVel + global.yVel - 1, block) &amp;&amp; block.yOff == 0 &amp;&amp; yVel &lt; 0 &amp;&amp; state == JUMP)
            {
                block.hp = max(block.hp - 1, 0);
                block.yOff = -4;
            }
        }
        
        instance_activate_object(objBlock);
    }
    
    yVel = min(yVel + yGrav, 5);
    
    if (state == IDLE || state == WALK)
    {
        if (kJump)
        {
            yVel = -4.5;
            state = JUMP;
        }
    }
    
    // x collision
    if (!place_meeting(x + xVel, y - global.yVel, objSolid) &amp;&amp; in(bbox_left + xVel, 0, room_width) &amp;&amp; in(bbox_right + xVel, 0, room_width))
    {
        x += xVel;
    }
    else
    {
        xVel = 0;
    }
    
    // y collision
    if (!place_meeting(x, y + yVel + global.yVel, objSolid))
    {
        y += yVel;
    }
    else
    {    
        if (yVel &gt;= 0) move_contact_solid(270, 8);
        yVel = 0;
    }
    
    if (place_meeting(x, y, objGrinder)) hp = 0;
    
    if (hp &lt;= 0)
    {
        xVel = -.5 + random(1);
        yVel = -3;
        state = DEAD;
    }
}
else //DEAD
{
    x += xVel;
    yVel += yGrav;
    y += yVel;
    
    if (bbox_top &gt; room_height) instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_text(x, y - TILE, state);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
