<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>objLiving</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objControl.spawnX = x;
objControl.spawnY = y;

die = false;

if (!instance_exists(objCamera))
    instance_create(x,y,objCamera);

canPlaceBlock = false;
blockDelay = 0; //wait a certain time until you can walk again after placing a block

state = IDLE;
statePrev = state;
dir = RIGHT;
look = NONE;
xVel = 0;
yVel = 0;
xVelOther = 0;
xVelMax = 4;
yVelMax = 4;
cx = x+TILE/2;
cy = y+TILE/2;
px = -1;
py = -1;

block = noone;

yGrav = .15;
yGravGlide = .08;

jumpSpd = 3.4;
jumpSpdLow = 2.5;
jumpSpdGlide = 3;
xSpd = 1.5;
xSpdLow = 1;


jumped = false;
onGround = false;
hasBlock = -1;

inside = noone;

//++++drawing++++
fCur = 0;
fMax = 3;
fSpeed = 0;
frame = 0;

//++++input++++
kLeft = false;
kRight = false;
kUp = false;
kDown = false;
kJump = false;
kAction = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++local variables++++
cx = x+TILE/2;
cy = y+TILE/2;
//++++++++

//++++input++++
forceX = 1;
forceY = 1;
if (instance_exists(objDPad))
&amp;&amp; !keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down)
{
    forceX = objDPad.forceX;
    forceY = objDPad.forceY;    
}
kLeft = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check(vk_left) || (instance_exists(objDPad) &amp;&amp; objDPad.kLeft &amp;&amp; objDPad.forceX &gt;= .35)) &amp;&amp; (global.gameState == G.PLAY);
kRight = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check(vk_right) || (instance_exists(objDPad) &amp;&amp; objDPad.kRight &amp;&amp; objDPad.forceX &gt;= .35)) &amp;&amp; (global.gameState == G.PLAY);
kUp = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check(vk_up) || (instance_exists(objDPad) &amp;&amp; objDPad.kUp &amp;&amp; objDPad.forceY &gt;= .35)) &amp;&amp; (global.gameState == G.PLAY);
kDown = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check(vk_down) || (instance_exists(objDPad) &amp;&amp; objDPad.kDown &amp;&amp; objDPad.forceY &gt;= .35)) &amp;&amp; (global.gameState == G.PLAY);
kJump = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check_pressed(ord('A')) || (instance_exists(objDPadButton1) &amp;&amp; objDPadButton1.pressed)) &amp;&amp; (global.gameState == G.PLAY);
kAction = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check_pressed(ord('S')) || (instance_exists(objDPadButton2) &amp;&amp; objDPadButton2.pressed)) &amp;&amp; (global.gameState == G.PLAY);
diag = ((instance_exists(objDPad) &amp;&amp; objDPad.diag)) &amp;&amp; (global.gameState == G.PLAY);
ddir = NONE;
with(objDPad) if (forceX &gt;= .35) objPlayer.ddir = dir;

if (!die &amp;&amp; !blockDelay &amp;&amp; (ddir == LEFT || (kLeft &amp;&amp; !kRight)) &amp;&amp; (global.gameState == G.PLAY)) dir = LEFT;
if (!die &amp;&amp; !blockDelay &amp;&amp; (ddir == RIGHT || (kRight &amp;&amp; !kLeft)) &amp;&amp; (global.gameState == G.PLAY)) dir = RIGHT;

//++++++++++++++
blockDelay = max(blockDelay - 1,0);
xVel = sign(xVel)*min(abs(xVel),xVelMax);
yVel = sign(yVel)*min(abs(yVel),yVelMax);
//++++++++++++++

px = (cx div TILE) * TILE; py = (cy div TILE) * TILE;

if (state != DIG &amp;&amp; state != PUSH)
{
    if (kUp)
        look = UP;
    else if (kDown)
        look = DOWN;
    else
        look = NONE;
}

if (look == UP) py = py - TILE;
if (look == DOWN) py = py + TILE;
if (look == NONE)// || kLeft || kRight)// || diag)
{
    if (dir == LEFT) px = px - TILE;
    if (dir == RIGHT) px = px + TILE;
}
if (!die)
    block = collision_point(px+TILE/2,py+TILE/2,objBlock,true,true);//instance_place(px,py,objBlock);   
if (!die &amp;&amp; (state == WALK || state == IDLE))
{
    //collision_circle(px+TILE/2,py+TILE/2,4,objBlock,true,true);
    if (kAction &amp;&amp; onGround &amp;&amp; (xVelOther == 0))
    {
        if (instance_exists(block))
        {
            blockDelay = TILE; xVel = 0;
            if (block.type == 3) //grass block
            {
                state = DIG;
                x = (cx div TILE) * TILE;
                y = (cy div TILE) * TILE;
                with(block)
                {
                    instance_create(x,y,objEffectDust);
                    instance_destroy();
                }
                block = noone;
            }
            else if (block.type == 0)
            {
                if (look == NONE)
                {
                    if (block.canBePushed &amp;&amp; in(block.x,TILE,room_width-2*TILE))
                    {
                        x = px-sign(dir)*TILE;//(cx div TILE) * TILE;
                        y = py;//(cy div TILE) * TILE;
                        block.state = PUSH;
                        state = PUSH;
                    }// else
                    //    block = noone;
                }
            }
            
        }
    }
}
/*
if (hasBlock == -1) // take block
{
    if (kAction)
    {
        blk = collision_circle(px+TILE/2,py+TILE/2,4,objBlock,true,true);
        if (blk == noone)
            blk = collision_circle(px+TILE/2,py+TILE/2,4,objBlockTemp,true,true);
        
        if (instance_exists(blk))
        {
            if (blk.type != 6) //cannot be taken
            {
                instance_create(blk.x,blk.y,objEffectDust);
                
                if (blk.type == 3) //grass block
                {
                    blockDelay = TILE; xVel = 0;
                    with(blk) instance_destroy();
                }
                else
                {
                    blockDelay = TILE; xVel = 0;
            
                    hasBlock = blk.type;
                    
                    //so it cant be abused
                    if (hasBlock == 1)
                        yVel = max(yVel,-jumpSpdGlide);
                    else
                        yVel = max(yVel,-jumpSpdLow);
                    
                    with (blk) instance_destroy();
                }
            }
        }
    }
    
} else //place block
{
    if (kAction &amp;&amp; canPlaceBlock)
    {
        blk = instance_create(px,py,objBlockTemp);
        blk.type = hasBlock;
        with (blk)
        {
            if (place_meeting(x,y,objSolid) || place_meeting(x,y,objBlockTemp))
                instance_destroy();
            else
                with(objPlayer)
                {
                    hasBlock = -1;
                    blockDelay = TILE;
                    xVel = 0;                
                }
        }

    }
}
*/
//++++++++
if (state != PUSH)
{
    if (hasBlock == 1)
        yVel += yGravGlide;
    else
        yVel += yGrav;
}
onGround = yVel &gt;= 0 &amp;&amp; collision_rectangle(bbox_left,bbox_bottom+1+yVel,bbox_right,bbox_bottom+4,objSolid,true,true);
if (onGround)
    jumped = false;

var s;
if (hasBlock == -1) s = xSpd*forceX;
else s = xSpdLow*forceX;

if (!die &amp;&amp; kLeft &amp;&amp; !kRight &amp;&amp; state != PUSH &amp;&amp; state != DIG &amp;&amp; state != PUSH) //GO LEFT
{
    if (xVel &lt; 0)
        dir = LEFT;
        
    xVel = max(xVel - .2, -s);
    if (onGround)
        state = WALK;
    else
        state = JUMP;        
}
if (!die &amp;&amp; kRight &amp;&amp; !kLeft &amp;&amp; state != PUSH &amp;&amp; state != DIG &amp;&amp; state != PUSH) //GO RIGHT
{
    if (xVel &gt; 0)
        dir = RIGHT;

    xVel = min(xVel + .2, s);

    if (onGround)
        state = WALK;
    else
        xVel = min(xVel + .2, s);
}

if (!die &amp;&amp; (!kLeft &amp;&amp; !kRight || (kLeft &amp;&amp; kRight)))
{
    xVel = sign(xVel) * max(abs(xVel) - .2, 0);
    if (onGround &amp;&amp; state != PUSH &amp;&amp; state != DIG)
        state = IDLE;
    else
        if (state == IDLE || state == WALK) state = JUMP;

}

if (!die &amp;&amp; kJump &amp;&amp; !jumped &amp;&amp; state != PUSH &amp;&amp; state != DIG) //JUMP
{
    jumped = true;
    state = JUMP;
    if (hasBlock == -1)
        yVel = -jumpSpd;
    else if (hasBlock == 1)
        yVel = -jumpSpdGlide;
    else
        yVel = -jumpSpdLow;
}

//++++COLLECT++++
with(instance_place(x,y,objCollectable))
{
    repeat(30)
        instance_create(x+TILE/2,y+TILE/2,objParticle);
    
    e = instance_create(x,y,objEffectDust);
    e.type = 2;
    global.collect++;
    instance_destroy();
    if ((global.collect == global.maxCollect) &amp;&amp; global.maxCollect &gt; 0)
    {
        global.gameState = G.GAMEWIN;
        //instance_create(view_xview[0],view_yview[0],objWinEffect);
        /*var txt = instance_create(view_xview[0]+WIDTH/2,view_yview[0]+HEIGHT/2,objText);
        txt.font = fntBig;
        txt.text = "Clear!";*/
        with(objPlayer)
        {
            xVel = 0;
            yVel = 0;
        }
    }
}

//++++automatic states++++
if (!die &amp;&amp; (state == DIG || state == PUSH))
{
    //x = (cx div TILE) * TILE;
    //y = (cy div TILE) * TILE;
    xVel = 0;
    yVel = 0;
    x += (px - ((cx div TILE) * TILE))/16;
    if (look != UP)
        y += (py - ((cy div TILE) * TILE))/16;
    if (!blockDelay)
    {
        x = (cx div TILE)*TILE;
        y = (cy div TILE)*TILE;
        state = IDLE;
    }

}


//++++win szenario++++
if (global.gameState == G.GAMEWIN)
{
    dir = RIGHT;
    state = WIN;
}

//++++die szenario++++
if (global.gameState != G.GAMEWIN)
    if (die || place_meeting(x,y,objSpike) || y &gt; room_height)
    {
        global.gameState = G.GAMEOVER;
        blockDelay = 0;
        instance_create(x,y,objEffectDust);
        instance_destroy();
    }


if (!place_meeting(x+xVel+xVelOther,y,objSolid) &amp;&amp; in(cx+xVel+xVelOther,0,room_width))
    x += xVel + xVelOther;
else
    xVel = 0;
repeat((abs(yVel))*10)
    if (!place_meeting(x,y+sign(yVel)*.1,objSolid))
        y += sign(yVel)*.1*(state != PUSH &amp;&amp; state != DIG);
    else
        yVel = 0;

//++++end step stuff++++
if (statePrev != state)
    fCur = 0;
statePrev = state;
xVelOther = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fCur = (fCur + fSpeed) % (fMax + 1);
switch(state)
{
    case IDLE:
        row = 0;
        fSpeed = .1;
        if (look == UP) fCur = 4;
        if (look == DOWN) fCur = 5;      
    break;
    case WALK:
        row = 1;
        fSpeed = .2;
    break;
    case JUMP:
        if (yVel &gt;= 0) fCur = 2;
        else fCur = 0;
        row = 2;
        fSpeed = 0;
    break;
    case WIN:
        row = 3;
        fSpeed = .15;
    break;
    case PUSH:
        row = 4
        fSpeed = .1;
    break;
    case DIG:
        row = 5
        fSpeed = .15;
    break;
}
frame = floor(fCur);

if (state != WIN)
{
    if (state == WALK || state == IDLE)
        c = c_white;
    else
        c = c_red;

    if (instance_exists(block))
    {
        if (block.type == 0 || block.type == 3)
            draw_sprite_part_ext(sprGfx,-1,0,2*TILE,TILE,TILE,block.x,block.y,1,1,c_white,.5);
    }
        
    /*
    if (state != PUSH &amp;&amp; state != DIG)
        draw_sprite_part_ext(sprGfx,-1,0,2*TILE,TILE,TILE,px,py,1,1,c,.5);
    */
}
/*
if (state != WIN)
{
    //if (instance_exists(block))
    //    draw_sprite_part_ext(sprGfx,-1,0,2*TILE,TILE,TILE,block.x,block.y,1,1,c_white,.5);
    
    
    //draw block pointer
    if (canPlaceBlock || hasBlock == -1) c = c_white;
    else c = c_red;
    draw_sprite_part_ext(sprGfx,-1,0,2*TILE,TILE,TILE,(px),(py),1,1,c,.5);
    
    //draw block on back
    if (hasBlock != -1)
        draw_sprite_part(sprGfx,-1,hasBlock*TILE,0,TILE,TILE,floor(x-sign(dir)*TILE*.4),floor(y-TILE*.4));
    
}*/

if (dir == LEFT)
    draw_sprite_part_ext(sprPlayer,-1,frame*2*TILE,row*2*TILE,2*TILE,2*TILE,x+1.5*TILE,y-TILE,-1,1,c_white,1);
if (dir == RIGHT)
    draw_sprite_part_ext(sprPlayer,-1,frame*2*TILE,row*2*TILE,2*TILE,2*TILE,x-.5*TILE,y-TILE,1,1,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
