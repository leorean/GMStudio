<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>objControl.spawnX = x;
objControl.spawnY = y;

die = false;

if (!instance_exists(objCamera))
    instance_create(x,y,objCamera);

canPlaceBlock = false;
blockDelay = 0; //wait a certain time until you can walk again after placing a block

state = IDLE;
statePrev = state;
dir = RIGHT;
look = NONE;
xVel = 0;
yVel = 0;
xVelOther = 0;
xVelMax = 4;
yVelMax = 4;
cx = x+TILE/2;
cy = y+TILE/2;
px = -1;
py = -1;

//block = noone;

yGrav = .15;
yGravGlide = .08;

jumpSpd = 3.4;
xSpd = 1.5;

jumped = false;
onGround = false;

//++++hurt and die++++
hurt = false;
enemy = noone;
hurtDelay = 0;

//++++drawing++++
fCur = 0;
fMax = 3;
fSpeed = 0;
frame = 0;

//++++input++++
kLeft = false;
kRight = false;
kUp = false;
kDown = false;
kJump = false;
kAction = false;

//stat variables
maxHp = 50;
hp = maxHp;

maxAmmo = 100;
ammo = maxAmmo;

maxRechargeDelay = 60;
rechargeDelay = maxRechargeDelay;

//++++weapon stuff
aim = 0; //the angle
weapon = 3;
maxWeapon = 3;
attackDelay = 0;
weaponFrame = 0;
alternate = 0; //left or right hand
weaponDist = 13; //the x-distance between both hands

wepx[IDLE]=array(0,0,0,0); wepy[IDLE] = array(0,-1,0,1);
wepx[WALK]=array(1,2,2,1); wepy[WALK] = array(1,1,2,3);
wepx[JUMP]=array(0,0,0,0); wepy[JUMP] = array(0,0,-1,-1);
wx = 0; wy = 0;

/*handx[IDLE]=array(0,0,0,0); handy[IDLE] = array(0,-1,0,1);
handx[WALK]=array(1,2,2,1); handy[WALK] = array(1,1,2,3);
handx[JUMP]=array(0,0,0,0); handy[JUMP] = array(0,0,-1,-1);*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//++++local variables++++
cx = x+TILE/2;
cy = y+TILE/2;
//++++++++

//++++input++++
forceX = 1;
forceY = 1;
if (instance_exists(objDPad))
&amp;&amp; !keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down)
{
    forceX = objDPad.forceX;
    forceY = objDPad.forceY;    
}
kLeft = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check(vk_left) || (instance_exists(objDPad) &amp;&amp; objDPad.kLeft &amp;&amp; objDPad.forceX &gt;= .6)) &amp;&amp; (global.gameState == G.PLAY);
kRight = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check(vk_right) || (instance_exists(objDPad) &amp;&amp; objDPad.kRight &amp;&amp; objDPad.forceX &gt;= .6)) &amp;&amp; (global.gameState == G.PLAY);
kUp = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check(vk_up) || (instance_exists(objDPad) &amp;&amp; objDPad.kUp &amp;&amp; objDPad.forceY &gt;= .35)) &amp;&amp; (global.gameState == G.PLAY);
kDown = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check(vk_down) || (instance_exists(objDPad) &amp;&amp; objDPad.kDown &amp;&amp; objDPad.forceY &gt;= .35)) &amp;&amp; (global.gameState == G.PLAY);
kJump = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check_pressed(ord('A')) || (instance_exists(objDPadButton1) &amp;&amp; objDPadButton1.pressed)) &amp;&amp; (global.gameState == G.PLAY);
kAction = !die &amp;&amp; !blockDelay &amp;&amp; (keyboard_check(ord('S')) || mouse_check_button(mb_right) || (instance_exists(objDPadButton2) &amp;&amp; objDPadButton2.pressing)) &amp;&amp; (global.gameState == G.PLAY);
diag = ((instance_exists(objDPad) &amp;&amp; objDPad.diag)) &amp;&amp; (global.gameState == G.PLAY);
ddir = NONE;
with(objDPad) /*if (forceX &gt;= .2)*/ objPlayer.ddir = dir;

if (!die &amp;&amp; !blockDelay &amp;&amp; (ddir == LEFT || (kLeft &amp;&amp; !kRight)) &amp;&amp; (global.gameState == G.PLAY)) dir = LEFT;
if (!die &amp;&amp; !blockDelay &amp;&amp; (ddir == RIGHT || (kRight &amp;&amp; !kLeft)) &amp;&amp; (global.gameState == G.PLAY)) dir = RIGHT;

//++++++++++++++
blockDelay = max(blockDelay - 1,0);
xVel = sign(xVel)*min(abs(xVel),xVelMax);
yVel = sign(yVel)*min(abs(yVel),yVelMax);
//++++++++++++++

px = (cx div TILE) * TILE; py = (cy div TILE) * TILE;

if (kUp)
    look = UP;
else if (kDown)
    look = DOWN;
else
    look = NONE;

if (look == UP) py = py - TILE;
if (look == DOWN) py = py + TILE;
if (look == NONE)// || kLeft || kRight)// || diag)
{
    if (dir == LEFT) px = px - TILE;
    if (dir == RIGHT) px = px + TILE;
}

//++++hurt and die++++
enemy = instance_place(x,y,objEnemy);
if (!hurtDelay &amp;&amp; instance_exists(enemy))
{
    if (enemy.state != DEAD)
    hp = max(hp - enemy.dmg, 0);
    hurt = true;
    
    yVel = -1.5;
    xVel = -sign(dir)*1;
    hurtDelay = 30;
    
    var t = instance_create(cx,cy,objText);
    if (hp &gt; 0)
    {
        t.text = "-"+string(enemy.dmg);
        t.xVel = -1+random(2);
        t.yVel = -2;
        t.yGrav = .1;
    }
    else
    {
        t.text = "*YOU DIED*";
    }
    //t.c1 = c_red;
//    t.c2 = c_none;
}

if (hp == 0) die = true;
//HURT IMPULSE:
hurtDelay = max(hurtDelay - 1,0);
if (!hurtDelay)
    hurt = false;

//++++ATTACK++++
//choose weapon:
if (mouse_wheel_up()) weapon = (weapon + 1) mod (maxWeapon+1);
if (mouse_wheel_down()) weapon = (weapon + (maxWeapon)) mod (maxWeapon+1);
//aim angle
if (objDPad.drag)
{
    if (!onGround || state != WALK)
        aim = objDPad.angle;
    else
    {
        if (in(objDPad.angle,180,270))
            aim = 180;
        else if (in(objDPad.angle,270,360))
            aim = 0;
        else
            aim = objDPad.angle;
    }
}
else
    aim = 0 + 180*(dir == LEFT) + sign(dir)*90*(look == UP) - sign(dir)*90*(look == DOWN);
attackDelay = max(attackDelay - 1, 0);
rechargeDelay = max(rechargeDelay - 1,0);
if (!attackDelay &amp;&amp; kAction)
{
    if (ammo &gt; 0)
    {
        rechargeDelay = maxRechargeDelay;
        weaponFrame = 1;
        switch(weapon)
        {
            case 0: //GATLING GUN
                alternate = (alternate+1) % 2;
                attackDelay = 5;
                ammo = max(ammo - 2,0);
                var p = instance_create(cx+(weaponDist*(alternate == 0)*sign(dir)),cy,objProjectileGatling);
                p.angle = aim-3+random(6);
            break;
            case 1: //LIGHTNING GUN
                alternate = (alternate+1) % 2;
                attackDelay = 10;
                ammo = max(ammo - 3,0);
                var p = instance_create(cx+(weaponDist*(alternate == 0)*sign(dir)),cy,objProjectileLightning);
                p.angle = aim;
                p.timer = attackDelay;
            break;
            case 2: //CANNON
                attackDelay = 15;
                alternate = (alternate+1) % 2;
                ammo = max(ammo - 5,0);
                var p = instance_create(cx+(weaponDist*(alternate == 0)*sign(dir)),cy,objProjectileCannon);
                p.angle = aim;
                p.xVel = lengthdir_x(p.spd,aim);
                p.yVel = min(lengthdir_y(p.spd,aim),-p.yGrav*10);
            break;
            case 3: //FLAMESPITTER
                attackDelay = 2;
                alternate = 0;
                ammo = max(ammo - .3,0);
                for (i = 0; i &lt; 10; i++)
                {
                    var p = instance_create(cx+(weaponDist*(alternate == 1)*sign(dir)),cy,objProjectileFlame);
                    p.angle = aim-10+random(20);
                    p.canHurt = (i % 5 == 0);
                    p.spd = 6+i;
                }
            break;
        }
    } else
    {
        if (!attackDelay)
        {
            var t = instance_create(cx,cy,objText);
            t.text = "&lt;empty&gt;";
            t.yVel = -1;
            t.timer = 20;
            attackDelay = 20;
        }   
    }
}
if (kAction) rechargeDelay = maxRechargeDelay;
if (!rechargeDelay) ammo = min(ammo + 1,maxAmmo);

/*if (state == ATTACK)
{
    //xVel *= .9;
    if (fCur &gt;= (fMax + 1 - fSpeed))
    if (onGround) state = IDLE else state = JUMP;
}*/

/*
block = collision_point(px+TILE/2,py+TILE/2,objBlock,true,true);//instance_place(px,py,objBlock);   
if (!die &amp;&amp; (state == WALK || state == IDLE))
{
    //collision_circle(px+TILE/2,py+TILE/2,4,objBlock,true,true);
    if (kAction &amp;&amp; onGround &amp;&amp; (xVelOther == 0))
    {
        if (instance_exists(block))
        {
            blockDelay = TILE; xVel = 0;
            if (block.type == 3) //grass block
            {
                state = DIG;
                x = (cx div TILE) * TILE;
                y = (cy div TILE) * TILE;
                with(block)
                {
                    instance_create(x,y,objEffectDust);
                    instance_destroy();
                }
                block = noone;
            }
            else if (block.type == 0)
            {
                if (look == NONE)
                {
                    if (block.canBePushed &amp;&amp; in(block.x,TILE,room_width-2*TILE))
                    {
                        x = px-sign(dir)*TILE;//(cx div TILE) * TILE;
                        y = py;//(cy div TILE) * TILE;
                        block.state = PUSH;
                        state = PUSH;
                    }// else
                    //    block = noone;
                }
            }
            
        }
    }
}*/
/*
if (hasBlock == -1) // take block
{
    if (kAction)
    {
        blk = collision_circle(px+TILE/2,py+TILE/2,4,objBlock,true,true);
        if (blk == noone)
            blk = collision_circle(px+TILE/2,py+TILE/2,4,objBlockTemp,true,true);
        
        if (instance_exists(blk))
        {
            if (blk.type != 6) //cannot be taken
            {
                instance_create(blk.x,blk.y,objEffectDust);
                
                if (blk.type == 3) //grass block
                {
                    blockDelay = TILE; xVel = 0;
                    with(blk) instance_destroy();
                }
                else
                {
                    blockDelay = TILE; xVel = 0;
            
                    hasBlock = blk.type;
                    
                    //so it cant be abused
                    if (hasBlock == 1)
                        yVel = max(yVel,-jumpSpdGlide);
                    else
                        yVel = max(yVel,-jumpSpdLow);
                    
                    with (blk) instance_destroy();
                }
            }
        }
    }
    
} else //place block
{
    if (kAction &amp;&amp; canPlaceBlock)
    {
        blk = instance_create(px,py,objBlockTemp);
        blk.type = hasBlock;
        with (blk)
        {
            if (place_meeting(x,y,objSolid) || place_meeting(x,y,objBlockTemp))
                instance_destroy();
            else
                with(objPlayer)
                {
                    hasBlock = -1;
                    blockDelay = TILE;
                    xVel = 0;                
                }
        }

    }
}
*/
//++++++++
yVel += yGrav;

onGround = yVel &gt;= 0 &amp;&amp; collision_rectangle(bbox_left,bbox_bottom+1+yVel,bbox_right,bbox_bottom+4,objSolid,true,true);
if (onGround)
    jumped = false;

var s = xSpd*forceX;

//++++WALK LEFT++++
if (kLeft &amp;&amp; !kRight &amp;&amp; (state == WALK || state == JUMP || state == IDLE))
{
    if (xVel &lt; 0)
        dir = LEFT;
        
    xVel = max(xVel - .2, -s);
    if (onGround)
        state = WALK;
    else
        state = JUMP;        
}
//++++WALK RIGHT++++
if (kRight &amp;&amp; !kLeft &amp;&amp; (state == WALK || state == JUMP || state == IDLE))
{
    if (xVel &gt; 0)
        dir = RIGHT;

    xVel = min(xVel + .2, s);

    if (onGround)
        state = WALK;
    else
        xVel = min(xVel + .2, s);
}

if (!die &amp;&amp; (!kLeft &amp;&amp; !kRight || (kLeft &amp;&amp; kRight)))
{
    xVel = sign(xVel) * max(abs(xVel) - .2, 0);
    if (onGround &amp;&amp; (state == WALK || state == JUMP || state == IDLE))
        state = IDLE;
    else
        if (state == IDLE || state == WALK) state = JUMP;

}

if (kJump &amp;&amp; !jumped &amp;&amp; (state == WALK || state == JUMP || state == IDLE)) //JUMP
{
    jumped = true;
    state = JUMP;
    yVel = -jumpSpd;
}

//++++COLLECT++++
with(instance_place(x,y,objCollectable))
{
    repeat(30)
        instance_create(x+TILE/2,y+TILE/2,objParticle0);
    
    e = instance_create(x,y,objEffectDust);
    e.type = 2;
    global.collect++;
    instance_destroy();
    if ((global.collect == global.maxCollect) &amp;&amp; global.maxCollect &gt; 0)
    {
        global.gameState = G.GAMEWIN;
        with(objPlayer)
        {
            xVel = 0;
            yVel = 0;
        }
    }
}
/*
//++++automatic states++++
if (!die &amp;&amp; (state == DIG || state == PUSH))
{
    //x = (cx div TILE) * TILE;
    //y = (cy div TILE) * TILE;
    xVel = 0;
    yVel = 0;
    x += (px - ((cx div TILE) * TILE))/16;
    if (look != UP)
        y += (py - ((cy div TILE) * TILE))/16;
    if (!blockDelay)
    {
        x = (cx div TILE)*TILE;
        y = (cy div TILE)*TILE;
        state = IDLE;
    }

}
*/

//++++win szenario++++
if (global.gameState == G.GAMEWIN)
{
    dir = RIGHT;
    state = WIN;
}

//++++die szenario++++
if (global.gameState != G.GAMEWIN)
    if (die || y &gt; room_height)
    {
        global.gameState = G.GAMEOVER;
        blockDelay = 0;
        instance_create(x,y,objEffectDust);
        instance_destroy();
    }


if (!place_meeting(x+xVel+xVelOther,y,objSolid) &amp;&amp; in(cx+xVel+xVelOther,0,room_width))
    x += xVel + xVelOther;
else
    xVel = 0;
repeat((abs(yVel))*10)
    if (!place_meeting(x,y+sign(yVel)*.1,objSolid))
        y += sign(yVel)*.1;
    else
        yVel = 0;

//++++end step stuff++++
if (statePrev != state)
    fCur = 0;
statePrev = state;
xVelOther = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fCur = (fCur + fSpeed) % (fMax + 1);
switch(state)
{
    case IDLE:
        row = 0;
        fSpeed = .1;
        //if (look == UP) fCur = 4;
        //if (look == DOWN) fCur = 5;      
    break;
    case WALK:
        row = 1;
        fSpeed = .2;
    break;
    case JUMP:
        if (yVel &gt;= 0) fCur = 2;
        else fCur = 0;
        row = 2;
        fSpeed = 0;
    break;
    case WIN:
        row = 3;
        fSpeed = .15;
    break;
    case PUSH:
        row = 4;
        fSpeed = .1;
    break;
    case DIG:
        row = 5;
        fSpeed = .15;
    break;
    case ATTACK:
        row = 6;
        fSpeed = .3;
    break;    
}
frame = floor(fCur);
/*
if (state != WIN)
{
    if (state == WALK || state == IDLE)
        c = c_white;
    else
        c = c_red;

    if (instance_exists(block))
    {
        if (block.type == 0 || block.type == 3)
            draw_sprite_part_ext(sprGfx,-1,0,2*TILE,TILE,TILE,block.x,block.y,1,1,c_white,.5);
    }
}
*/

/*
if (state != WIN)
{
    //if (instance_exists(block))
    //    draw_sprite_part_ext(sprGfx,-1,0,2*TILE,TILE,TILE,block.x,block.y,1,1,c_white,.5);
    
    
    //draw block pointer
    if (canPlaceBlock || hasBlock == -1) c = c_white;
    else c = c_red;
    draw_sprite_part_ext(sprGfx,-1,0,2*TILE,TILE,TILE,(px),(py),1,1,c,.5);
    
    //draw block on back
    if (hasBlock != -1)
        draw_sprite_part(sprGfx,-1,hasBlock*TILE,0,TILE,TILE,floor(x-sign(dir)*TILE*.4),floor(y-TILE*.4));
    
}*/

//++++prepare weapon draw coordinates++++
weaponFrame = (weaponFrame + .3*(floor(weaponFrame) != 0)) % 4;
var wx = 0, wy = 0;
if (state == IDLE || state == WALK || JUMP)
    wx = wepx[state];wy = wepy[state];

if (hurtDelay % 2 == 0)
{
    //++++draw bg weapon++++
    if (dir == LEFT)
        draw_sprite_part_ext(sprPlayer,-1,(fMax+1)*2*TILE+2*floor(weaponFrame*!(alternate == 0))*TILE,weapon*2*TILE,2*TILE,2*TILE,x+1.5*TILE-wx[frame]-weaponDist,y-TILE+wy[frame],-1,1,c_white,1);
    if (dir == RIGHT)
        draw_sprite_part_ext(sprPlayer,-1,(fMax+1)*2*TILE+2*floor(weaponFrame*!(alternate == 0))*TILE,weapon*2*TILE,2*TILE,2*TILE,x-.5*TILE+wx[frame]+weaponDist,y-TILE+wy[frame],1,1,c_white,1);
    
    //++++draw player++++
    if (dir == LEFT)
        draw_sprite_part_ext(sprPlayer,-1,frame*2*TILE,row*2*TILE,2*TILE,2*TILE,x+1.5*TILE,y-TILE,-1,1,c_white,1);
    if (dir == RIGHT)
        draw_sprite_part_ext(sprPlayer,-1,frame*2*TILE,row*2*TILE,2*TILE,2*TILE,x-.5*TILE,y-TILE,1,1,c_white,1);
    
    //++++draw crosshair++++
    var chx,chy;
    //angle = (angle + spd) mod 360;
    rad_aim = ((aim / 180) * pi);
    chx = (cos(rad_aim)) * 3*TILE;
    chy = -(sin(rad_aim)) * 3*TILE;
    aimX = cx + chx;
    aimY = cy + chy;
    
    draw_sprite_part(sprGfx,-1,2*TILE,2*TILE,TILE,TILE,aimX-TILE/2,aimY-TILE/2);
    
    //++++draw weapon++++
    if (dir == LEFT)
        draw_sprite_part_ext(sprPlayer,-1,(fMax+1)*2*TILE+2*floor(weaponFrame*(alternate == 0))*TILE,weapon*2*TILE,2*TILE,2*TILE,x+1.5*TILE-wx[frame],y-TILE+wy[frame],-1,1,c_white,1);
    if (dir == RIGHT)
        draw_sprite_part_ext(sprPlayer,-1,(fMax+1)*2*TILE+2*floor(weaponFrame*(alternate == 0))*TILE,weapon*2*TILE,2*TILE,2*TILE,x-.5*TILE+wx[frame],y-TILE+wy[frame],1,1,c_white,1);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
