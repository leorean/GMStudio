<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskDPad</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.alphaHud = 1;
global.alphaTimer = 60;

w = 5*TILE;
h = 5*TILE;

offX = TILE + w/2;
offY = HEIGHT - TILE - w/2;

a = view_xview[0];
b = view_yview[0];

cx = a+offX;
cy = b+offY;

x = cx;
y = cy;

dx = cx;
dy = cy;

drag = false; //is the stick being dragged?
dev = 0; //device number (0...4)
checked = false; //to position the stick ONE time.

kLeft = false;
kRight = false;
kUp = false;
kDown = false;
diag = false; //is a diagonal angle used?
dir = NONE; //either LEFT or RIGHT, depending on the diagonal angle
forceX = 1;
forceY = 1;
//stick = instance_create(cx,cy,objDPadStick);
//stick.depth = depth-1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a = view_xview[0];
b = view_yview[0];

diag = false;
dir = NONE;

if (!drag)
{
    kLeft = false;
    kRight = false;
    kUp = false;
    kDown = false;
    for (i = 0; i &lt; 5; i++)
    {
        if (device_mouse_check_button_pressed(i,mb_left) &amp;&amp; in(device_mouse_x(i),a,a + WIDTH/2))
        {
            cx = device_mouse_x(i);
            cy = device_mouse_y(i);
            offX = cx - a;
            offY = cy - b;
            dx = x;
            xy = y;
        }
        if (device_mouse_check_button(i,mb_left) &amp;&amp; in(device_mouse_x(i),cx-w/2-2*TILE,cx+w/2+2*TILE) &amp;&amp; in(device_mouse_y(i),cy-h/2-2*TILE,cy+h/2+2*TILE))
        {
            dev = i;
            drag = true;
            break;
        }
    }
}
else
{
    cx = a + offX;
    cy = b + offY;
    
    if (device_mouse_check_button(dev,mb_left))
    {
        angle = point_direction(cx,cy,device_mouse_x(dev),device_mouse_y(dev));
        rad_angle = ((angle / 180) * pi);
        
        dx = cx + (cos(rad_angle)) * min(abs(cx-device_mouse_x(dev)),w/2-TILE);
        dy = cy -(sin(rad_angle)) * min(abs(cy-device_mouse_y(dev)),h/2-TILE);
        
        if (true)//min(abs(cx-device_mouse_x(dev)),abs(cy-device_mouse_y(dev))) &gt; TILE)
        {
            if (in(angle,90,270))
                dir = LEFT;
            else
                dir = RIGHT;
            
            if (in(angle,30,60) || in(angle,120,150) || in(angle,210,240) || in(angle,300,330))
                diag = true;
            
            if (in(angle,315,360) || in(angle,0,45))
                kRight = true;
            else
                kRight = false;
                
            if (in(angle,45,135))
                kUp = true;
            else
                kUp = false;
                
            if (in(angle,135,225))
                kLeft = true;
            else
                kLeft = false;
                
            if (in(angle,225,315))
                kDown = true;
            else
                kDown = false;
        }
    } else
    {
        drag = false;
        dev = 0;
        cx = -1000;
        cy = -1000;
    }
}

forceX = abs(cx - dx) / (w/2 - TILE);
forceY = abs(cy - dy) / (h/2 - TILE);

//show_debug_message("xf: " + string(forceX) + ", yf: " + string(forceY));


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>a = view_xview[0];
b = view_yview[0];

if (drag)
    {cx = a + offX; cy = b + offY;}

/*
cx = a + offX; cy = b + offY;
x = cx;
y = cy;
*/

if (drag || objDPadButton1.pressing || objDPadButton2.pressing)//HUD alpha
{
    global.alphaHud = max(global.alphaHud - .05,.15);
    global.alphaTimer = 1.5*60;
} else
{
    global.alphaTimer = max(global.alphaTimer - 1, 0);
    global.alphaHud = min(global.alphaHud + .05*(global.alphaTimer==0), .75);
}
if (!drag)//feather back in position
{
    if (max(abs(dx - cx),abs(dy - cy)) &gt; 4 &amp;&amp; checked)
    {
        dx -= (dx - cx) / 4;
        dy -= (dy - cy) / 4;
    } else
    {
        dx = cx;
        dy = cy;
        checked = true;
    }
}
//show_debug_message("dev: "+string(dev)+", drag: "+string(drag)+", L: "+string(kLeft)+", R: "+string(kRight)+", U: "+string(kUp)+", D: "+string(kDown));

draw_sprite_part_ext(sprGfx,-1,0,4*TILE,5*TILE,5*TILE,cx-w/2,cy-h/2,1,1,c_white,global.alphaHud);
draw_sprite_part_ext(sprGfx,-1,0,9*TILE,3*TILE,3*TILE,dx-1.5*TILE,dy-1.5*TILE,1,1,c_white,global.alphaHud);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
