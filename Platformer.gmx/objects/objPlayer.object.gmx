<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = IDLE;
dir = RIGHT;
xVel = 0;
yVel = 0;
yGrav = 0;
yGravJump = .1;
yGravNormal = .16;
angle = 0;

jumpTimer = 0;
jumps = 0;
maxJumps = 2;
onFloor = false;

hook = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>kLeft = keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right);
kRight = keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left);
kJump = keyboard_check(vk_up);
kJumpPressed = keyboard_check_pressed(vk_up);
kJumpReleased = keyboard_check_released(vk_up);
kAction = keyboard_check_pressed(ord('S'));

if (keyboard_check(ord('R')))
    room_restart();

if (keyboard_check(ord('C')))
    room_speed = 10;
else
    room_speed = 60;

headAgainstCeil = collision_line(bbox_left, bbox_top + min(yVel, -2), bbox_right, bbox_top + min(yVel, -2), objSolid, true, true)

hooked = instance_exists(hook) &amp;&amp; hook.hooked;

if (kAction)
{
    if (!instance_exists(hook))
    {
        hook = instance_create(x, y, objHook);
        hook.angle = point_direction(x, y, x + xVel, y + yVel);
    } else
    {
        with(hook)
            instance_destroy();
    }
}
   
if (onFloor)
{
    jumps = 0;    
    jumpTimer = 30;    
}

if (jumps &lt; maxJumps)
{
    if (kJumpPressed)
    {
        yVel = -4;
        
    }
    
    if (kJump &amp;&amp; jumpTimer)
    {
        jumpTimer = max(jumpTimer - 1, 0);
        yGrav = yGravJump;
    }
    if (kJumpReleased || !jumpTimer)
    {   
        yGrav = yGravNormal;
        jumps++;
    }
}

if (kLeft)
{
    dir = LEFT;
    xVel = max(xVel - .2, -2.5);
}
else if (kRight) {
    dir = RIGHT;
    xVel = min(xVel + .2, 2.5);
} else
{
    xVel *= .8;
}

xVel = sign(xVel) * min(abs(xVel), 4);
yVel = sign(yVel) * min(abs(yVel), 6);

if (!place_meeting(x + xVel, y - 2, objBlock))
{
    x += xVel;    
    // lift up against slopes
    if (place_meeting(x + xVel + sign(xVel), y + yVel, objSlope))
    {
        move_outside_solid(90, sqrt(abs(xVel)*abs(yVel)));
    }
}
else
{
    //move_contact_solid(180*(xVel &lt; 0), max(abs(xVel), 6))
    xVel = 0;
}

// push down against slopes
if(place_meeting(x, y + yVel + 5, objSlope))
{
    move_contact_solid(270, 5);
}

yVel += yGrav;

if (!place_meeting(x, y + yVel, objSolid))
{
    onFloor = false;
    y += yVel;
}
else
{
    if (yVel &gt; 0)
        onFloor = true;
    
    if !(headAgainstCeil)
        move_contact_solid(270, max(abs(yVel), 6));
    yVel = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
