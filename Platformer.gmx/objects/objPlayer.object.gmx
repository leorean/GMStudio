<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = IDLE;
dir = RIGHT;
xVel = 0;
yVel = 0;
yGrav = 0;
yGravJump = .08;
yGravNormal = .16;
angle = 0;

jumpTimer = 0;
jumps = 0;
maxJumps = 2;
onFloor = false;

state = IDLE;
fCur = 0;
fMax = 4;
fSpeed = .1;

againstWall = false;
canAttack = true;

kLeft = false;
kRight = false;
kUp = false;
kDown = false;
kJump = false;
kJumpPressed = false;
kJumpReleased = false;
kAction = false;

gLeft = false;
gRight = false;
gUp = false;
gDown = false;
gJump = false;
gJumpPressed = false;
gJumpReleased = false;
gAction = false;

xs = 1;
ys = 1;

inWater = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (gamepad_is_supported() &amp;&amp; gamepad_is_connected(0))
{
    gLeft = gamepad_axis_value(0, gp_axislh) &lt; -.5;
    gRight = gamepad_axis_value(0, gp_axislh) &gt; .5;
    gUp = gamepad_axis_value(0, gp_axislv) &lt; -.5;
    gDown = gamepad_axis_value(0, gp_axislv) &gt; .5;
    gJump = gamepad_button_check(0, gp_face1);
    gJumpPressed = gamepad_button_check_pressed(0, gp_face1);
    gJumpReleased = gamepad_button_check_released(0, gp_face1);
    gAction = gamepad_button_check_pressed(0, gp_face3);

}

kLeft = (keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_right)) || gLeft;
kRight = (keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left)) || gRight;
kDown = (keyboard_check(vk_down) &amp;&amp; !keyboard_check(vk_up)) || gDown;
kUp = (keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down)) || gUp;

kJump = keyboard_check(vk_up) || gJump;
kJumpPressed = keyboard_check_pressed(vk_up) || gJumpPressed;
kJumpReleased = keyboard_check_released(vk_up) || gJumpReleased;
kAction = keyboard_check_pressed(ord('S')) || gAction;

if (keyboard_check(ord('R')))
    room_restart();

if (keyboard_check(ord('C')))
    room_speed = 10;
else
    room_speed = 60;

headAgainstCeil = collision_line(bbox_left, bbox_top + min(yVel, 0), bbox_right, bbox_top + min(yVel, 0), objSolid, true, true)
inWater = collision_rectangle(bbox_left, bbox_top + 8, bbox_right, bbox_bottom, objWater, true, true);

if (kAction)
{
    if (state != WALL &amp;&amp; canAttack)
    {
        state = ATTACK;
        fCur = 0;
        
        if (onFloor)
            yVel = -1;
        xVel = -sign(dir)* 1 + xVel;
        
    }
}
   
if (onFloor)
{
    jumps = 0;    
    jumpTimer = 40;    
}

if (inWater) 
{
    jumpTimer = 0;
    jumps = 0;
}

if (jumps &lt; maxJumps &amp;&amp; state != ATTACK)
{
    if (kJumpPressed || (kJump &amp;&amp; inWater))
    {
        yVel = -3.5;
        state = JUMPUP;
    }
    
    if (kJump &amp;&amp; jumpTimer)
    {
        jumpTimer = max(jumpTimer - 1, 0);
        yGrav = yGravJump;
    }
    if (kJumpReleased || !jumpTimer)
    {   
        yGrav = yGravNormal;
        jumps++;
    }
}

// walk velocity

if (kLeft)
{
    dir = LEFT;
    if (onFloor &amp;&amp; state != ATTACK) state = WALK;
    
    xVel = max(xVel - .18, -2.7);
}
else if (kRight) {
    dir = RIGHT;
    if (onFloor &amp;&amp; state != ATTACK) state = WALK;
    
    xVel = min(xVel + .18, 2.7);
} else
{
    if (state == WALK)
        state = IDLE;

    xVel *= .8;
}

// attack

if (state == ATTACK)
{
    canAttack = false;
    if (fCur &gt;= fMax - fSpeed)
    {
        state = IDLE;
        canAttack = true;
    }
}

// walljumps

if (place_meeting(x + sign(dir) + xVel, y, objBlock) &amp;&amp; !onFloor
    &amp;&amp; (dir == LEFT &amp;&amp; kLeft || dir == RIGHT &amp;&amp; kRight))
{
    if (!inWater 
        &amp;&amp; !collision_rectangle(bbox_left + 1, bbox_bottom, bbox_right - 1, bbox_bottom + 5, objSolid, true, true)
        &amp;&amp; !place_meeting(x, y + TILE, objWater)
        &amp;&amp; yVel &gt; -1
        &amp;&amp; abs(xVel) &lt; .5)
        againstWall = true;
}

if (againstWall)
{   

    state = WALL;
    
    if (dir == LEFT &amp;&amp; !kLeft || dir == RIGHT &amp;&amp; !kRight)
        againstWall = false;
    
    if (place_meeting(x + 3*sign(dir), y, objBlock))
    {
        if (!kDown)
        {
            yVel = min(yVel, .5);
        } else
        {
            yVel = 2;
        }
        
        jumps = 0;
        jumpTimer = 40;
        
        if (kJumpPressed)
        {
            xVel = - sign(dir) * 1.5;
            againstWall = false;
        }
    } else
    {
        againstWall = false;
    }
} else if (state == WALL)
{
    state = JUMPUP;
}

///////////// physics /////////////

// damping on slopes

l1 = place_meeting(x, y + 2, objSlopeL);
l2 = place_meeting(x, y + 2, objSlopeLL);
r1 = place_meeting(x, y + 2, objSlopeR);
r2 = place_meeting(x, y + 2, objSlopeRR);

if (xVel &gt; 0)
{
    if (l1) xVel *= .97;
    if (l2) xVel *= .92;
    if (r1) xVel *= 1.02;
    if (r2) xVel *= 1.06;
    
} else
{
    if (r1) xVel *= .97;
    if (r2) xVel *= .92;
    if (l1) xVel *= 1.02;
    if (l2) xVel *= 1.06;
}

xVel = sign(xVel) * min(abs(xVel), 4);
yVel = sign(yVel) * min(abs(yVel), 6);

if (inWater)
{
    xVel = sign(xVel) * min(abs(xVel), 1.5);
    yVel = sign(yVel) * min(abs(yVel), 1);
    
    if (yVel &lt; 0 &amp;&amp; (kUp || kJump) &amp;&amp; !place_meeting(x, y - 8, objWater))
        yVel = -4;
}


// check if stuck in floor
if (instance_place(x + xVel, y + 1, objSolid))
    move_outside_solid(90, 1);

// x-collision
    
if (!collision_rectangle(floor(bbox_left + xVel), bbox_top, ceil(bbox_right + xVel), bbox_bottom - 6, objSolid, true, true)) 
{
    x += xVel;    
    // lift up against slopes
    if (place_meeting(x + xVel + 2 * sign(xVel), y + yVel, objSlope))
    {
        move_outside_solid(90, max(2, sqrt(abs(xVel)*abs(yVel))));
    }
}
else
{
    if (abs(xVel) &gt; .5)
        xs = .5;
        
    xVel = 0;
}

// push down against slopes
if(place_meeting(x, y + yVel + 5, objSlope) &amp;&amp; !inWater)
{
    move_contact_solid(270, 5);
}

yVel += .5 * yGrav + .5 * yGrav * !inWater;

onPlatform = yVel &gt;= 0 &amp;&amp; collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom + max(yVel, 0), objPlatform, true, true);

if (!place_meeting(x, y + yVel, objSolid) &amp;&amp; !onPlatform)
{
    onFloor = false;
    y += yVel;
    
    if (abs(yVel) &gt; .5)
        if (state == WALK || state == IDLE)
            state = JUMPUP;
}
else
{

    if (ys == 1 &amp;&amp; yVel &gt; 1)
    {
        ys = .5;
    }

    if (yVel &gt;= 0)
    {
        if (state == JUMPUP || state == JUMPDOWN)
            state = IDLE;
        onFloor = true;
        
        move_contact_solid(270, max(abs(yVel), 4));
    }
    
    yVel = 0;    
}

////////// pre-graphic stuff ///////////

xs = min(xs * 1.1, 1);
ys = min(ys * 1.1, 1);


///////////// states //////////////

if (state == JUMPUP)
{
    if (yVel &gt;= 0)
        state = JUMPDOWN;
}

if (inWater &amp;&amp; !onFloor)
{
    if (state == JUMPUP || state == JUMPDOWN)
        state = SWIM;
}
if (state == SWIM &amp;&amp; !inWater) state = JUMPUP;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fCur = (fCur + fSpeed) % fMax;
frame = floor(fCur);

switch(state)
{
    case IDLE:
        row = 0;
        fSpeed = .1;
    break;
    case WALK:
        row = 1;
        fSpeed = .15;
    break;
    case JUMPUP:
        row = 2;
        fSpeed = .15;
    break;
    case JUMPDOWN:
        row = 3;
        fSpeed = .15;
    break;
    case WALL:
        row = 4;
        fSpeed = .1;
    break;
    case SWIM:
        row = 5;
        fSpeed = .07;
    break;
    case ATTACK:
        row = 6;
        fSpeed = .2;
    break;
}

draw_sprite_part_ext(sprPlayer, -1, frame*2*TILE, row*2*TILE, 2*TILE, 2*TILE, x-TILE + 2*(dir==LEFT)*TILE, y-TILE, -1*(dir == LEFT) + (dir == RIGHT), 1, c_white,1);
//draw_sprite_part_ext(sprPlayer, -1, frame*2*TILE, row*2*TILE, 2*TILE, 2*TILE, x-TILE + 2*(dir==LEFT)*TILE, y-TILE, xs * -1*(dir == LEFT) + xs * (dir == RIGHT), ys, c_white,1);

//draw_sprite_ext(mskPlayer, -1, x, y, xs, ys, 0, c_white, 1);
//draw_sprite_ext(sprPlayer, -1, x, y, xs * -1*(dir == LEFT) + xs * (dir == RIGHT), ys, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
